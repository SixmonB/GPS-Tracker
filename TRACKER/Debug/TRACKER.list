
TRACKER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000475c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f8  08004868  08004868  00014868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b60  08004b60  000203d8  2**0
                  CONTENTS
  4 .ARM          00000000  08004b60  08004b60  000203d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004b60  08004b60  000203d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b60  08004b60  00014b60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b64  08004b64  00014b64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003d8  20000000  08004b68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000334  200003d8  08004f40  000203d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000070c  08004f40  0002070c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000203d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cfff  00000000  00000000  00020401  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ef2  00000000  00000000  0002d400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cb0  00000000  00000000  0002f2f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bc8  00000000  00000000  0002ffa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000188d5  00000000  00000000  00030b70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e3e2  00000000  00000000  00049445  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b948  00000000  00000000  00057827  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e316f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004048  00000000  00000000  000e31c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200003d8 	.word	0x200003d8
 8000128:	00000000 	.word	0x00000000
 800012c:	08004850 	.word	0x08004850

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200003dc 	.word	0x200003dc
 8000148:	08004850 	.word	0x08004850

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000160:	f001 f936 	bl	80013d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000164:	f000 f8d0 	bl	8000308 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000168:	f000 f9de 	bl	8000528 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800016c:	f000 f95e 	bl	800042c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000170:	f000 f986 	bl	8000480 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000174:	f000 f9ae 	bl	80004d4 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8000178:	f000 f90a 	bl	8000390 <MX_TIM2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_Delay(1000);
 800017c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000180:	f001 f988 	bl	8001494 <HAL_Delay>
  HAL_UART_Receive_IT(&huart1, cadena, 1);
 8000184:	2201      	movs	r2, #1
 8000186:	4954      	ldr	r1, [pc, #336]	; (80002d8 <main+0x17c>)
 8000188:	4854      	ldr	r0, [pc, #336]	; (80002dc <main+0x180>)
 800018a:	f002 fea9 	bl	8002ee0 <HAL_UART_Receive_IT>
  HAL_UART_Transmit(&huart1, (uint8_t *)start, strlen(start), 100);
 800018e:	4854      	ldr	r0, [pc, #336]	; (80002e0 <main+0x184>)
 8000190:	f7ff ffdc 	bl	800014c <strlen>
 8000194:	4603      	mov	r3, r0
 8000196:	b29a      	uxth	r2, r3
 8000198:	2364      	movs	r3, #100	; 0x64
 800019a:	4951      	ldr	r1, [pc, #324]	; (80002e0 <main+0x184>)
 800019c:	484f      	ldr	r0, [pc, #316]	; (80002dc <main+0x180>)
 800019e:	f002 fd6e 	bl	8002c7e <HAL_UART_Transmit>
  HAL_Delay(1000);
 80001a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001a6:	f001 f975 	bl	8001494 <HAL_Delay>
  HAL_UART_Transmit(&huart1, (uint8_t *)helpini, strlen(helpini), 100);
 80001aa:	484e      	ldr	r0, [pc, #312]	; (80002e4 <main+0x188>)
 80001ac:	f7ff ffce 	bl	800014c <strlen>
 80001b0:	4603      	mov	r3, r0
 80001b2:	b29a      	uxth	r2, r3
 80001b4:	2364      	movs	r3, #100	; 0x64
 80001b6:	494b      	ldr	r1, [pc, #300]	; (80002e4 <main+0x188>)
 80001b8:	4848      	ldr	r0, [pc, #288]	; (80002dc <main+0x180>)
 80001ba:	f002 fd60 	bl	8002c7e <HAL_UART_Transmit>

  HAL_UART_Transmit(&huart3, (uint8_t *)disableRMC, strlen(disableRMC), 100);
 80001be:	484a      	ldr	r0, [pc, #296]	; (80002e8 <main+0x18c>)
 80001c0:	f7ff ffc4 	bl	800014c <strlen>
 80001c4:	4603      	mov	r3, r0
 80001c6:	b29a      	uxth	r2, r3
 80001c8:	2364      	movs	r3, #100	; 0x64
 80001ca:	4947      	ldr	r1, [pc, #284]	; (80002e8 <main+0x18c>)
 80001cc:	4847      	ldr	r0, [pc, #284]	; (80002ec <main+0x190>)
 80001ce:	f002 fd56 	bl	8002c7e <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart3, (uint8_t *)disableGSV, strlen(disableGSV), 100);
 80001d2:	4847      	ldr	r0, [pc, #284]	; (80002f0 <main+0x194>)
 80001d4:	f7ff ffba 	bl	800014c <strlen>
 80001d8:	4603      	mov	r3, r0
 80001da:	b29a      	uxth	r2, r3
 80001dc:	2364      	movs	r3, #100	; 0x64
 80001de:	4944      	ldr	r1, [pc, #272]	; (80002f0 <main+0x194>)
 80001e0:	4842      	ldr	r0, [pc, #264]	; (80002ec <main+0x190>)
 80001e2:	f002 fd4c 	bl	8002c7e <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart3, (uint8_t *)disableGSA, strlen(disableGSA), 100);
 80001e6:	4843      	ldr	r0, [pc, #268]	; (80002f4 <main+0x198>)
 80001e8:	f7ff ffb0 	bl	800014c <strlen>
 80001ec:	4603      	mov	r3, r0
 80001ee:	b29a      	uxth	r2, r3
 80001f0:	2364      	movs	r3, #100	; 0x64
 80001f2:	4940      	ldr	r1, [pc, #256]	; (80002f4 <main+0x198>)
 80001f4:	483d      	ldr	r0, [pc, #244]	; (80002ec <main+0x190>)
 80001f6:	f002 fd42 	bl	8002c7e <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart3, (uint8_t *)disableGGA, strlen(disableGGA), 100);
 80001fa:	483f      	ldr	r0, [pc, #252]	; (80002f8 <main+0x19c>)
 80001fc:	f7ff ffa6 	bl	800014c <strlen>
 8000200:	4603      	mov	r3, r0
 8000202:	b29a      	uxth	r2, r3
 8000204:	2364      	movs	r3, #100	; 0x64
 8000206:	493c      	ldr	r1, [pc, #240]	; (80002f8 <main+0x19c>)
 8000208:	4838      	ldr	r0, [pc, #224]	; (80002ec <main+0x190>)
 800020a:	f002 fd38 	bl	8002c7e <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart3, (uint8_t *)disableZDA, strlen(disableZDA), 100);
 800020e:	483b      	ldr	r0, [pc, #236]	; (80002fc <main+0x1a0>)
 8000210:	f7ff ff9c 	bl	800014c <strlen>
 8000214:	4603      	mov	r3, r0
 8000216:	b29a      	uxth	r2, r3
 8000218:	2364      	movs	r3, #100	; 0x64
 800021a:	4938      	ldr	r1, [pc, #224]	; (80002fc <main+0x1a0>)
 800021c:	4833      	ldr	r0, [pc, #204]	; (80002ec <main+0x190>)
 800021e:	f002 fd2e 	bl	8002c7e <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart3, (uint8_t *)disableVTG, strlen(disableVTG), 100);
 8000222:	4837      	ldr	r0, [pc, #220]	; (8000300 <main+0x1a4>)
 8000224:	f7ff ff92 	bl	800014c <strlen>
 8000228:	4603      	mov	r3, r0
 800022a:	b29a      	uxth	r2, r3
 800022c:	2364      	movs	r3, #100	; 0x64
 800022e:	4934      	ldr	r1, [pc, #208]	; (8000300 <main+0x1a4>)
 8000230:	482e      	ldr	r0, [pc, #184]	; (80002ec <main+0x190>)
 8000232:	f002 fd24 	bl	8002c7e <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart3, (uint8_t *)disableGLL, strlen(disableGLL), 100);
 8000236:	4833      	ldr	r0, [pc, #204]	; (8000304 <main+0x1a8>)
 8000238:	f7ff ff88 	bl	800014c <strlen>
 800023c:	4603      	mov	r3, r0
 800023e:	b29a      	uxth	r2, r3
 8000240:	2364      	movs	r3, #100	; 0x64
 8000242:	4930      	ldr	r1, [pc, #192]	; (8000304 <main+0x1a8>)
 8000244:	4829      	ldr	r0, [pc, #164]	; (80002ec <main+0x190>)
 8000246:	f002 fd1a 	bl	8002c7e <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1, (uint8_t *)disableRMC, strlen(disableRMC), 100);
 800024a:	4827      	ldr	r0, [pc, #156]	; (80002e8 <main+0x18c>)
 800024c:	f7ff ff7e 	bl	800014c <strlen>
 8000250:	4603      	mov	r3, r0
 8000252:	b29a      	uxth	r2, r3
 8000254:	2364      	movs	r3, #100	; 0x64
 8000256:	4924      	ldr	r1, [pc, #144]	; (80002e8 <main+0x18c>)
 8000258:	4820      	ldr	r0, [pc, #128]	; (80002dc <main+0x180>)
 800025a:	f002 fd10 	bl	8002c7e <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1, (uint8_t *)disableGSV, strlen(disableGSV), 100);
 800025e:	4824      	ldr	r0, [pc, #144]	; (80002f0 <main+0x194>)
 8000260:	f7ff ff74 	bl	800014c <strlen>
 8000264:	4603      	mov	r3, r0
 8000266:	b29a      	uxth	r2, r3
 8000268:	2364      	movs	r3, #100	; 0x64
 800026a:	4921      	ldr	r1, [pc, #132]	; (80002f0 <main+0x194>)
 800026c:	481b      	ldr	r0, [pc, #108]	; (80002dc <main+0x180>)
 800026e:	f002 fd06 	bl	8002c7e <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1, (uint8_t *)disableGSA, strlen(disableGSA), 100);
 8000272:	4820      	ldr	r0, [pc, #128]	; (80002f4 <main+0x198>)
 8000274:	f7ff ff6a 	bl	800014c <strlen>
 8000278:	4603      	mov	r3, r0
 800027a:	b29a      	uxth	r2, r3
 800027c:	2364      	movs	r3, #100	; 0x64
 800027e:	491d      	ldr	r1, [pc, #116]	; (80002f4 <main+0x198>)
 8000280:	4816      	ldr	r0, [pc, #88]	; (80002dc <main+0x180>)
 8000282:	f002 fcfc 	bl	8002c7e <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1, (uint8_t *)disableGGA, strlen(disableGGA), 100);
 8000286:	481c      	ldr	r0, [pc, #112]	; (80002f8 <main+0x19c>)
 8000288:	f7ff ff60 	bl	800014c <strlen>
 800028c:	4603      	mov	r3, r0
 800028e:	b29a      	uxth	r2, r3
 8000290:	2364      	movs	r3, #100	; 0x64
 8000292:	4919      	ldr	r1, [pc, #100]	; (80002f8 <main+0x19c>)
 8000294:	4811      	ldr	r0, [pc, #68]	; (80002dc <main+0x180>)
 8000296:	f002 fcf2 	bl	8002c7e <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1, (uint8_t *)disableZDA, strlen(disableZDA), 100);
 800029a:	4818      	ldr	r0, [pc, #96]	; (80002fc <main+0x1a0>)
 800029c:	f7ff ff56 	bl	800014c <strlen>
 80002a0:	4603      	mov	r3, r0
 80002a2:	b29a      	uxth	r2, r3
 80002a4:	2364      	movs	r3, #100	; 0x64
 80002a6:	4915      	ldr	r1, [pc, #84]	; (80002fc <main+0x1a0>)
 80002a8:	480c      	ldr	r0, [pc, #48]	; (80002dc <main+0x180>)
 80002aa:	f002 fce8 	bl	8002c7e <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1, (uint8_t *)disableVTG, strlen(disableVTG), 100);
 80002ae:	4814      	ldr	r0, [pc, #80]	; (8000300 <main+0x1a4>)
 80002b0:	f7ff ff4c 	bl	800014c <strlen>
 80002b4:	4603      	mov	r3, r0
 80002b6:	b29a      	uxth	r2, r3
 80002b8:	2364      	movs	r3, #100	; 0x64
 80002ba:	4911      	ldr	r1, [pc, #68]	; (8000300 <main+0x1a4>)
 80002bc:	4807      	ldr	r0, [pc, #28]	; (80002dc <main+0x180>)
 80002be:	f002 fcde 	bl	8002c7e <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1, (uint8_t *)disableGLL, strlen(disableGLL), 100);
 80002c2:	4810      	ldr	r0, [pc, #64]	; (8000304 <main+0x1a8>)
 80002c4:	f7ff ff42 	bl	800014c <strlen>
 80002c8:	4603      	mov	r3, r0
 80002ca:	b29a      	uxth	r2, r3
 80002cc:	2364      	movs	r3, #100	; 0x64
 80002ce:	490d      	ldr	r1, [pc, #52]	; (8000304 <main+0x1a8>)
 80002d0:	4802      	ldr	r0, [pc, #8]	; (80002dc <main+0x180>)
 80002d2:	f002 fcd4 	bl	8002c7e <HAL_UART_Transmit>

  while (1)
 80002d6:	e7fe      	b.n	80002d6 <main+0x17a>
 80002d8:	200006f0 	.word	0x200006f0
 80002dc:	20000560 	.word	0x20000560
 80002e0:	200001b8 	.word	0x200001b8
 80002e4:	200001d4 	.word	0x200001d4
 80002e8:	20000228 	.word	0x20000228
 80002ec:	20000470 	.word	0x20000470
 80002f0:	20000268 	.word	0x20000268
 80002f4:	20000288 	.word	0x20000288
 80002f8:	200002a8 	.word	0x200002a8
 80002fc:	200002e8 	.word	0x200002e8
 8000300:	200002c8 	.word	0x200002c8
 8000304:	20000248 	.word	0x20000248

08000308 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b090      	sub	sp, #64	; 0x40
 800030c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800030e:	f107 0318 	add.w	r3, r7, #24
 8000312:	2228      	movs	r2, #40	; 0x28
 8000314:	2100      	movs	r1, #0
 8000316:	4618      	mov	r0, r3
 8000318:	f003 f975 	bl	8003606 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800031c:	1d3b      	adds	r3, r7, #4
 800031e:	2200      	movs	r2, #0
 8000320:	601a      	str	r2, [r3, #0]
 8000322:	605a      	str	r2, [r3, #4]
 8000324:	609a      	str	r2, [r3, #8]
 8000326:	60da      	str	r2, [r3, #12]
 8000328:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800032a:	2301      	movs	r3, #1
 800032c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800032e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000332:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000334:	2300      	movs	r3, #0
 8000336:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000338:	2301      	movs	r3, #1
 800033a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800033c:	2302      	movs	r3, #2
 800033e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000340:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000344:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000346:	2300      	movs	r3, #0
 8000348:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800034a:	f107 0318 	add.w	r3, r7, #24
 800034e:	4618      	mov	r0, r3
 8000350:	f001 fc06 	bl	8001b60 <HAL_RCC_OscConfig>
 8000354:	4603      	mov	r3, r0
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <SystemClock_Config+0x56>
  {
    Error_Handler();
 800035a:	f000 fdc3 	bl	8000ee4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800035e:	230f      	movs	r3, #15
 8000360:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000362:	2302      	movs	r3, #2
 8000364:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000366:	2380      	movs	r3, #128	; 0x80
 8000368:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 800036a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800036e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000370:	2300      	movs	r3, #0
 8000372:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000374:	1d3b      	adds	r3, r7, #4
 8000376:	2100      	movs	r1, #0
 8000378:	4618      	mov	r0, r3
 800037a:	f001 fe71 	bl	8002060 <HAL_RCC_ClockConfig>
 800037e:	4603      	mov	r3, r0
 8000380:	2b00      	cmp	r3, #0
 8000382:	d001      	beq.n	8000388 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000384:	f000 fdae 	bl	8000ee4 <Error_Handler>
  }
}
 8000388:	bf00      	nop
 800038a:	3740      	adds	r7, #64	; 0x40
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}

08000390 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b086      	sub	sp, #24
 8000394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000396:	f107 0308 	add.w	r3, r7, #8
 800039a:	2200      	movs	r2, #0
 800039c:	601a      	str	r2, [r3, #0]
 800039e:	605a      	str	r2, [r3, #4]
 80003a0:	609a      	str	r2, [r3, #8]
 80003a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003a4:	463b      	mov	r3, r7
 80003a6:	2200      	movs	r2, #0
 80003a8:	601a      	str	r2, [r3, #0]
 80003aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80003ac:	4b1e      	ldr	r3, [pc, #120]	; (8000428 <MX_TIM2_Init+0x98>)
 80003ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 80003b4:	4b1c      	ldr	r3, [pc, #112]	; (8000428 <MX_TIM2_Init+0x98>)
 80003b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80003ba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003bc:	4b1a      	ldr	r3, [pc, #104]	; (8000428 <MX_TIM2_Init+0x98>)
 80003be:	2200      	movs	r2, #0
 80003c0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 80003c2:	4b19      	ldr	r3, [pc, #100]	; (8000428 <MX_TIM2_Init+0x98>)
 80003c4:	f242 720f 	movw	r2, #9999	; 0x270f
 80003c8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003ca:	4b17      	ldr	r3, [pc, #92]	; (8000428 <MX_TIM2_Init+0x98>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80003d0:	4b15      	ldr	r3, [pc, #84]	; (8000428 <MX_TIM2_Init+0x98>)
 80003d2:	2280      	movs	r2, #128	; 0x80
 80003d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80003d6:	4814      	ldr	r0, [pc, #80]	; (8000428 <MX_TIM2_Init+0x98>)
 80003d8:	f001 ffdc 	bl	8002394 <HAL_TIM_Base_Init>
 80003dc:	4603      	mov	r3, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d001      	beq.n	80003e6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80003e2:	f000 fd7f 	bl	8000ee4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003ea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80003ec:	f107 0308 	add.w	r3, r7, #8
 80003f0:	4619      	mov	r1, r3
 80003f2:	480d      	ldr	r0, [pc, #52]	; (8000428 <MX_TIM2_Init+0x98>)
 80003f4:	f002 f9a6 	bl	8002744 <HAL_TIM_ConfigClockSource>
 80003f8:	4603      	mov	r3, r0
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d001      	beq.n	8000402 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80003fe:	f000 fd71 	bl	8000ee4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000402:	2300      	movs	r3, #0
 8000404:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000406:	2300      	movs	r3, #0
 8000408:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800040a:	463b      	mov	r3, r7
 800040c:	4619      	mov	r1, r3
 800040e:	4806      	ldr	r0, [pc, #24]	; (8000428 <MX_TIM2_Init+0x98>)
 8000410:	f002 fb78 	bl	8002b04 <HAL_TIMEx_MasterConfigSynchronization>
 8000414:	4603      	mov	r3, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d001      	beq.n	800041e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800041a:	f000 fd63 	bl	8000ee4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800041e:	bf00      	nop
 8000420:	3718      	adds	r7, #24
 8000422:	46bd      	mov	sp, r7
 8000424:	bd80      	pop	{r7, pc}
 8000426:	bf00      	nop
 8000428:	20000648 	.word	0x20000648

0800042c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000430:	4b11      	ldr	r3, [pc, #68]	; (8000478 <MX_USART1_UART_Init+0x4c>)
 8000432:	4a12      	ldr	r2, [pc, #72]	; (800047c <MX_USART1_UART_Init+0x50>)
 8000434:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000436:	4b10      	ldr	r3, [pc, #64]	; (8000478 <MX_USART1_UART_Init+0x4c>)
 8000438:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800043c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800043e:	4b0e      	ldr	r3, [pc, #56]	; (8000478 <MX_USART1_UART_Init+0x4c>)
 8000440:	2200      	movs	r2, #0
 8000442:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000444:	4b0c      	ldr	r3, [pc, #48]	; (8000478 <MX_USART1_UART_Init+0x4c>)
 8000446:	2200      	movs	r2, #0
 8000448:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800044a:	4b0b      	ldr	r3, [pc, #44]	; (8000478 <MX_USART1_UART_Init+0x4c>)
 800044c:	2200      	movs	r2, #0
 800044e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000450:	4b09      	ldr	r3, [pc, #36]	; (8000478 <MX_USART1_UART_Init+0x4c>)
 8000452:	220c      	movs	r2, #12
 8000454:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000456:	4b08      	ldr	r3, [pc, #32]	; (8000478 <MX_USART1_UART_Init+0x4c>)
 8000458:	2200      	movs	r2, #0
 800045a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800045c:	4b06      	ldr	r3, [pc, #24]	; (8000478 <MX_USART1_UART_Init+0x4c>)
 800045e:	2200      	movs	r2, #0
 8000460:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000462:	4805      	ldr	r0, [pc, #20]	; (8000478 <MX_USART1_UART_Init+0x4c>)
 8000464:	f002 fbbe 	bl	8002be4 <HAL_UART_Init>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d001      	beq.n	8000472 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800046e:	f000 fd39 	bl	8000ee4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000472:	bf00      	nop
 8000474:	bd80      	pop	{r7, pc}
 8000476:	bf00      	nop
 8000478:	20000560 	.word	0x20000560
 800047c:	40013800 	.word	0x40013800

08000480 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000484:	4b11      	ldr	r3, [pc, #68]	; (80004cc <MX_USART2_UART_Init+0x4c>)
 8000486:	4a12      	ldr	r2, [pc, #72]	; (80004d0 <MX_USART2_UART_Init+0x50>)
 8000488:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800048a:	4b10      	ldr	r3, [pc, #64]	; (80004cc <MX_USART2_UART_Init+0x4c>)
 800048c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000490:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000492:	4b0e      	ldr	r3, [pc, #56]	; (80004cc <MX_USART2_UART_Init+0x4c>)
 8000494:	2200      	movs	r2, #0
 8000496:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000498:	4b0c      	ldr	r3, [pc, #48]	; (80004cc <MX_USART2_UART_Init+0x4c>)
 800049a:	2200      	movs	r2, #0
 800049c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800049e:	4b0b      	ldr	r3, [pc, #44]	; (80004cc <MX_USART2_UART_Init+0x4c>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004a4:	4b09      	ldr	r3, [pc, #36]	; (80004cc <MX_USART2_UART_Init+0x4c>)
 80004a6:	220c      	movs	r2, #12
 80004a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004aa:	4b08      	ldr	r3, [pc, #32]	; (80004cc <MX_USART2_UART_Init+0x4c>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004b0:	4b06      	ldr	r3, [pc, #24]	; (80004cc <MX_USART2_UART_Init+0x4c>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004b6:	4805      	ldr	r0, [pc, #20]	; (80004cc <MX_USART2_UART_Init+0x4c>)
 80004b8:	f002 fb94 	bl	8002be4 <HAL_UART_Init>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d001      	beq.n	80004c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80004c2:	f000 fd0f 	bl	8000ee4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80004c6:	bf00      	nop
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	20000690 	.word	0x20000690
 80004d0:	40004400 	.word	0x40004400

080004d4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80004d8:	4b11      	ldr	r3, [pc, #68]	; (8000520 <MX_USART3_UART_Init+0x4c>)
 80004da:	4a12      	ldr	r2, [pc, #72]	; (8000524 <MX_USART3_UART_Init+0x50>)
 80004dc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80004de:	4b10      	ldr	r3, [pc, #64]	; (8000520 <MX_USART3_UART_Init+0x4c>)
 80004e0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80004e4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80004e6:	4b0e      	ldr	r3, [pc, #56]	; (8000520 <MX_USART3_UART_Init+0x4c>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80004ec:	4b0c      	ldr	r3, [pc, #48]	; (8000520 <MX_USART3_UART_Init+0x4c>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80004f2:	4b0b      	ldr	r3, [pc, #44]	; (8000520 <MX_USART3_UART_Init+0x4c>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80004f8:	4b09      	ldr	r3, [pc, #36]	; (8000520 <MX_USART3_UART_Init+0x4c>)
 80004fa:	220c      	movs	r2, #12
 80004fc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004fe:	4b08      	ldr	r3, [pc, #32]	; (8000520 <MX_USART3_UART_Init+0x4c>)
 8000500:	2200      	movs	r2, #0
 8000502:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000504:	4b06      	ldr	r3, [pc, #24]	; (8000520 <MX_USART3_UART_Init+0x4c>)
 8000506:	2200      	movs	r2, #0
 8000508:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800050a:	4805      	ldr	r0, [pc, #20]	; (8000520 <MX_USART3_UART_Init+0x4c>)
 800050c:	f002 fb6a 	bl	8002be4 <HAL_UART_Init>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d001      	beq.n	800051a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000516:	f000 fce5 	bl	8000ee4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800051a:	bf00      	nop
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	20000470 	.word	0x20000470
 8000524:	40004800 	.word	0x40004800

08000528 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b088      	sub	sp, #32
 800052c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800052e:	f107 0310 	add.w	r3, r7, #16
 8000532:	2200      	movs	r2, #0
 8000534:	601a      	str	r2, [r3, #0]
 8000536:	605a      	str	r2, [r3, #4]
 8000538:	609a      	str	r2, [r3, #8]
 800053a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800053c:	4b2e      	ldr	r3, [pc, #184]	; (80005f8 <MX_GPIO_Init+0xd0>)
 800053e:	699b      	ldr	r3, [r3, #24]
 8000540:	4a2d      	ldr	r2, [pc, #180]	; (80005f8 <MX_GPIO_Init+0xd0>)
 8000542:	f043 0310 	orr.w	r3, r3, #16
 8000546:	6193      	str	r3, [r2, #24]
 8000548:	4b2b      	ldr	r3, [pc, #172]	; (80005f8 <MX_GPIO_Init+0xd0>)
 800054a:	699b      	ldr	r3, [r3, #24]
 800054c:	f003 0310 	and.w	r3, r3, #16
 8000550:	60fb      	str	r3, [r7, #12]
 8000552:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000554:	4b28      	ldr	r3, [pc, #160]	; (80005f8 <MX_GPIO_Init+0xd0>)
 8000556:	699b      	ldr	r3, [r3, #24]
 8000558:	4a27      	ldr	r2, [pc, #156]	; (80005f8 <MX_GPIO_Init+0xd0>)
 800055a:	f043 0320 	orr.w	r3, r3, #32
 800055e:	6193      	str	r3, [r2, #24]
 8000560:	4b25      	ldr	r3, [pc, #148]	; (80005f8 <MX_GPIO_Init+0xd0>)
 8000562:	699b      	ldr	r3, [r3, #24]
 8000564:	f003 0320 	and.w	r3, r3, #32
 8000568:	60bb      	str	r3, [r7, #8]
 800056a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800056c:	4b22      	ldr	r3, [pc, #136]	; (80005f8 <MX_GPIO_Init+0xd0>)
 800056e:	699b      	ldr	r3, [r3, #24]
 8000570:	4a21      	ldr	r2, [pc, #132]	; (80005f8 <MX_GPIO_Init+0xd0>)
 8000572:	f043 0304 	orr.w	r3, r3, #4
 8000576:	6193      	str	r3, [r2, #24]
 8000578:	4b1f      	ldr	r3, [pc, #124]	; (80005f8 <MX_GPIO_Init+0xd0>)
 800057a:	699b      	ldr	r3, [r3, #24]
 800057c:	f003 0304 	and.w	r3, r3, #4
 8000580:	607b      	str	r3, [r7, #4]
 8000582:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000584:	4b1c      	ldr	r3, [pc, #112]	; (80005f8 <MX_GPIO_Init+0xd0>)
 8000586:	699b      	ldr	r3, [r3, #24]
 8000588:	4a1b      	ldr	r2, [pc, #108]	; (80005f8 <MX_GPIO_Init+0xd0>)
 800058a:	f043 0308 	orr.w	r3, r3, #8
 800058e:	6193      	str	r3, [r2, #24]
 8000590:	4b19      	ldr	r3, [pc, #100]	; (80005f8 <MX_GPIO_Init+0xd0>)
 8000592:	699b      	ldr	r3, [r3, #24]
 8000594:	f003 0308 	and.w	r3, r3, #8
 8000598:	603b      	str	r3, [r7, #0]
 800059a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ALARMA_GPIO_Port, ALARMA_Pin, GPIO_PIN_RESET);
 800059c:	2200      	movs	r2, #0
 800059e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005a2:	4816      	ldr	r0, [pc, #88]	; (80005fc <MX_GPIO_Init+0xd4>)
 80005a4:	f001 faa2 	bl	8001aec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80005a8:	2301      	movs	r3, #1
 80005aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005ac:	4b14      	ldr	r3, [pc, #80]	; (8000600 <MX_GPIO_Init+0xd8>)
 80005ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b0:	2300      	movs	r3, #0
 80005b2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005b4:	f107 0310 	add.w	r3, r7, #16
 80005b8:	4619      	mov	r1, r3
 80005ba:	4812      	ldr	r0, [pc, #72]	; (8000604 <MX_GPIO_Init+0xdc>)
 80005bc:	f001 f912 	bl	80017e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ALARMA_Pin */
  GPIO_InitStruct.Pin = ALARMA_Pin;
 80005c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c6:	2301      	movs	r3, #1
 80005c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ca:	2300      	movs	r3, #0
 80005cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ce:	2302      	movs	r3, #2
 80005d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ALARMA_GPIO_Port, &GPIO_InitStruct);
 80005d2:	f107 0310 	add.w	r3, r7, #16
 80005d6:	4619      	mov	r1, r3
 80005d8:	4808      	ldr	r0, [pc, #32]	; (80005fc <MX_GPIO_Init+0xd4>)
 80005da:	f001 f903 	bl	80017e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80005de:	2200      	movs	r2, #0
 80005e0:	2100      	movs	r1, #0
 80005e2:	2006      	movs	r0, #6
 80005e4:	f001 f851 	bl	800168a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80005e8:	2006      	movs	r0, #6
 80005ea:	f001 f86a 	bl	80016c2 <HAL_NVIC_EnableIRQ>

}
 80005ee:	bf00      	nop
 80005f0:	3720      	adds	r7, #32
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	40021000 	.word	0x40021000
 80005fc:	40010c00 	.word	0x40010c00
 8000600:	10110000 	.word	0x10110000
 8000604:	40010800 	.word	0x40010800

08000608 <text_msn>:

/* USER CODE BEGIN 4 */
void text_msn(mensaje){
 8000608:	b590      	push	{r4, r7, lr}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
	//HAL_UART_Receive_IT(&huart2, da, 1);
	HAL_UART_Transmit(&huart1,(uint8_t *)AT,strlen(AT), HAL_MAX_DELAY);//Probamos el modulo
 8000610:	4832      	ldr	r0, [pc, #200]	; (80006dc <text_msn+0xd4>)
 8000612:	f7ff fd9b 	bl	800014c <strlen>
 8000616:	4603      	mov	r3, r0
 8000618:	b29a      	uxth	r2, r3
 800061a:	f04f 33ff 	mov.w	r3, #4294967295
 800061e:	492f      	ldr	r1, [pc, #188]	; (80006dc <text_msn+0xd4>)
 8000620:	482f      	ldr	r0, [pc, #188]	; (80006e0 <text_msn+0xd8>)
 8000622:	f002 fb2c 	bl	8002c7e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2,(uint8_t *)AT,strlen(AT), HAL_MAX_DELAY);//Probamos el modulo
 8000626:	482d      	ldr	r0, [pc, #180]	; (80006dc <text_msn+0xd4>)
 8000628:	f7ff fd90 	bl	800014c <strlen>
 800062c:	4603      	mov	r3, r0
 800062e:	b29a      	uxth	r2, r3
 8000630:	f04f 33ff 	mov.w	r3, #4294967295
 8000634:	4929      	ldr	r1, [pc, #164]	; (80006dc <text_msn+0xd4>)
 8000636:	482b      	ldr	r0, [pc, #172]	; (80006e4 <text_msn+0xdc>)
 8000638:	f002 fb21 	bl	8002c7e <HAL_UART_Transmit>


	  HAL_UART_Transmit(&huart1, (uint8_t *)ModoM,strlen(ModoM), HAL_MAX_DELAY);//Ponemos el modulo en modo mensaje
 800063c:	482a      	ldr	r0, [pc, #168]	; (80006e8 <text_msn+0xe0>)
 800063e:	f7ff fd85 	bl	800014c <strlen>
 8000642:	4603      	mov	r3, r0
 8000644:	b29a      	uxth	r2, r3
 8000646:	f04f 33ff 	mov.w	r3, #4294967295
 800064a:	4927      	ldr	r1, [pc, #156]	; (80006e8 <text_msn+0xe0>)
 800064c:	4824      	ldr	r0, [pc, #144]	; (80006e0 <text_msn+0xd8>)
 800064e:	f002 fb16 	bl	8002c7e <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart2, (uint8_t *)ModoM,strlen(ModoM), HAL_MAX_DELAY);//Ponemos el modulo en modo mensaje
 8000652:	4825      	ldr	r0, [pc, #148]	; (80006e8 <text_msn+0xe0>)
 8000654:	f7ff fd7a 	bl	800014c <strlen>
 8000658:	4603      	mov	r3, r0
 800065a:	b29a      	uxth	r2, r3
 800065c:	f04f 33ff 	mov.w	r3, #4294967295
 8000660:	4921      	ldr	r1, [pc, #132]	; (80006e8 <text_msn+0xe0>)
 8000662:	4820      	ldr	r0, [pc, #128]	; (80006e4 <text_msn+0xdc>)
 8000664:	f002 fb0b 	bl	8002c7e <HAL_UART_Transmit>


	  HAL_UART_Transmit(&huart1, (uint8_t *)Number,strlen(Number), HAL_MAX_DELAY);//numero al que le mandamos mensaje
 8000668:	4820      	ldr	r0, [pc, #128]	; (80006ec <text_msn+0xe4>)
 800066a:	f7ff fd6f 	bl	800014c <strlen>
 800066e:	4603      	mov	r3, r0
 8000670:	b29a      	uxth	r2, r3
 8000672:	f04f 33ff 	mov.w	r3, #4294967295
 8000676:	491d      	ldr	r1, [pc, #116]	; (80006ec <text_msn+0xe4>)
 8000678:	4819      	ldr	r0, [pc, #100]	; (80006e0 <text_msn+0xd8>)
 800067a:	f002 fb00 	bl	8002c7e <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart2, (uint8_t *)Number,strlen(Number), HAL_MAX_DELAY);//numero al que le mandamos mensaje
 800067e:	481b      	ldr	r0, [pc, #108]	; (80006ec <text_msn+0xe4>)
 8000680:	f7ff fd64 	bl	800014c <strlen>
 8000684:	4603      	mov	r3, r0
 8000686:	b29a      	uxth	r2, r3
 8000688:	f04f 33ff 	mov.w	r3, #4294967295
 800068c:	4917      	ldr	r1, [pc, #92]	; (80006ec <text_msn+0xe4>)
 800068e:	4815      	ldr	r0, [pc, #84]	; (80006e4 <text_msn+0xdc>)
 8000690:	f002 faf5 	bl	8002c7e <HAL_UART_Transmit>


	  HAL_UART_Transmit(&huart1, (uint8_t *)mensaje,strlen(mensaje), HAL_MAX_DELAY);//mensaje que mandamos
 8000694:	687c      	ldr	r4, [r7, #4]
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	4618      	mov	r0, r3
 800069a:	f7ff fd57 	bl	800014c <strlen>
 800069e:	4603      	mov	r3, r0
 80006a0:	b29a      	uxth	r2, r3
 80006a2:	f04f 33ff 	mov.w	r3, #4294967295
 80006a6:	4621      	mov	r1, r4
 80006a8:	480d      	ldr	r0, [pc, #52]	; (80006e0 <text_msn+0xd8>)
 80006aa:	f002 fae8 	bl	8002c7e <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart2, (uint8_t *)mensaje,strlen(mensaje), HAL_MAX_DELAY);//mensaje que mandamos
 80006ae:	687c      	ldr	r4, [r7, #4]
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	4618      	mov	r0, r3
 80006b4:	f7ff fd4a 	bl	800014c <strlen>
 80006b8:	4603      	mov	r3, r0
 80006ba:	b29a      	uxth	r2, r3
 80006bc:	f04f 33ff 	mov.w	r3, #4294967295
 80006c0:	4621      	mov	r1, r4
 80006c2:	4808      	ldr	r0, [pc, #32]	; (80006e4 <text_msn+0xdc>)
 80006c4:	f002 fadb 	bl	8002c7e <HAL_UART_Transmit>


	  HAL_UART_Transmit(&huart2, &ctrlZin, 1, 100);
 80006c8:	2364      	movs	r3, #100	; 0x64
 80006ca:	2201      	movs	r2, #1
 80006cc:	4908      	ldr	r1, [pc, #32]	; (80006f0 <text_msn+0xe8>)
 80006ce:	4805      	ldr	r0, [pc, #20]	; (80006e4 <text_msn+0xdc>)
 80006d0:	f002 fad5 	bl	8002c7e <HAL_UART_Transmit>
}
 80006d4:	bf00      	nop
 80006d6:	370c      	adds	r7, #12
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd90      	pop	{r4, r7, pc}
 80006dc:	2000033c 	.word	0x2000033c
 80006e0:	20000560 	.word	0x20000560
 80006e4:	20000690 	.word	0x20000690
 80006e8:	20000340 	.word	0x20000340
 80006ec:	2000034c 	.word	0x2000034c
 80006f0:	20000366 	.word	0x20000366

080006f4 <interpreta_gps>:

void interpreta_gps(void){
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0

	HAL_UART_Transmit(&huart3, (uint8_t *) poll, strlen(poll), 100);
 80006fa:	482f      	ldr	r0, [pc, #188]	; (80007b8 <interpreta_gps+0xc4>)
 80006fc:	f7ff fd26 	bl	800014c <strlen>
 8000700:	4603      	mov	r3, r0
 8000702:	b29a      	uxth	r2, r3
 8000704:	2364      	movs	r3, #100	; 0x64
 8000706:	492c      	ldr	r1, [pc, #176]	; (80007b8 <interpreta_gps+0xc4>)
 8000708:	482c      	ldr	r0, [pc, #176]	; (80007bc <interpreta_gps+0xc8>)
 800070a:	f002 fab8 	bl	8002c7e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t *) poll, strlen(poll), 100);
 800070e:	482a      	ldr	r0, [pc, #168]	; (80007b8 <interpreta_gps+0xc4>)
 8000710:	f7ff fd1c 	bl	800014c <strlen>
 8000714:	4603      	mov	r3, r0
 8000716:	b29a      	uxth	r2, r3
 8000718:	2364      	movs	r3, #100	; 0x64
 800071a:	4927      	ldr	r1, [pc, #156]	; (80007b8 <interpreta_gps+0xc4>)
 800071c:	4828      	ldr	r0, [pc, #160]	; (80007c0 <interpreta_gps+0xcc>)
 800071e:	f002 faae 	bl	8002c7e <HAL_UART_Transmit>
	HAL_UART_Receive(&huart3, (uint8_t *)buff, 60,100);
 8000722:	2364      	movs	r3, #100	; 0x64
 8000724:	223c      	movs	r2, #60	; 0x3c
 8000726:	4927      	ldr	r1, [pc, #156]	; (80007c4 <interpreta_gps+0xd0>)
 8000728:	4824      	ldr	r0, [pc, #144]	; (80007bc <interpreta_gps+0xc8>)
 800072a:	f002 fb3a 	bl	8002da2 <HAL_UART_Receive>
	HAL_UART_Transmit(&huart1, (uint8_t *) buff, strlen(buff), 100);
 800072e:	4825      	ldr	r0, [pc, #148]	; (80007c4 <interpreta_gps+0xd0>)
 8000730:	f7ff fd0c 	bl	800014c <strlen>
 8000734:	4603      	mov	r3, r0
 8000736:	b29a      	uxth	r2, r3
 8000738:	2364      	movs	r3, #100	; 0x64
 800073a:	4922      	ldr	r1, [pc, #136]	; (80007c4 <interpreta_gps+0xd0>)
 800073c:	4820      	ldr	r0, [pc, #128]	; (80007c0 <interpreta_gps+0xcc>)
 800073e:	f002 fa9e 	bl	8002c7e <HAL_UART_Transmit>
	cnt = 0;
 8000742:	4b21      	ldr	r3, [pc, #132]	; (80007c8 <interpreta_gps+0xd4>)
 8000744:	2200      	movs	r2, #0
 8000746:	701a      	strb	r2, [r3, #0]
	for (char *pV = strtok(buff, ","); pV != NULL; pV = strtok(NULL, ",")) {
 8000748:	4920      	ldr	r1, [pc, #128]	; (80007cc <interpreta_gps+0xd8>)
 800074a:	481e      	ldr	r0, [pc, #120]	; (80007c4 <interpreta_gps+0xd0>)
 800074c:	f002 ffba 	bl	80036c4 <strtok>
 8000750:	6078      	str	r0, [r7, #4]
 8000752:	e058      	b.n	8000806 <interpreta_gps+0x112>
		switch (cnt) {
 8000754:	4b1c      	ldr	r3, [pc, #112]	; (80007c8 <interpreta_gps+0xd4>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	3b02      	subs	r3, #2
 800075a:	2b04      	cmp	r3, #4
 800075c:	d848      	bhi.n	80007f0 <interpreta_gps+0xfc>
 800075e:	a201      	add	r2, pc, #4	; (adr r2, 8000764 <interpreta_gps+0x70>)
 8000760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000764:	08000779 	.word	0x08000779
 8000768:	08000789 	.word	0x08000789
 800076c:	08000799 	.word	0x08000799
 8000770:	080007a9 	.word	0x080007a9
 8000774:	080007e1 	.word	0x080007e1
		case 2:
			utcRaw = strdup(pV);
 8000778:	6878      	ldr	r0, [r7, #4]
 800077a:	f002 ff71 	bl	8003660 <strdup>
 800077e:	4603      	mov	r3, r0
 8000780:	461a      	mov	r2, r3
 8000782:	4b13      	ldr	r3, [pc, #76]	; (80007d0 <interpreta_gps+0xdc>)
 8000784:	601a      	str	r2, [r3, #0]
			break;
 8000786:	e033      	b.n	80007f0 <interpreta_gps+0xfc>
		case 3:
			latRaw = strdup(pV);
 8000788:	6878      	ldr	r0, [r7, #4]
 800078a:	f002 ff69 	bl	8003660 <strdup>
 800078e:	4603      	mov	r3, r0
 8000790:	461a      	mov	r2, r3
 8000792:	4b10      	ldr	r3, [pc, #64]	; (80007d4 <interpreta_gps+0xe0>)
 8000794:	601a      	str	r2, [r3, #0]
			break;
 8000796:	e02b      	b.n	80007f0 <interpreta_gps+0xfc>
		case 4:
			hemNS = strdup(pV);
 8000798:	6878      	ldr	r0, [r7, #4]
 800079a:	f002 ff61 	bl	8003660 <strdup>
 800079e:	4603      	mov	r3, r0
 80007a0:	461a      	mov	r2, r3
 80007a2:	4b0d      	ldr	r3, [pc, #52]	; (80007d8 <interpreta_gps+0xe4>)
 80007a4:	601a      	str	r2, [r3, #0]
			break;
 80007a6:	e023      	b.n	80007f0 <interpreta_gps+0xfc>
		case 5:
			lonRaw = strdup(pV);
 80007a8:	6878      	ldr	r0, [r7, #4]
 80007aa:	f002 ff59 	bl	8003660 <strdup>
 80007ae:	4603      	mov	r3, r0
 80007b0:	461a      	mov	r2, r3
 80007b2:	4b0a      	ldr	r3, [pc, #40]	; (80007dc <interpreta_gps+0xe8>)
 80007b4:	601a      	str	r2, [r3, #0]
			break;
 80007b6:	e01b      	b.n	80007f0 <interpreta_gps+0xfc>
 80007b8:	20000308 	.word	0x20000308
 80007bc:	20000470 	.word	0x20000470
 80007c0:	20000560 	.word	0x20000560
 80007c4:	200004d0 	.word	0x200004d0
 80007c8:	200003f5 	.word	0x200003f5
 80007cc:	08004868 	.word	0x08004868
 80007d0:	200004b8 	.word	0x200004b8
 80007d4:	200004b4 	.word	0x200004b4
 80007d8:	200006d0 	.word	0x200006d0
 80007dc:	20000630 	.word	0x20000630
		case 6:
			hemEW = strdup(pV);
 80007e0:	6878      	ldr	r0, [r7, #4]
 80007e2:	f002 ff3d 	bl	8003660 <strdup>
 80007e6:	4603      	mov	r3, r0
 80007e8:	461a      	mov	r2, r3
 80007ea:	4b97      	ldr	r3, [pc, #604]	; (8000a48 <interpreta_gps+0x354>)
 80007ec:	601a      	str	r2, [r3, #0]
			break;
 80007ee:	bf00      	nop
		}
		cnt++;
 80007f0:	4b96      	ldr	r3, [pc, #600]	; (8000a4c <interpreta_gps+0x358>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	3301      	adds	r3, #1
 80007f6:	b2da      	uxtb	r2, r3
 80007f8:	4b94      	ldr	r3, [pc, #592]	; (8000a4c <interpreta_gps+0x358>)
 80007fa:	701a      	strb	r2, [r3, #0]
	for (char *pV = strtok(buff, ","); pV != NULL; pV = strtok(NULL, ",")) {
 80007fc:	4994      	ldr	r1, [pc, #592]	; (8000a50 <interpreta_gps+0x35c>)
 80007fe:	2000      	movs	r0, #0
 8000800:	f002 ff60 	bl	80036c4 <strtok>
 8000804:	6078      	str	r0, [r7, #4]
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d1a3      	bne.n	8000754 <interpreta_gps+0x60>
	}
	memcpy(latDg, &latRaw[0], 2);
 800080c:	4b91      	ldr	r3, [pc, #580]	; (8000a54 <interpreta_gps+0x360>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	881b      	ldrh	r3, [r3, #0]
 8000812:	b29b      	uxth	r3, r3
 8000814:	4a90      	ldr	r2, [pc, #576]	; (8000a58 <interpreta_gps+0x364>)
 8000816:	8013      	strh	r3, [r2, #0]
	latDg[2] = '\0';
 8000818:	4b8f      	ldr	r3, [pc, #572]	; (8000a58 <interpreta_gps+0x364>)
 800081a:	2200      	movs	r2, #0
 800081c:	709a      	strb	r2, [r3, #2]
	memcpy(latMS, &latRaw[2], 7);
 800081e:	4b8d      	ldr	r3, [pc, #564]	; (8000a54 <interpreta_gps+0x360>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	1c9a      	adds	r2, r3, #2
 8000824:	4b8d      	ldr	r3, [pc, #564]	; (8000a5c <interpreta_gps+0x368>)
 8000826:	6811      	ldr	r1, [r2, #0]
 8000828:	6019      	str	r1, [r3, #0]
 800082a:	8891      	ldrh	r1, [r2, #4]
 800082c:	7992      	ldrb	r2, [r2, #6]
 800082e:	8099      	strh	r1, [r3, #4]
 8000830:	719a      	strb	r2, [r3, #6]
	latMS[7] = '\0';
 8000832:	4b8a      	ldr	r3, [pc, #552]	; (8000a5c <interpreta_gps+0x368>)
 8000834:	2200      	movs	r2, #0
 8000836:	71da      	strb	r2, [r3, #7]

	strcpy(latitud, latDg);
 8000838:	4987      	ldr	r1, [pc, #540]	; (8000a58 <interpreta_gps+0x364>)
 800083a:	4889      	ldr	r0, [pc, #548]	; (8000a60 <interpreta_gps+0x36c>)
 800083c:	f002 ff07 	bl	800364e <strcpy>
	strcat(latitud, " ");
 8000840:	4887      	ldr	r0, [pc, #540]	; (8000a60 <interpreta_gps+0x36c>)
 8000842:	f7ff fc83 	bl	800014c <strlen>
 8000846:	4603      	mov	r3, r0
 8000848:	461a      	mov	r2, r3
 800084a:	4b85      	ldr	r3, [pc, #532]	; (8000a60 <interpreta_gps+0x36c>)
 800084c:	4413      	add	r3, r2
 800084e:	4985      	ldr	r1, [pc, #532]	; (8000a64 <interpreta_gps+0x370>)
 8000850:	461a      	mov	r2, r3
 8000852:	460b      	mov	r3, r1
 8000854:	881b      	ldrh	r3, [r3, #0]
 8000856:	8013      	strh	r3, [r2, #0]
	strcat(latitud, latMS);
 8000858:	4980      	ldr	r1, [pc, #512]	; (8000a5c <interpreta_gps+0x368>)
 800085a:	4881      	ldr	r0, [pc, #516]	; (8000a60 <interpreta_gps+0x36c>)
 800085c:	f002 fedb 	bl	8003616 <strcat>
	strcat(latitud, "\r\n");
 8000860:	487f      	ldr	r0, [pc, #508]	; (8000a60 <interpreta_gps+0x36c>)
 8000862:	f7ff fc73 	bl	800014c <strlen>
 8000866:	4603      	mov	r3, r0
 8000868:	461a      	mov	r2, r3
 800086a:	4b7d      	ldr	r3, [pc, #500]	; (8000a60 <interpreta_gps+0x36c>)
 800086c:	4413      	add	r3, r2
 800086e:	4a7e      	ldr	r2, [pc, #504]	; (8000a68 <interpreta_gps+0x374>)
 8000870:	8811      	ldrh	r1, [r2, #0]
 8000872:	7892      	ldrb	r2, [r2, #2]
 8000874:	8019      	strh	r1, [r3, #0]
 8000876:	709a      	strb	r2, [r3, #2]
	latitud[14] = '\0';
 8000878:	4b79      	ldr	r3, [pc, #484]	; (8000a60 <interpreta_gps+0x36c>)
 800087a:	2200      	movs	r2, #0
 800087c:	739a      	strb	r2, [r3, #14]

	strcpy(lat, &hemNS[0]);
 800087e:	4b7b      	ldr	r3, [pc, #492]	; (8000a6c <interpreta_gps+0x378>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	4619      	mov	r1, r3
 8000884:	487a      	ldr	r0, [pc, #488]	; (8000a70 <interpreta_gps+0x37c>)
 8000886:	f002 fee2 	bl	800364e <strcpy>
	strcat(lat, ": ");
 800088a:	4879      	ldr	r0, [pc, #484]	; (8000a70 <interpreta_gps+0x37c>)
 800088c:	f7ff fc5e 	bl	800014c <strlen>
 8000890:	4603      	mov	r3, r0
 8000892:	461a      	mov	r2, r3
 8000894:	4b76      	ldr	r3, [pc, #472]	; (8000a70 <interpreta_gps+0x37c>)
 8000896:	4413      	add	r3, r2
 8000898:	4a76      	ldr	r2, [pc, #472]	; (8000a74 <interpreta_gps+0x380>)
 800089a:	8811      	ldrh	r1, [r2, #0]
 800089c:	7892      	ldrb	r2, [r2, #2]
 800089e:	8019      	strh	r1, [r3, #0]
 80008a0:	709a      	strb	r2, [r3, #2]
	lat[3]='\0';
 80008a2:	4b73      	ldr	r3, [pc, #460]	; (8000a70 <interpreta_gps+0x37c>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	70da      	strb	r2, [r3, #3]

	memcpy(lonDg, &lonRaw[0], 3);
 80008a8:	4b73      	ldr	r3, [pc, #460]	; (8000a78 <interpreta_gps+0x384>)
 80008aa:	681a      	ldr	r2, [r3, #0]
 80008ac:	4b73      	ldr	r3, [pc, #460]	; (8000a7c <interpreta_gps+0x388>)
 80008ae:	8811      	ldrh	r1, [r2, #0]
 80008b0:	7892      	ldrb	r2, [r2, #2]
 80008b2:	8019      	strh	r1, [r3, #0]
 80008b4:	709a      	strb	r2, [r3, #2]
	lonDg[3] = '\0';
 80008b6:	4b71      	ldr	r3, [pc, #452]	; (8000a7c <interpreta_gps+0x388>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	70da      	strb	r2, [r3, #3]
	memcpy(lonMS, &lonRaw[3], 7);
 80008bc:	4b6e      	ldr	r3, [pc, #440]	; (8000a78 <interpreta_gps+0x384>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	1cda      	adds	r2, r3, #3
 80008c2:	4b6f      	ldr	r3, [pc, #444]	; (8000a80 <interpreta_gps+0x38c>)
 80008c4:	6811      	ldr	r1, [r2, #0]
 80008c6:	6019      	str	r1, [r3, #0]
 80008c8:	8891      	ldrh	r1, [r2, #4]
 80008ca:	7992      	ldrb	r2, [r2, #6]
 80008cc:	8099      	strh	r1, [r3, #4]
 80008ce:	719a      	strb	r2, [r3, #6]
	lonMS[7] = '\0';
 80008d0:	4b6b      	ldr	r3, [pc, #428]	; (8000a80 <interpreta_gps+0x38c>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	71da      	strb	r2, [r3, #7]

	strcpy(longitud, lonDg);
 80008d6:	4969      	ldr	r1, [pc, #420]	; (8000a7c <interpreta_gps+0x388>)
 80008d8:	486a      	ldr	r0, [pc, #424]	; (8000a84 <interpreta_gps+0x390>)
 80008da:	f002 feb8 	bl	800364e <strcpy>
	strcat(longitud, " ");
 80008de:	4869      	ldr	r0, [pc, #420]	; (8000a84 <interpreta_gps+0x390>)
 80008e0:	f7ff fc34 	bl	800014c <strlen>
 80008e4:	4603      	mov	r3, r0
 80008e6:	461a      	mov	r2, r3
 80008e8:	4b66      	ldr	r3, [pc, #408]	; (8000a84 <interpreta_gps+0x390>)
 80008ea:	4413      	add	r3, r2
 80008ec:	495d      	ldr	r1, [pc, #372]	; (8000a64 <interpreta_gps+0x370>)
 80008ee:	461a      	mov	r2, r3
 80008f0:	460b      	mov	r3, r1
 80008f2:	881b      	ldrh	r3, [r3, #0]
 80008f4:	8013      	strh	r3, [r2, #0]
	strcat(longitud, lonMS);
 80008f6:	4962      	ldr	r1, [pc, #392]	; (8000a80 <interpreta_gps+0x38c>)
 80008f8:	4862      	ldr	r0, [pc, #392]	; (8000a84 <interpreta_gps+0x390>)
 80008fa:	f002 fe8c 	bl	8003616 <strcat>
	strcat(longitud, "\r\n");
 80008fe:	4861      	ldr	r0, [pc, #388]	; (8000a84 <interpreta_gps+0x390>)
 8000900:	f7ff fc24 	bl	800014c <strlen>
 8000904:	4603      	mov	r3, r0
 8000906:	461a      	mov	r2, r3
 8000908:	4b5e      	ldr	r3, [pc, #376]	; (8000a84 <interpreta_gps+0x390>)
 800090a:	4413      	add	r3, r2
 800090c:	4a56      	ldr	r2, [pc, #344]	; (8000a68 <interpreta_gps+0x374>)
 800090e:	8811      	ldrh	r1, [r2, #0]
 8000910:	7892      	ldrb	r2, [r2, #2]
 8000912:	8019      	strh	r1, [r3, #0]
 8000914:	709a      	strb	r2, [r3, #2]
	longitud[15] = '\0';
 8000916:	4b5b      	ldr	r3, [pc, #364]	; (8000a84 <interpreta_gps+0x390>)
 8000918:	2200      	movs	r2, #0
 800091a:	73da      	strb	r2, [r3, #15]

	strcpy(lon, &hemEW[0]);
 800091c:	4b4a      	ldr	r3, [pc, #296]	; (8000a48 <interpreta_gps+0x354>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4619      	mov	r1, r3
 8000922:	4859      	ldr	r0, [pc, #356]	; (8000a88 <interpreta_gps+0x394>)
 8000924:	f002 fe93 	bl	800364e <strcpy>
	strcat(lon, ": ");
 8000928:	4857      	ldr	r0, [pc, #348]	; (8000a88 <interpreta_gps+0x394>)
 800092a:	f7ff fc0f 	bl	800014c <strlen>
 800092e:	4603      	mov	r3, r0
 8000930:	461a      	mov	r2, r3
 8000932:	4b55      	ldr	r3, [pc, #340]	; (8000a88 <interpreta_gps+0x394>)
 8000934:	4413      	add	r3, r2
 8000936:	4a4f      	ldr	r2, [pc, #316]	; (8000a74 <interpreta_gps+0x380>)
 8000938:	8811      	ldrh	r1, [r2, #0]
 800093a:	7892      	ldrb	r2, [r2, #2]
 800093c:	8019      	strh	r1, [r3, #0]
 800093e:	709a      	strb	r2, [r3, #2]
	lon[3]='\0';
 8000940:	4b51      	ldr	r3, [pc, #324]	; (8000a88 <interpreta_gps+0x394>)
 8000942:	2200      	movs	r2, #0
 8000944:	70da      	strb	r2, [r3, #3]

	//converting the UTC time in the hh:mm:ss format
	memcpy(hH, &utcRaw[0], 2);
 8000946:	4b51      	ldr	r3, [pc, #324]	; (8000a8c <interpreta_gps+0x398>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	881b      	ldrh	r3, [r3, #0]
 800094c:	b29b      	uxth	r3, r3
 800094e:	4a50      	ldr	r2, [pc, #320]	; (8000a90 <interpreta_gps+0x39c>)
 8000950:	8013      	strh	r3, [r2, #0]
	hH[2] = '\0';
 8000952:	4b4f      	ldr	r3, [pc, #316]	; (8000a90 <interpreta_gps+0x39c>)
 8000954:	2200      	movs	r2, #0
 8000956:	709a      	strb	r2, [r3, #2]

	memcpy(mM, &utcRaw[2], 2);
 8000958:	4b4c      	ldr	r3, [pc, #304]	; (8000a8c <interpreta_gps+0x398>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	3302      	adds	r3, #2
 800095e:	881b      	ldrh	r3, [r3, #0]
 8000960:	b29b      	uxth	r3, r3
 8000962:	4a4c      	ldr	r2, [pc, #304]	; (8000a94 <interpreta_gps+0x3a0>)
 8000964:	8013      	strh	r3, [r2, #0]
	mM[2] = '\0';
 8000966:	4b4b      	ldr	r3, [pc, #300]	; (8000a94 <interpreta_gps+0x3a0>)
 8000968:	2200      	movs	r2, #0
 800096a:	709a      	strb	r2, [r3, #2]
	memcpy(sS, &utcRaw[4], 2);
 800096c:	4b47      	ldr	r3, [pc, #284]	; (8000a8c <interpreta_gps+0x398>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	3304      	adds	r3, #4
 8000972:	881b      	ldrh	r3, [r3, #0]
 8000974:	b29b      	uxth	r3, r3
 8000976:	4a48      	ldr	r2, [pc, #288]	; (8000a98 <interpreta_gps+0x3a4>)
 8000978:	8013      	strh	r3, [r2, #0]
	sS[2] = '\0';
 800097a:	4b47      	ldr	r3, [pc, #284]	; (8000a98 <interpreta_gps+0x3a4>)
 800097c:	2200      	movs	r2, #0
 800097e:	709a      	strb	r2, [r3, #2]

	strcpy(tiempo, hH);
 8000980:	4943      	ldr	r1, [pc, #268]	; (8000a90 <interpreta_gps+0x39c>)
 8000982:	4846      	ldr	r0, [pc, #280]	; (8000a9c <interpreta_gps+0x3a8>)
 8000984:	f002 fe63 	bl	800364e <strcpy>
	strcat(tiempo, ":");
 8000988:	4844      	ldr	r0, [pc, #272]	; (8000a9c <interpreta_gps+0x3a8>)
 800098a:	f7ff fbdf 	bl	800014c <strlen>
 800098e:	4603      	mov	r3, r0
 8000990:	461a      	mov	r2, r3
 8000992:	4b42      	ldr	r3, [pc, #264]	; (8000a9c <interpreta_gps+0x3a8>)
 8000994:	4413      	add	r3, r2
 8000996:	4942      	ldr	r1, [pc, #264]	; (8000aa0 <interpreta_gps+0x3ac>)
 8000998:	461a      	mov	r2, r3
 800099a:	460b      	mov	r3, r1
 800099c:	881b      	ldrh	r3, [r3, #0]
 800099e:	8013      	strh	r3, [r2, #0]
	strcat(tiempo, mM);
 80009a0:	493c      	ldr	r1, [pc, #240]	; (8000a94 <interpreta_gps+0x3a0>)
 80009a2:	483e      	ldr	r0, [pc, #248]	; (8000a9c <interpreta_gps+0x3a8>)
 80009a4:	f002 fe37 	bl	8003616 <strcat>
	strcat(tiempo, ":");
 80009a8:	483c      	ldr	r0, [pc, #240]	; (8000a9c <interpreta_gps+0x3a8>)
 80009aa:	f7ff fbcf 	bl	800014c <strlen>
 80009ae:	4603      	mov	r3, r0
 80009b0:	461a      	mov	r2, r3
 80009b2:	4b3a      	ldr	r3, [pc, #232]	; (8000a9c <interpreta_gps+0x3a8>)
 80009b4:	4413      	add	r3, r2
 80009b6:	493a      	ldr	r1, [pc, #232]	; (8000aa0 <interpreta_gps+0x3ac>)
 80009b8:	461a      	mov	r2, r3
 80009ba:	460b      	mov	r3, r1
 80009bc:	881b      	ldrh	r3, [r3, #0]
 80009be:	8013      	strh	r3, [r2, #0]
	strcat(tiempo, sS);
 80009c0:	4935      	ldr	r1, [pc, #212]	; (8000a98 <interpreta_gps+0x3a4>)
 80009c2:	4836      	ldr	r0, [pc, #216]	; (8000a9c <interpreta_gps+0x3a8>)
 80009c4:	f002 fe27 	bl	8003616 <strcat>
	strcat(tiempo, "\r\n");
 80009c8:	4834      	ldr	r0, [pc, #208]	; (8000a9c <interpreta_gps+0x3a8>)
 80009ca:	f7ff fbbf 	bl	800014c <strlen>
 80009ce:	4603      	mov	r3, r0
 80009d0:	461a      	mov	r2, r3
 80009d2:	4b32      	ldr	r3, [pc, #200]	; (8000a9c <interpreta_gps+0x3a8>)
 80009d4:	4413      	add	r3, r2
 80009d6:	4a24      	ldr	r2, [pc, #144]	; (8000a68 <interpreta_gps+0x374>)
 80009d8:	8811      	ldrh	r1, [r2, #0]
 80009da:	7892      	ldrb	r2, [r2, #2]
 80009dc:	8019      	strh	r1, [r3, #0]
 80009de:	709a      	strb	r2, [r3, #2]
	tiempo[12] = '\0';
 80009e0:	4b2e      	ldr	r3, [pc, #184]	; (8000a9c <interpreta_gps+0x3a8>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	731a      	strb	r2, [r3, #12]

	memccpy(memccpy(memccpy(memccpy(memccpy(memccpy(buffer, hora, '\0', MAX) - 1, tiempo, '\0', MAX)- 1, lat, '\0', MAX)- 1, latitud, '\0', MAX)- 1, lon, '\0', MAX)- 1, longitud, '\0', MAX);
 80009e6:	2364      	movs	r3, #100	; 0x64
 80009e8:	2200      	movs	r2, #0
 80009ea:	492e      	ldr	r1, [pc, #184]	; (8000aa4 <interpreta_gps+0x3b0>)
 80009ec:	482e      	ldr	r0, [pc, #184]	; (8000aa8 <interpreta_gps+0x3b4>)
 80009ee:	f002 fdfb 	bl	80035e8 <memccpy>
 80009f2:	4603      	mov	r3, r0
 80009f4:	1e58      	subs	r0, r3, #1
 80009f6:	2364      	movs	r3, #100	; 0x64
 80009f8:	2200      	movs	r2, #0
 80009fa:	4928      	ldr	r1, [pc, #160]	; (8000a9c <interpreta_gps+0x3a8>)
 80009fc:	f002 fdf4 	bl	80035e8 <memccpy>
 8000a00:	4603      	mov	r3, r0
 8000a02:	1e58      	subs	r0, r3, #1
 8000a04:	2364      	movs	r3, #100	; 0x64
 8000a06:	2200      	movs	r2, #0
 8000a08:	4919      	ldr	r1, [pc, #100]	; (8000a70 <interpreta_gps+0x37c>)
 8000a0a:	f002 fded 	bl	80035e8 <memccpy>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	1e58      	subs	r0, r3, #1
 8000a12:	2364      	movs	r3, #100	; 0x64
 8000a14:	2200      	movs	r2, #0
 8000a16:	4912      	ldr	r1, [pc, #72]	; (8000a60 <interpreta_gps+0x36c>)
 8000a18:	f002 fde6 	bl	80035e8 <memccpy>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	1e58      	subs	r0, r3, #1
 8000a20:	2364      	movs	r3, #100	; 0x64
 8000a22:	2200      	movs	r2, #0
 8000a24:	4918      	ldr	r1, [pc, #96]	; (8000a88 <interpreta_gps+0x394>)
 8000a26:	f002 fddf 	bl	80035e8 <memccpy>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	1e58      	subs	r0, r3, #1
 8000a2e:	2364      	movs	r3, #100	; 0x64
 8000a30:	2200      	movs	r2, #0
 8000a32:	4914      	ldr	r1, [pc, #80]	; (8000a84 <interpreta_gps+0x390>)
 8000a34:	f002 fdd8 	bl	80035e8 <memccpy>

	text_msn(buffer);
 8000a38:	481b      	ldr	r0, [pc, #108]	; (8000aa8 <interpreta_gps+0x3b4>)
 8000a3a:	f7ff fde5 	bl	8000608 <text_msn>
}
 8000a3e:	bf00      	nop
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	2000055c 	.word	0x2000055c
 8000a4c:	200003f5 	.word	0x200003f5
 8000a50:	08004868 	.word	0x08004868
 8000a54:	200004b4 	.word	0x200004b4
 8000a58:	20000544 	.word	0x20000544
 8000a5c:	20000634 	.word	0x20000634
 8000a60:	20000618 	.word	0x20000618
 8000a64:	0800486c 	.word	0x0800486c
 8000a68:	08004870 	.word	0x08004870
 8000a6c:	200006d0 	.word	0x200006d0
 8000a70:	200006e4 	.word	0x200006e4
 8000a74:	08004874 	.word	0x08004874
 8000a78:	20000630 	.word	0x20000630
 8000a7c:	2000046c 	.word	0x2000046c
 8000a80:	20000604 	.word	0x20000604
 8000a84:	20000548 	.word	0x20000548
 8000a88:	2000060c 	.word	0x2000060c
 8000a8c:	200004b8 	.word	0x200004b8
 8000a90:	2000063c 	.word	0x2000063c
 8000a94:	200006f4 	.word	0x200006f4
 8000a98:	200004b0 	.word	0x200004b0
 8000a9c:	200004bc 	.word	0x200004bc
 8000aa0:	08004878 	.word	0x08004878
 8000aa4:	2000031c 	.word	0x2000031c
 8000aa8:	200005a0 	.word	0x200005a0

08000aac <interpreta>:
void interpreta(void)
	  {
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
	uint16_t nuevot;
	nuevot=0;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	80fb      	strh	r3, [r7, #6]
	  	switch(dato_Rx[0])
 8000ab6:	4bb4      	ldr	r3, [pc, #720]	; (8000d88 <interpreta+0x2dc>)
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	3b41      	subs	r3, #65	; 0x41
 8000abc:	2b33      	cmp	r3, #51	; 0x33
 8000abe:	f200 8158 	bhi.w	8000d72 <interpreta+0x2c6>
 8000ac2:	a201      	add	r2, pc, #4	; (adr r2, 8000ac8 <interpreta+0x1c>)
 8000ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ac8:	08000c13 	.word	0x08000c13
 8000acc:	08000d73 	.word	0x08000d73
 8000ad0:	08000d73 	.word	0x08000d73
 8000ad4:	08000d73 	.word	0x08000d73
 8000ad8:	08000d73 	.word	0x08000d73
 8000adc:	08000d73 	.word	0x08000d73
 8000ae0:	08000b99 	.word	0x08000b99
 8000ae4:	08000c9b 	.word	0x08000c9b
 8000ae8:	08000d73 	.word	0x08000d73
 8000aec:	08000d73 	.word	0x08000d73
 8000af0:	08000d73 	.word	0x08000d73
 8000af4:	08000d73 	.word	0x08000d73
 8000af8:	08000d73 	.word	0x08000d73
 8000afc:	08000d73 	.word	0x08000d73
 8000b00:	08000d73 	.word	0x08000d73
 8000b04:	08000d73 	.word	0x08000d73
 8000b08:	08000d73 	.word	0x08000d73
 8000b0c:	08000d73 	.word	0x08000d73
 8000b10:	08000d73 	.word	0x08000d73
 8000b14:	08000bc5 	.word	0x08000bc5
 8000b18:	08000d73 	.word	0x08000d73
 8000b1c:	08000d73 	.word	0x08000d73
 8000b20:	08000d73 	.word	0x08000d73
 8000b24:	08000d73 	.word	0x08000d73
 8000b28:	08000d73 	.word	0x08000d73
 8000b2c:	08000d73 	.word	0x08000d73
 8000b30:	08000d73 	.word	0x08000d73
 8000b34:	08000d73 	.word	0x08000d73
 8000b38:	08000d73 	.word	0x08000d73
 8000b3c:	08000d73 	.word	0x08000d73
 8000b40:	08000d73 	.word	0x08000d73
 8000b44:	08000d73 	.word	0x08000d73
 8000b48:	08000c13 	.word	0x08000c13
 8000b4c:	08000d73 	.word	0x08000d73
 8000b50:	08000d73 	.word	0x08000d73
 8000b54:	08000d73 	.word	0x08000d73
 8000b58:	08000d73 	.word	0x08000d73
 8000b5c:	08000d73 	.word	0x08000d73
 8000b60:	08000b99 	.word	0x08000b99
 8000b64:	08000c9b 	.word	0x08000c9b
 8000b68:	08000d73 	.word	0x08000d73
 8000b6c:	08000d73 	.word	0x08000d73
 8000b70:	08000d73 	.word	0x08000d73
 8000b74:	08000d73 	.word	0x08000d73
 8000b78:	08000d73 	.word	0x08000d73
 8000b7c:	08000d73 	.word	0x08000d73
 8000b80:	08000d73 	.word	0x08000d73
 8000b84:	08000d73 	.word	0x08000d73
 8000b88:	08000d73 	.word	0x08000d73
 8000b8c:	08000d73 	.word	0x08000d73
 8000b90:	08000d73 	.word	0x08000d73
 8000b94:	08000bc5 	.word	0x08000bc5
	  		{
	  		case 'g':
	  		case 'G':  // :G trama delGPS
	  			if(strstr(dato_Rx, "ubicacion") || strstr(dato_Rx, "UBICACION") ){
 8000b98:	497c      	ldr	r1, [pc, #496]	; (8000d8c <interpreta+0x2e0>)
 8000b9a:	487b      	ldr	r0, [pc, #492]	; (8000d88 <interpreta+0x2dc>)
 8000b9c:	f002 fd7b 	bl	8003696 <strstr>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d106      	bne.n	8000bb4 <interpreta+0x108>
 8000ba6:	497a      	ldr	r1, [pc, #488]	; (8000d90 <interpreta+0x2e4>)
 8000ba8:	4877      	ldr	r0, [pc, #476]	; (8000d88 <interpreta+0x2dc>)
 8000baa:	f002 fd74 	bl	8003696 <strstr>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <interpreta+0x10c>
	  				interpreta_gps();
 8000bb4:	f7ff fd9e 	bl	80006f4 <interpreta_gps>
	  			}
	  			memset(dato_Rx, 0, SIZE_RX);
 8000bb8:	220f      	movs	r2, #15
 8000bba:	2100      	movs	r1, #0
 8000bbc:	4872      	ldr	r0, [pc, #456]	; (8000d88 <interpreta+0x2dc>)
 8000bbe:	f002 fd22 	bl	8003606 <memset>
	  			break;
 8000bc2:	e0dc      	b.n	8000d7e <interpreta+0x2d2>
	  		case 't':
	  		case 'T':
	  			nuevot=atoi(&dato_Rx[1]);
 8000bc4:	4873      	ldr	r0, [pc, #460]	; (8000d94 <interpreta+0x2e8>)
 8000bc6:	f002 fce1 	bl	800358c <atoi>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	80fb      	strh	r3, [r7, #6]
	  			if(nuevot == 500 || nuevot == 2000 || nuevot == 1000){
 8000bce:	88fb      	ldrh	r3, [r7, #6]
 8000bd0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000bd4:	d007      	beq.n	8000be6 <interpreta+0x13a>
 8000bd6:	88fb      	ldrh	r3, [r7, #6]
 8000bd8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000bdc:	d003      	beq.n	8000be6 <interpreta+0x13a>
 8000bde:	88fb      	ldrh	r3, [r7, #6]
 8000be0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000be4:	d104      	bne.n	8000bf0 <interpreta+0x144>
		  			 __HAL_TIM_SET_PRESCALER(&htim2,nuevot);
 8000be6:	4b6c      	ldr	r3, [pc, #432]	; (8000d98 <interpreta+0x2ec>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	88fa      	ldrh	r2, [r7, #6]
 8000bec:	629a      	str	r2, [r3, #40]	; 0x28
 8000bee:	e00a      	b.n	8000c06 <interpreta+0x15a>

	  			} else {
	  				HAL_UART_Transmit(&huart1, (uint8_t *)errortime, strlen(errortime), HAL_MAX_DELAY);
 8000bf0:	486a      	ldr	r0, [pc, #424]	; (8000d9c <interpreta+0x2f0>)
 8000bf2:	f7ff faab 	bl	800014c <strlen>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	b29a      	uxth	r2, r3
 8000bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8000bfe:	4967      	ldr	r1, [pc, #412]	; (8000d9c <interpreta+0x2f0>)
 8000c00:	4867      	ldr	r0, [pc, #412]	; (8000da0 <interpreta+0x2f4>)
 8000c02:	f002 f83c 	bl	8002c7e <HAL_UART_Transmit>
	  			}
	  			memset(dato_Rx, 0, SIZE_RX);
 8000c06:	220f      	movs	r2, #15
 8000c08:	2100      	movs	r1, #0
 8000c0a:	485f      	ldr	r0, [pc, #380]	; (8000d88 <interpreta+0x2dc>)
 8000c0c:	f002 fcfb 	bl	8003606 <memset>
	  			  break;
 8000c10:	e0b5      	b.n	8000d7e <interpreta+0x2d2>
	  		case 'a':
			case 'A':
				if(strstr(dato_Rx, "ON") || strstr(dato_Rx, "on") ){
 8000c12:	4964      	ldr	r1, [pc, #400]	; (8000da4 <interpreta+0x2f8>)
 8000c14:	485c      	ldr	r0, [pc, #368]	; (8000d88 <interpreta+0x2dc>)
 8000c16:	f002 fd3e 	bl	8003696 <strstr>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d106      	bne.n	8000c2e <interpreta+0x182>
 8000c20:	4961      	ldr	r1, [pc, #388]	; (8000da8 <interpreta+0x2fc>)
 8000c22:	4859      	ldr	r0, [pc, #356]	; (8000d88 <interpreta+0x2dc>)
 8000c24:	f002 fd37 	bl	8003696 <strstr>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d010      	beq.n	8000c50 <interpreta+0x1a4>
					HAL_TIM_Base_Start_IT(&htim2);
 8000c2e:	485a      	ldr	r0, [pc, #360]	; (8000d98 <interpreta+0x2ec>)
 8000c30:	f001 fc00 	bl	8002434 <HAL_TIM_Base_Start_IT>
					text_msn(aon);
 8000c34:	485d      	ldr	r0, [pc, #372]	; (8000dac <interpreta+0x300>)
 8000c36:	f7ff fce7 	bl	8000608 <text_msn>
					HAL_UART_Transmit(&huart1, (uint8_t *)aon, strlen(aon), HAL_MAX_DELAY);
 8000c3a:	485c      	ldr	r0, [pc, #368]	; (8000dac <interpreta+0x300>)
 8000c3c:	f7ff fa86 	bl	800014c <strlen>
 8000c40:	4603      	mov	r3, r0
 8000c42:	b29a      	uxth	r2, r3
 8000c44:	f04f 33ff 	mov.w	r3, #4294967295
 8000c48:	4958      	ldr	r1, [pc, #352]	; (8000dac <interpreta+0x300>)
 8000c4a:	4855      	ldr	r0, [pc, #340]	; (8000da0 <interpreta+0x2f4>)
 8000c4c:	f002 f817 	bl	8002c7e <HAL_UART_Transmit>
				  }
				if(strstr(dato_Rx, "OFF") || strstr(dato_Rx, "off") ){
 8000c50:	4957      	ldr	r1, [pc, #348]	; (8000db0 <interpreta+0x304>)
 8000c52:	484d      	ldr	r0, [pc, #308]	; (8000d88 <interpreta+0x2dc>)
 8000c54:	f002 fd1f 	bl	8003696 <strstr>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d106      	bne.n	8000c6c <interpreta+0x1c0>
 8000c5e:	4955      	ldr	r1, [pc, #340]	; (8000db4 <interpreta+0x308>)
 8000c60:	4849      	ldr	r0, [pc, #292]	; (8000d88 <interpreta+0x2dc>)
 8000c62:	f002 fd18 	bl	8003696 <strstr>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d010      	beq.n	8000c8e <interpreta+0x1e2>
					HAL_TIM_Base_Stop_IT(&htim2);
 8000c6c:	484a      	ldr	r0, [pc, #296]	; (8000d98 <interpreta+0x2ec>)
 8000c6e:	f001 fc33 	bl	80024d8 <HAL_TIM_Base_Stop_IT>
					HAL_UART_Transmit(&huart1, (uint8_t *)aoff, strlen(aoff), HAL_MAX_DELAY);
 8000c72:	4851      	ldr	r0, [pc, #324]	; (8000db8 <interpreta+0x30c>)
 8000c74:	f7ff fa6a 	bl	800014c <strlen>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	b29a      	uxth	r2, r3
 8000c7c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c80:	494d      	ldr	r1, [pc, #308]	; (8000db8 <interpreta+0x30c>)
 8000c82:	4847      	ldr	r0, [pc, #284]	; (8000da0 <interpreta+0x2f4>)
 8000c84:	f001 fffb 	bl	8002c7e <HAL_UART_Transmit>
					text_msn(aoff);
 8000c88:	484b      	ldr	r0, [pc, #300]	; (8000db8 <interpreta+0x30c>)
 8000c8a:	f7ff fcbd 	bl	8000608 <text_msn>
				  }
				memset(dato_Rx, 0, SIZE_RX);
 8000c8e:	220f      	movs	r2, #15
 8000c90:	2100      	movs	r1, #0
 8000c92:	483d      	ldr	r0, [pc, #244]	; (8000d88 <interpreta+0x2dc>)
 8000c94:	f002 fcb7 	bl	8003606 <memset>
				  break;
 8000c98:	e071      	b.n	8000d7e <interpreta+0x2d2>
	  		case 'h':
	  		case 'H':
	  			if(strstr(dato_Rx,"Gubicacion") || strstr(dato_Rx, "GUBICACION") || strstr(dato_Rx,"gubicacion") || strstr(dato_Rx, "gUBICACION")){
 8000c9a:	4948      	ldr	r1, [pc, #288]	; (8000dbc <interpreta+0x310>)
 8000c9c:	483a      	ldr	r0, [pc, #232]	; (8000d88 <interpreta+0x2dc>)
 8000c9e:	f002 fcfa 	bl	8003696 <strstr>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d114      	bne.n	8000cd2 <interpreta+0x226>
 8000ca8:	4945      	ldr	r1, [pc, #276]	; (8000dc0 <interpreta+0x314>)
 8000caa:	4837      	ldr	r0, [pc, #220]	; (8000d88 <interpreta+0x2dc>)
 8000cac:	f002 fcf3 	bl	8003696 <strstr>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d10d      	bne.n	8000cd2 <interpreta+0x226>
 8000cb6:	4943      	ldr	r1, [pc, #268]	; (8000dc4 <interpreta+0x318>)
 8000cb8:	4833      	ldr	r0, [pc, #204]	; (8000d88 <interpreta+0x2dc>)
 8000cba:	f002 fcec 	bl	8003696 <strstr>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d106      	bne.n	8000cd2 <interpreta+0x226>
 8000cc4:	4940      	ldr	r1, [pc, #256]	; (8000dc8 <interpreta+0x31c>)
 8000cc6:	4830      	ldr	r0, [pc, #192]	; (8000d88 <interpreta+0x2dc>)
 8000cc8:	f002 fce5 	bl	8003696 <strstr>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d00a      	beq.n	8000ce8 <interpreta+0x23c>
	  				HAL_UART_Transmit(&huart1, (uint8_t *)helpg, strlen(helpt), HAL_MAX_DELAY);
 8000cd2:	483e      	ldr	r0, [pc, #248]	; (8000dcc <interpreta+0x320>)
 8000cd4:	f7ff fa3a 	bl	800014c <strlen>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	b29a      	uxth	r2, r3
 8000cdc:	f04f 33ff 	mov.w	r3, #4294967295
 8000ce0:	493b      	ldr	r1, [pc, #236]	; (8000dd0 <interpreta+0x324>)
 8000ce2:	482f      	ldr	r0, [pc, #188]	; (8000da0 <interpreta+0x2f4>)
 8000ce4:	f001 ffcb 	bl	8002c7e <HAL_UART_Transmit>
	  			}
	  			if(strstr(dato_Rx,"T") || strstr(dato_Rx, "t")){
 8000ce8:	2154      	movs	r1, #84	; 0x54
 8000cea:	4827      	ldr	r0, [pc, #156]	; (8000d88 <interpreta+0x2dc>)
 8000cec:	f002 fca2 	bl	8003634 <strchr>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d106      	bne.n	8000d04 <interpreta+0x258>
 8000cf6:	2174      	movs	r1, #116	; 0x74
 8000cf8:	4823      	ldr	r0, [pc, #140]	; (8000d88 <interpreta+0x2dc>)
 8000cfa:	f002 fc9b 	bl	8003634 <strchr>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d00a      	beq.n	8000d1a <interpreta+0x26e>
	  				HAL_UART_Transmit(&huart1, (uint8_t *)helpt, strlen(helpt), HAL_MAX_DELAY);
 8000d04:	4831      	ldr	r0, [pc, #196]	; (8000dcc <interpreta+0x320>)
 8000d06:	f7ff fa21 	bl	800014c <strlen>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	b29a      	uxth	r2, r3
 8000d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d12:	492e      	ldr	r1, [pc, #184]	; (8000dcc <interpreta+0x320>)
 8000d14:	4822      	ldr	r0, [pc, #136]	; (8000da0 <interpreta+0x2f4>)
 8000d16:	f001 ffb2 	bl	8002c7e <HAL_UART_Transmit>
	  			}
	  			if(strstr(dato_Rx,"AON") || strstr(dato_Rx, "aon") || strstr(dato_Rx,"AOFF") || strstr(dato_Rx, "aoff")){
 8000d1a:	492e      	ldr	r1, [pc, #184]	; (8000dd4 <interpreta+0x328>)
 8000d1c:	481a      	ldr	r0, [pc, #104]	; (8000d88 <interpreta+0x2dc>)
 8000d1e:	f002 fcba 	bl	8003696 <strstr>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d114      	bne.n	8000d52 <interpreta+0x2a6>
 8000d28:	492b      	ldr	r1, [pc, #172]	; (8000dd8 <interpreta+0x32c>)
 8000d2a:	4817      	ldr	r0, [pc, #92]	; (8000d88 <interpreta+0x2dc>)
 8000d2c:	f002 fcb3 	bl	8003696 <strstr>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d10d      	bne.n	8000d52 <interpreta+0x2a6>
 8000d36:	4929      	ldr	r1, [pc, #164]	; (8000ddc <interpreta+0x330>)
 8000d38:	4813      	ldr	r0, [pc, #76]	; (8000d88 <interpreta+0x2dc>)
 8000d3a:	f002 fcac 	bl	8003696 <strstr>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d106      	bne.n	8000d52 <interpreta+0x2a6>
 8000d44:	4926      	ldr	r1, [pc, #152]	; (8000de0 <interpreta+0x334>)
 8000d46:	4810      	ldr	r0, [pc, #64]	; (8000d88 <interpreta+0x2dc>)
 8000d48:	f002 fca5 	bl	8003696 <strstr>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d00a      	beq.n	8000d68 <interpreta+0x2bc>
	  				HAL_UART_Transmit(&huart1, (uint8_t *)helpa, strlen(helpa), HAL_MAX_DELAY);
 8000d52:	4824      	ldr	r0, [pc, #144]	; (8000de4 <interpreta+0x338>)
 8000d54:	f7ff f9fa 	bl	800014c <strlen>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	b29a      	uxth	r2, r3
 8000d5c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d60:	4920      	ldr	r1, [pc, #128]	; (8000de4 <interpreta+0x338>)
 8000d62:	480f      	ldr	r0, [pc, #60]	; (8000da0 <interpreta+0x2f4>)
 8000d64:	f001 ff8b 	bl	8002c7e <HAL_UART_Transmit>
	  			}
	  			memset(dato_Rx, 0, SIZE_RX);
 8000d68:	220f      	movs	r2, #15
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	4806      	ldr	r0, [pc, #24]	; (8000d88 <interpreta+0x2dc>)
 8000d6e:	f002 fc4a 	bl	8003606 <memset>
	  		default:
	  			memset(dato_Rx, 0, SIZE_RX);
 8000d72:	220f      	movs	r2, #15
 8000d74:	2100      	movs	r1, #0
 8000d76:	4804      	ldr	r0, [pc, #16]	; (8000d88 <interpreta+0x2dc>)
 8000d78:	f002 fc45 	bl	8003606 <memset>
	  			break;
 8000d7c:	bf00      	nop
	  		}
	  }
 8000d7e:	bf00      	nop
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	200006d4 	.word	0x200006d4
 8000d8c:	0800487c 	.word	0x0800487c
 8000d90:	08004888 	.word	0x08004888
 8000d94:	200006d5 	.word	0x200006d5
 8000d98:	20000648 	.word	0x20000648
 8000d9c:	20000000 	.word	0x20000000
 8000da0:	20000560 	.word	0x20000560
 8000da4:	08004894 	.word	0x08004894
 8000da8:	08004898 	.word	0x08004898
 8000dac:	20000190 	.word	0x20000190
 8000db0:	0800489c 	.word	0x0800489c
 8000db4:	080048a0 	.word	0x080048a0
 8000db8:	200001a4 	.word	0x200001a4
 8000dbc:	080048a4 	.word	0x080048a4
 8000dc0:	080048b0 	.word	0x080048b0
 8000dc4:	080048bc 	.word	0x080048bc
 8000dc8:	080048c8 	.word	0x080048c8
 8000dcc:	200000c8 	.word	0x200000c8
 8000dd0:	20000064 	.word	0x20000064
 8000dd4:	080048d4 	.word	0x080048d4
 8000dd8:	080048d8 	.word	0x080048d8
 8000ddc:	080048dc 	.word	0x080048dc
 8000de0:	080048e4 	.word	0x080048e4
 8000de4:	2000012c 	.word	0x2000012c

08000de8 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2){
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a2e      	ldr	r2, [pc, #184]	; (8000eb0 <HAL_UART_RxCpltCallback+0xc8>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d10b      	bne.n	8000e12 <HAL_UART_RxCpltCallback+0x2a>
			HAL_UART_Transmit(&huart1, da, 1, HAL_MAX_DELAY);
 8000dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8000dfe:	2201      	movs	r2, #1
 8000e00:	492c      	ldr	r1, [pc, #176]	; (8000eb4 <HAL_UART_RxCpltCallback+0xcc>)
 8000e02:	482d      	ldr	r0, [pc, #180]	; (8000eb8 <HAL_UART_RxCpltCallback+0xd0>)
 8000e04:	f001 ff3b 	bl	8002c7e <HAL_UART_Transmit>
			HAL_UART_Receive_IT(&huart2, da, 1);
 8000e08:	2201      	movs	r2, #1
 8000e0a:	492a      	ldr	r1, [pc, #168]	; (8000eb4 <HAL_UART_RxCpltCallback+0xcc>)
 8000e0c:	482b      	ldr	r0, [pc, #172]	; (8000ebc <HAL_UART_RxCpltCallback+0xd4>)
 8000e0e:	f002 f867 	bl	8002ee0 <HAL_UART_Receive_IT>
		}

	if(huart->Instance == USART1)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a2a      	ldr	r2, [pc, #168]	; (8000ec0 <HAL_UART_RxCpltCallback+0xd8>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d145      	bne.n	8000ea8 <HAL_UART_RxCpltCallback+0xc0>
	{
		uint8_t dato = cadena[0];
 8000e1c:	4b29      	ldr	r3, [pc, #164]	; (8000ec4 <HAL_UART_RxCpltCallback+0xdc>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	73fb      	strb	r3, [r7, #15]
		if(indice>= SIZE_RX) indice = 0;
 8000e22:	4b29      	ldr	r3, [pc, #164]	; (8000ec8 <HAL_UART_RxCpltCallback+0xe0>)
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	2b0e      	cmp	r3, #14
 8000e2a:	d902      	bls.n	8000e32 <HAL_UART_RxCpltCallback+0x4a>
 8000e2c:	4b26      	ldr	r3, [pc, #152]	; (8000ec8 <HAL_UART_RxCpltCallback+0xe0>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	701a      	strb	r2, [r3, #0]
		switch(dato)
 8000e32:	7bfb      	ldrb	r3, [r7, #15]
 8000e34:	2b3b      	cmp	r3, #59	; 0x3b
 8000e36:	d00e      	beq.n	8000e56 <HAL_UART_RxCpltCallback+0x6e>
 8000e38:	2b3b      	cmp	r3, #59	; 0x3b
 8000e3a:	dc23      	bgt.n	8000e84 <HAL_UART_RxCpltCallback+0x9c>
 8000e3c:	2b3a      	cmp	r3, #58	; 0x3a
 8000e3e:	d006      	beq.n	8000e4e <HAL_UART_RxCpltCallback+0x66>
 8000e40:	2b3a      	cmp	r3, #58	; 0x3a
 8000e42:	dc1f      	bgt.n	8000e84 <HAL_UART_RxCpltCallback+0x9c>
 8000e44:	2b08      	cmp	r3, #8
 8000e46:	d010      	beq.n	8000e6a <HAL_UART_RxCpltCallback+0x82>
 8000e48:	2b0d      	cmp	r3, #13
 8000e4a:	d004      	beq.n	8000e56 <HAL_UART_RxCpltCallback+0x6e>
 8000e4c:	e01a      	b.n	8000e84 <HAL_UART_RxCpltCallback+0x9c>
			{
			case ':': indice=0;
 8000e4e:	4b1e      	ldr	r3, [pc, #120]	; (8000ec8 <HAL_UART_RxCpltCallback+0xe0>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	701a      	strb	r2, [r3, #0]
					break;
 8000e54:	e023      	b.n	8000e9e <HAL_UART_RxCpltCallback+0xb6>
			case '\r':
			case ';':		// el case \r hace lo mismo que el case ;
					dato_Rx[indice]=0;
 8000e56:	4b1c      	ldr	r3, [pc, #112]	; (8000ec8 <HAL_UART_RxCpltCallback+0xe0>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	4b1b      	ldr	r3, [pc, #108]	; (8000ecc <HAL_UART_RxCpltCallback+0xe4>)
 8000e60:	2100      	movs	r1, #0
 8000e62:	5499      	strb	r1, [r3, r2]
					interpreta();
 8000e64:	f7ff fe22 	bl	8000aac <interpreta>
					break;
 8000e68:	e019      	b.n	8000e9e <HAL_UART_RxCpltCallback+0xb6>
			case 8: 	// 'borrar' en codigo ansi
					if (indice) indice--;
 8000e6a:	4b17      	ldr	r3, [pc, #92]	; (8000ec8 <HAL_UART_RxCpltCallback+0xe0>)
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d013      	beq.n	8000e9c <HAL_UART_RxCpltCallback+0xb4>
 8000e74:	4b14      	ldr	r3, [pc, #80]	; (8000ec8 <HAL_UART_RxCpltCallback+0xe0>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	3b01      	subs	r3, #1
 8000e7c:	b2da      	uxtb	r2, r3
 8000e7e:	4b12      	ldr	r3, [pc, #72]	; (8000ec8 <HAL_UART_RxCpltCallback+0xe0>)
 8000e80:	701a      	strb	r2, [r3, #0]
					break;
 8000e82:	e00b      	b.n	8000e9c <HAL_UART_RxCpltCallback+0xb4>
			default:
					dato_Rx[indice++] = dato;
 8000e84:	4b10      	ldr	r3, [pc, #64]	; (8000ec8 <HAL_UART_RxCpltCallback+0xe0>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	1c5a      	adds	r2, r3, #1
 8000e8c:	b2d1      	uxtb	r1, r2
 8000e8e:	4a0e      	ldr	r2, [pc, #56]	; (8000ec8 <HAL_UART_RxCpltCallback+0xe0>)
 8000e90:	7011      	strb	r1, [r2, #0]
 8000e92:	4619      	mov	r1, r3
 8000e94:	4a0d      	ldr	r2, [pc, #52]	; (8000ecc <HAL_UART_RxCpltCallback+0xe4>)
 8000e96:	7bfb      	ldrb	r3, [r7, #15]
 8000e98:	5453      	strb	r3, [r2, r1]
					break;
 8000e9a:	e000      	b.n	8000e9e <HAL_UART_RxCpltCallback+0xb6>
					break;
 8000e9c:	bf00      	nop

			}
		HAL_UART_Receive_IT(&huart1, cadena, 1);
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	4908      	ldr	r1, [pc, #32]	; (8000ec4 <HAL_UART_RxCpltCallback+0xdc>)
 8000ea2:	4805      	ldr	r0, [pc, #20]	; (8000eb8 <HAL_UART_RxCpltCallback+0xd0>)
 8000ea4:	f002 f81c 	bl	8002ee0 <HAL_UART_Receive_IT>
	}
}
 8000ea8:	bf00      	nop
 8000eaa:	3710      	adds	r7, #16
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	40004400 	.word	0x40004400
 8000eb4:	200003f8 	.word	0x200003f8
 8000eb8:	20000560 	.word	0x20000560
 8000ebc:	20000690 	.word	0x20000690
 8000ec0:	40013800 	.word	0x40013800
 8000ec4:	200006f0 	.word	0x200006f0
 8000ec8:	200003f4 	.word	0x200003f4
 8000ecc:	200006d4 	.word	0x200006d4

08000ed0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
		interpreta_gps();
 8000ed8:	f7ff fc0c 	bl	80006f4 <interpreta_gps>
}
 8000edc:	bf00      	nop
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ee8:	b672      	cpsid	i
}
 8000eea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eec:	e7fe      	b.n	8000eec <Error_Handler+0x8>
	...

08000ef0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b085      	sub	sp, #20
 8000ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ef6:	4b15      	ldr	r3, [pc, #84]	; (8000f4c <HAL_MspInit+0x5c>)
 8000ef8:	699b      	ldr	r3, [r3, #24]
 8000efa:	4a14      	ldr	r2, [pc, #80]	; (8000f4c <HAL_MspInit+0x5c>)
 8000efc:	f043 0301 	orr.w	r3, r3, #1
 8000f00:	6193      	str	r3, [r2, #24]
 8000f02:	4b12      	ldr	r3, [pc, #72]	; (8000f4c <HAL_MspInit+0x5c>)
 8000f04:	699b      	ldr	r3, [r3, #24]
 8000f06:	f003 0301 	and.w	r3, r3, #1
 8000f0a:	60bb      	str	r3, [r7, #8]
 8000f0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f0e:	4b0f      	ldr	r3, [pc, #60]	; (8000f4c <HAL_MspInit+0x5c>)
 8000f10:	69db      	ldr	r3, [r3, #28]
 8000f12:	4a0e      	ldr	r2, [pc, #56]	; (8000f4c <HAL_MspInit+0x5c>)
 8000f14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f18:	61d3      	str	r3, [r2, #28]
 8000f1a:	4b0c      	ldr	r3, [pc, #48]	; (8000f4c <HAL_MspInit+0x5c>)
 8000f1c:	69db      	ldr	r3, [r3, #28]
 8000f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f22:	607b      	str	r3, [r7, #4]
 8000f24:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f26:	4b0a      	ldr	r3, [pc, #40]	; (8000f50 <HAL_MspInit+0x60>)
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	4a04      	ldr	r2, [pc, #16]	; (8000f50 <HAL_MspInit+0x60>)
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f42:	bf00      	nop
 8000f44:	3714      	adds	r7, #20
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bc80      	pop	{r7}
 8000f4a:	4770      	bx	lr
 8000f4c:	40021000 	.word	0x40021000
 8000f50:	40010000 	.word	0x40010000

08000f54 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f64:	d113      	bne.n	8000f8e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f66:	4b0c      	ldr	r3, [pc, #48]	; (8000f98 <HAL_TIM_Base_MspInit+0x44>)
 8000f68:	69db      	ldr	r3, [r3, #28]
 8000f6a:	4a0b      	ldr	r2, [pc, #44]	; (8000f98 <HAL_TIM_Base_MspInit+0x44>)
 8000f6c:	f043 0301 	orr.w	r3, r3, #1
 8000f70:	61d3      	str	r3, [r2, #28]
 8000f72:	4b09      	ldr	r3, [pc, #36]	; (8000f98 <HAL_TIM_Base_MspInit+0x44>)
 8000f74:	69db      	ldr	r3, [r3, #28]
 8000f76:	f003 0301 	and.w	r3, r3, #1
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	2100      	movs	r1, #0
 8000f82:	201c      	movs	r0, #28
 8000f84:	f000 fb81 	bl	800168a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f88:	201c      	movs	r0, #28
 8000f8a:	f000 fb9a 	bl	80016c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f8e:	bf00      	nop
 8000f90:	3710      	adds	r7, #16
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40021000 	.word	0x40021000

08000f9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b08c      	sub	sp, #48	; 0x30
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa4:	f107 0320 	add.w	r3, r7, #32
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a5f      	ldr	r2, [pc, #380]	; (8001134 <HAL_UART_MspInit+0x198>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d13a      	bne.n	8001032 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fbc:	4b5e      	ldr	r3, [pc, #376]	; (8001138 <HAL_UART_MspInit+0x19c>)
 8000fbe:	699b      	ldr	r3, [r3, #24]
 8000fc0:	4a5d      	ldr	r2, [pc, #372]	; (8001138 <HAL_UART_MspInit+0x19c>)
 8000fc2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fc6:	6193      	str	r3, [r2, #24]
 8000fc8:	4b5b      	ldr	r3, [pc, #364]	; (8001138 <HAL_UART_MspInit+0x19c>)
 8000fca:	699b      	ldr	r3, [r3, #24]
 8000fcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fd0:	61fb      	str	r3, [r7, #28]
 8000fd2:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd4:	4b58      	ldr	r3, [pc, #352]	; (8001138 <HAL_UART_MspInit+0x19c>)
 8000fd6:	699b      	ldr	r3, [r3, #24]
 8000fd8:	4a57      	ldr	r2, [pc, #348]	; (8001138 <HAL_UART_MspInit+0x19c>)
 8000fda:	f043 0304 	orr.w	r3, r3, #4
 8000fde:	6193      	str	r3, [r2, #24]
 8000fe0:	4b55      	ldr	r3, [pc, #340]	; (8001138 <HAL_UART_MspInit+0x19c>)
 8000fe2:	699b      	ldr	r3, [r3, #24]
 8000fe4:	f003 0304 	and.w	r3, r3, #4
 8000fe8:	61bb      	str	r3, [r7, #24]
 8000fea:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000fec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ff0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffa:	f107 0320 	add.w	r3, r7, #32
 8000ffe:	4619      	mov	r1, r3
 8001000:	484e      	ldr	r0, [pc, #312]	; (800113c <HAL_UART_MspInit+0x1a0>)
 8001002:	f000 fbef 	bl	80017e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001006:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800100a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800100c:	2300      	movs	r3, #0
 800100e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001010:	2300      	movs	r3, #0
 8001012:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001014:	f107 0320 	add.w	r3, r7, #32
 8001018:	4619      	mov	r1, r3
 800101a:	4848      	ldr	r0, [pc, #288]	; (800113c <HAL_UART_MspInit+0x1a0>)
 800101c:	f000 fbe2 	bl	80017e4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001020:	2200      	movs	r2, #0
 8001022:	2100      	movs	r1, #0
 8001024:	2025      	movs	r0, #37	; 0x25
 8001026:	f000 fb30 	bl	800168a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800102a:	2025      	movs	r0, #37	; 0x25
 800102c:	f000 fb49 	bl	80016c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001030:	e07c      	b.n	800112c <HAL_UART_MspInit+0x190>
  else if(huart->Instance==USART2)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a42      	ldr	r2, [pc, #264]	; (8001140 <HAL_UART_MspInit+0x1a4>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d138      	bne.n	80010ae <HAL_UART_MspInit+0x112>
    __HAL_RCC_USART2_CLK_ENABLE();
 800103c:	4b3e      	ldr	r3, [pc, #248]	; (8001138 <HAL_UART_MspInit+0x19c>)
 800103e:	69db      	ldr	r3, [r3, #28]
 8001040:	4a3d      	ldr	r2, [pc, #244]	; (8001138 <HAL_UART_MspInit+0x19c>)
 8001042:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001046:	61d3      	str	r3, [r2, #28]
 8001048:	4b3b      	ldr	r3, [pc, #236]	; (8001138 <HAL_UART_MspInit+0x19c>)
 800104a:	69db      	ldr	r3, [r3, #28]
 800104c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001050:	617b      	str	r3, [r7, #20]
 8001052:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001054:	4b38      	ldr	r3, [pc, #224]	; (8001138 <HAL_UART_MspInit+0x19c>)
 8001056:	699b      	ldr	r3, [r3, #24]
 8001058:	4a37      	ldr	r2, [pc, #220]	; (8001138 <HAL_UART_MspInit+0x19c>)
 800105a:	f043 0304 	orr.w	r3, r3, #4
 800105e:	6193      	str	r3, [r2, #24]
 8001060:	4b35      	ldr	r3, [pc, #212]	; (8001138 <HAL_UART_MspInit+0x19c>)
 8001062:	699b      	ldr	r3, [r3, #24]
 8001064:	f003 0304 	and.w	r3, r3, #4
 8001068:	613b      	str	r3, [r7, #16]
 800106a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800106c:	2304      	movs	r3, #4
 800106e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001070:	2302      	movs	r3, #2
 8001072:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001074:	2303      	movs	r3, #3
 8001076:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001078:	f107 0320 	add.w	r3, r7, #32
 800107c:	4619      	mov	r1, r3
 800107e:	482f      	ldr	r0, [pc, #188]	; (800113c <HAL_UART_MspInit+0x1a0>)
 8001080:	f000 fbb0 	bl	80017e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001084:	2308      	movs	r3, #8
 8001086:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001088:	2300      	movs	r3, #0
 800108a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108c:	2300      	movs	r3, #0
 800108e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001090:	f107 0320 	add.w	r3, r7, #32
 8001094:	4619      	mov	r1, r3
 8001096:	4829      	ldr	r0, [pc, #164]	; (800113c <HAL_UART_MspInit+0x1a0>)
 8001098:	f000 fba4 	bl	80017e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800109c:	2200      	movs	r2, #0
 800109e:	2100      	movs	r1, #0
 80010a0:	2026      	movs	r0, #38	; 0x26
 80010a2:	f000 faf2 	bl	800168a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80010a6:	2026      	movs	r0, #38	; 0x26
 80010a8:	f000 fb0b 	bl	80016c2 <HAL_NVIC_EnableIRQ>
}
 80010ac:	e03e      	b.n	800112c <HAL_UART_MspInit+0x190>
  else if(huart->Instance==USART3)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a24      	ldr	r2, [pc, #144]	; (8001144 <HAL_UART_MspInit+0x1a8>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d139      	bne.n	800112c <HAL_UART_MspInit+0x190>
    __HAL_RCC_USART3_CLK_ENABLE();
 80010b8:	4b1f      	ldr	r3, [pc, #124]	; (8001138 <HAL_UART_MspInit+0x19c>)
 80010ba:	69db      	ldr	r3, [r3, #28]
 80010bc:	4a1e      	ldr	r2, [pc, #120]	; (8001138 <HAL_UART_MspInit+0x19c>)
 80010be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010c2:	61d3      	str	r3, [r2, #28]
 80010c4:	4b1c      	ldr	r3, [pc, #112]	; (8001138 <HAL_UART_MspInit+0x19c>)
 80010c6:	69db      	ldr	r3, [r3, #28]
 80010c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010cc:	60fb      	str	r3, [r7, #12]
 80010ce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d0:	4b19      	ldr	r3, [pc, #100]	; (8001138 <HAL_UART_MspInit+0x19c>)
 80010d2:	699b      	ldr	r3, [r3, #24]
 80010d4:	4a18      	ldr	r2, [pc, #96]	; (8001138 <HAL_UART_MspInit+0x19c>)
 80010d6:	f043 0308 	orr.w	r3, r3, #8
 80010da:	6193      	str	r3, [r2, #24]
 80010dc:	4b16      	ldr	r3, [pc, #88]	; (8001138 <HAL_UART_MspInit+0x19c>)
 80010de:	699b      	ldr	r3, [r3, #24]
 80010e0:	f003 0308 	and.w	r3, r3, #8
 80010e4:	60bb      	str	r3, [r7, #8]
 80010e6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80010e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ee:	2302      	movs	r3, #2
 80010f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010f2:	2303      	movs	r3, #3
 80010f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f6:	f107 0320 	add.w	r3, r7, #32
 80010fa:	4619      	mov	r1, r3
 80010fc:	4812      	ldr	r0, [pc, #72]	; (8001148 <HAL_UART_MspInit+0x1ac>)
 80010fe:	f000 fb71 	bl	80017e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001102:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001106:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001108:	2300      	movs	r3, #0
 800110a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	2300      	movs	r3, #0
 800110e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001110:	f107 0320 	add.w	r3, r7, #32
 8001114:	4619      	mov	r1, r3
 8001116:	480c      	ldr	r0, [pc, #48]	; (8001148 <HAL_UART_MspInit+0x1ac>)
 8001118:	f000 fb64 	bl	80017e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800111c:	2200      	movs	r2, #0
 800111e:	2100      	movs	r1, #0
 8001120:	2027      	movs	r0, #39	; 0x27
 8001122:	f000 fab2 	bl	800168a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001126:	2027      	movs	r0, #39	; 0x27
 8001128:	f000 facb 	bl	80016c2 <HAL_NVIC_EnableIRQ>
}
 800112c:	bf00      	nop
 800112e:	3730      	adds	r7, #48	; 0x30
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	40013800 	.word	0x40013800
 8001138:	40021000 	.word	0x40021000
 800113c:	40010800 	.word	0x40010800
 8001140:	40004400 	.word	0x40004400
 8001144:	40004800 	.word	0x40004800
 8001148:	40010c00 	.word	0x40010c00

0800114c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001150:	e7fe      	b.n	8001150 <NMI_Handler+0x4>

08001152 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001152:	b480      	push	{r7}
 8001154:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001156:	e7fe      	b.n	8001156 <HardFault_Handler+0x4>

08001158 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800115c:	e7fe      	b.n	800115c <MemManage_Handler+0x4>

0800115e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800115e:	b480      	push	{r7}
 8001160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001162:	e7fe      	b.n	8001162 <BusFault_Handler+0x4>

08001164 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001168:	e7fe      	b.n	8001168 <UsageFault_Handler+0x4>

0800116a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800116a:	b480      	push	{r7}
 800116c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800116e:	bf00      	nop
 8001170:	46bd      	mov	sp, r7
 8001172:	bc80      	pop	{r7}
 8001174:	4770      	bx	lr

08001176 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001176:	b480      	push	{r7}
 8001178:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800117a:	bf00      	nop
 800117c:	46bd      	mov	sp, r7
 800117e:	bc80      	pop	{r7}
 8001180:	4770      	bx	lr

08001182 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001182:	b480      	push	{r7}
 8001184:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001186:	bf00      	nop
 8001188:	46bd      	mov	sp, r7
 800118a:	bc80      	pop	{r7}
 800118c:	4770      	bx	lr

0800118e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800118e:	b580      	push	{r7, lr}
 8001190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001192:	f000 f963 	bl	800145c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001196:	bf00      	nop
 8001198:	bd80      	pop	{r7, pc}

0800119a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800119e:	2001      	movs	r0, #1
 80011a0:	f000 fcbc 	bl	8001b1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80011a4:	bf00      	nop
 80011a6:	bd80      	pop	{r7, pc}

080011a8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80011ac:	4802      	ldr	r0, [pc, #8]	; (80011b8 <TIM2_IRQHandler+0x10>)
 80011ae:	f001 f9c1 	bl	8002534 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20000648 	.word	0x20000648

080011bc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80011c0:	4802      	ldr	r0, [pc, #8]	; (80011cc <USART1_IRQHandler+0x10>)
 80011c2:	f001 fee1 	bl	8002f88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20000560 	.word	0x20000560

080011d0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80011d4:	4802      	ldr	r0, [pc, #8]	; (80011e0 <USART2_IRQHandler+0x10>)
 80011d6:	f001 fed7 	bl	8002f88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	20000690 	.word	0x20000690

080011e4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80011e8:	4802      	ldr	r0, [pc, #8]	; (80011f4 <USART3_IRQHandler+0x10>)
 80011ea:	f001 fecd 	bl	8002f88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	20000470 	.word	0x20000470

080011f8 <_getpid>:
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	2301      	movs	r3, #1
 80011fe:	4618      	mov	r0, r3
 8001200:	46bd      	mov	sp, r7
 8001202:	bc80      	pop	{r7}
 8001204:	4770      	bx	lr

08001206 <_kill>:
 8001206:	b580      	push	{r7, lr}
 8001208:	b082      	sub	sp, #8
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
 800120e:	6039      	str	r1, [r7, #0]
 8001210:	f002 f9c0 	bl	8003594 <__errno>
 8001214:	4603      	mov	r3, r0
 8001216:	2216      	movs	r2, #22
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	f04f 33ff 	mov.w	r3, #4294967295
 800121e:	4618      	mov	r0, r3
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}

08001226 <_exit>:
 8001226:	b580      	push	{r7, lr}
 8001228:	b082      	sub	sp, #8
 800122a:	af00      	add	r7, sp, #0
 800122c:	6078      	str	r0, [r7, #4]
 800122e:	f04f 31ff 	mov.w	r1, #4294967295
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f7ff ffe7 	bl	8001206 <_kill>
 8001238:	e7fe      	b.n	8001238 <_exit+0x12>

0800123a <_read>:
 800123a:	b580      	push	{r7, lr}
 800123c:	b086      	sub	sp, #24
 800123e:	af00      	add	r7, sp, #0
 8001240:	60f8      	str	r0, [r7, #12]
 8001242:	60b9      	str	r1, [r7, #8]
 8001244:	607a      	str	r2, [r7, #4]
 8001246:	2300      	movs	r3, #0
 8001248:	617b      	str	r3, [r7, #20]
 800124a:	e00a      	b.n	8001262 <_read+0x28>
 800124c:	f3af 8000 	nop.w
 8001250:	4601      	mov	r1, r0
 8001252:	68bb      	ldr	r3, [r7, #8]
 8001254:	1c5a      	adds	r2, r3, #1
 8001256:	60ba      	str	r2, [r7, #8]
 8001258:	b2ca      	uxtb	r2, r1
 800125a:	701a      	strb	r2, [r3, #0]
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	3301      	adds	r3, #1
 8001260:	617b      	str	r3, [r7, #20]
 8001262:	697a      	ldr	r2, [r7, #20]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	429a      	cmp	r2, r3
 8001268:	dbf0      	blt.n	800124c <_read+0x12>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4618      	mov	r0, r3
 800126e:	3718      	adds	r7, #24
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}

08001274 <_write>:
 8001274:	b580      	push	{r7, lr}
 8001276:	b086      	sub	sp, #24
 8001278:	af00      	add	r7, sp, #0
 800127a:	60f8      	str	r0, [r7, #12]
 800127c:	60b9      	str	r1, [r7, #8]
 800127e:	607a      	str	r2, [r7, #4]
 8001280:	2300      	movs	r3, #0
 8001282:	617b      	str	r3, [r7, #20]
 8001284:	e009      	b.n	800129a <_write+0x26>
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	1c5a      	adds	r2, r3, #1
 800128a:	60ba      	str	r2, [r7, #8]
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	4618      	mov	r0, r3
 8001290:	f3af 8000 	nop.w
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	3301      	adds	r3, #1
 8001298:	617b      	str	r3, [r7, #20]
 800129a:	697a      	ldr	r2, [r7, #20]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	429a      	cmp	r2, r3
 80012a0:	dbf1      	blt.n	8001286 <_write+0x12>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4618      	mov	r0, r3
 80012a6:	3718      	adds	r7, #24
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}

080012ac <_close>:
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	f04f 33ff 	mov.w	r3, #4294967295
 80012b8:	4618      	mov	r0, r3
 80012ba:	370c      	adds	r7, #12
 80012bc:	46bd      	mov	sp, r7
 80012be:	bc80      	pop	{r7}
 80012c0:	4770      	bx	lr

080012c2 <_fstat>:
 80012c2:	b480      	push	{r7}
 80012c4:	b083      	sub	sp, #12
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	6078      	str	r0, [r7, #4]
 80012ca:	6039      	str	r1, [r7, #0]
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012d2:	605a      	str	r2, [r3, #4]
 80012d4:	2300      	movs	r3, #0
 80012d6:	4618      	mov	r0, r3
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	bc80      	pop	{r7}
 80012de:	4770      	bx	lr

080012e0 <_isatty>:
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	2301      	movs	r3, #1
 80012ea:	4618      	mov	r0, r3
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bc80      	pop	{r7}
 80012f2:	4770      	bx	lr

080012f4 <_lseek>:
 80012f4:	b480      	push	{r7}
 80012f6:	b085      	sub	sp, #20
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	607a      	str	r2, [r7, #4]
 8001300:	2300      	movs	r3, #0
 8001302:	4618      	mov	r0, r3
 8001304:	3714      	adds	r7, #20
 8001306:	46bd      	mov	sp, r7
 8001308:	bc80      	pop	{r7}
 800130a:	4770      	bx	lr

0800130c <_sbrk>:
 800130c:	b580      	push	{r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	4a14      	ldr	r2, [pc, #80]	; (8001368 <_sbrk+0x5c>)
 8001316:	4b15      	ldr	r3, [pc, #84]	; (800136c <_sbrk+0x60>)
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	617b      	str	r3, [r7, #20]
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	613b      	str	r3, [r7, #16]
 8001320:	4b13      	ldr	r3, [pc, #76]	; (8001370 <_sbrk+0x64>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d102      	bne.n	800132e <_sbrk+0x22>
 8001328:	4b11      	ldr	r3, [pc, #68]	; (8001370 <_sbrk+0x64>)
 800132a:	4a12      	ldr	r2, [pc, #72]	; (8001374 <_sbrk+0x68>)
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	4b10      	ldr	r3, [pc, #64]	; (8001370 <_sbrk+0x64>)
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4413      	add	r3, r2
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	429a      	cmp	r2, r3
 800133a:	d207      	bcs.n	800134c <_sbrk+0x40>
 800133c:	f002 f92a 	bl	8003594 <__errno>
 8001340:	4603      	mov	r3, r0
 8001342:	220c      	movs	r2, #12
 8001344:	601a      	str	r2, [r3, #0]
 8001346:	f04f 33ff 	mov.w	r3, #4294967295
 800134a:	e009      	b.n	8001360 <_sbrk+0x54>
 800134c:	4b08      	ldr	r3, [pc, #32]	; (8001370 <_sbrk+0x64>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	60fb      	str	r3, [r7, #12]
 8001352:	4b07      	ldr	r3, [pc, #28]	; (8001370 <_sbrk+0x64>)
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4413      	add	r3, r2
 800135a:	4a05      	ldr	r2, [pc, #20]	; (8001370 <_sbrk+0x64>)
 800135c:	6013      	str	r3, [r2, #0]
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	4618      	mov	r0, r3
 8001362:	3718      	adds	r7, #24
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	20005000 	.word	0x20005000
 800136c:	00000400 	.word	0x00000400
 8001370:	200003fc 	.word	0x200003fc
 8001374:	20000710 	.word	0x20000710

08001378 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800137c:	bf00      	nop
 800137e:	46bd      	mov	sp, r7
 8001380:	bc80      	pop	{r7}
 8001382:	4770      	bx	lr

08001384 <Reset_Handler>:
 8001384:	2100      	movs	r1, #0
 8001386:	e003      	b.n	8001390 <LoopCopyDataInit>

08001388 <CopyDataInit>:
 8001388:	4b0b      	ldr	r3, [pc, #44]	; (80013b8 <LoopFillZerobss+0x14>)
 800138a:	585b      	ldr	r3, [r3, r1]
 800138c:	5043      	str	r3, [r0, r1]
 800138e:	3104      	adds	r1, #4

08001390 <LoopCopyDataInit>:
 8001390:	480a      	ldr	r0, [pc, #40]	; (80013bc <LoopFillZerobss+0x18>)
 8001392:	4b0b      	ldr	r3, [pc, #44]	; (80013c0 <LoopFillZerobss+0x1c>)
 8001394:	1842      	adds	r2, r0, r1
 8001396:	429a      	cmp	r2, r3
 8001398:	d3f6      	bcc.n	8001388 <CopyDataInit>
 800139a:	4a0a      	ldr	r2, [pc, #40]	; (80013c4 <LoopFillZerobss+0x20>)
 800139c:	e002      	b.n	80013a4 <LoopFillZerobss>

0800139e <FillZerobss>:
 800139e:	2300      	movs	r3, #0
 80013a0:	f842 3b04 	str.w	r3, [r2], #4

080013a4 <LoopFillZerobss>:
 80013a4:	4b08      	ldr	r3, [pc, #32]	; (80013c8 <LoopFillZerobss+0x24>)
 80013a6:	429a      	cmp	r2, r3
 80013a8:	d3f9      	bcc.n	800139e <FillZerobss>
 80013aa:	f7ff ffe5 	bl	8001378 <SystemInit>
 80013ae:	f002 f8f7 	bl	80035a0 <__libc_init_array>
 80013b2:	f7fe fed3 	bl	800015c <main>
 80013b6:	4770      	bx	lr
 80013b8:	08004b68 	.word	0x08004b68
 80013bc:	20000000 	.word	0x20000000
 80013c0:	200003d8 	.word	0x200003d8
 80013c4:	200003d8 	.word	0x200003d8
 80013c8:	2000070c 	.word	0x2000070c

080013cc <ADC1_2_IRQHandler>:
 80013cc:	e7fe      	b.n	80013cc <ADC1_2_IRQHandler>
	...

080013d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013d4:	4b08      	ldr	r3, [pc, #32]	; (80013f8 <HAL_Init+0x28>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a07      	ldr	r2, [pc, #28]	; (80013f8 <HAL_Init+0x28>)
 80013da:	f043 0310 	orr.w	r3, r3, #16
 80013de:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013e0:	2003      	movs	r0, #3
 80013e2:	f000 f947 	bl	8001674 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013e6:	2000      	movs	r0, #0
 80013e8:	f000 f808 	bl	80013fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013ec:	f7ff fd80 	bl	8000ef0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013f0:	2300      	movs	r3, #0
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40022000 	.word	0x40022000

080013fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001404:	4b12      	ldr	r3, [pc, #72]	; (8001450 <HAL_InitTick+0x54>)
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	4b12      	ldr	r3, [pc, #72]	; (8001454 <HAL_InitTick+0x58>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	4619      	mov	r1, r3
 800140e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001412:	fbb3 f3f1 	udiv	r3, r3, r1
 8001416:	fbb2 f3f3 	udiv	r3, r2, r3
 800141a:	4618      	mov	r0, r3
 800141c:	f000 f95f 	bl	80016de <HAL_SYSTICK_Config>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e00e      	b.n	8001448 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2b0f      	cmp	r3, #15
 800142e:	d80a      	bhi.n	8001446 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001430:	2200      	movs	r2, #0
 8001432:	6879      	ldr	r1, [r7, #4]
 8001434:	f04f 30ff 	mov.w	r0, #4294967295
 8001438:	f000 f927 	bl	800168a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800143c:	4a06      	ldr	r2, [pc, #24]	; (8001458 <HAL_InitTick+0x5c>)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001442:	2300      	movs	r3, #0
 8001444:	e000      	b.n	8001448 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
}
 8001448:	4618      	mov	r0, r3
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	20000368 	.word	0x20000368
 8001454:	20000370 	.word	0x20000370
 8001458:	2000036c 	.word	0x2000036c

0800145c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001460:	4b05      	ldr	r3, [pc, #20]	; (8001478 <HAL_IncTick+0x1c>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	461a      	mov	r2, r3
 8001466:	4b05      	ldr	r3, [pc, #20]	; (800147c <HAL_IncTick+0x20>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4413      	add	r3, r2
 800146c:	4a03      	ldr	r2, [pc, #12]	; (800147c <HAL_IncTick+0x20>)
 800146e:	6013      	str	r3, [r2, #0]
}
 8001470:	bf00      	nop
 8001472:	46bd      	mov	sp, r7
 8001474:	bc80      	pop	{r7}
 8001476:	4770      	bx	lr
 8001478:	20000370 	.word	0x20000370
 800147c:	200006f8 	.word	0x200006f8

08001480 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  return uwTick;
 8001484:	4b02      	ldr	r3, [pc, #8]	; (8001490 <HAL_GetTick+0x10>)
 8001486:	681b      	ldr	r3, [r3, #0]
}
 8001488:	4618      	mov	r0, r3
 800148a:	46bd      	mov	sp, r7
 800148c:	bc80      	pop	{r7}
 800148e:	4770      	bx	lr
 8001490:	200006f8 	.word	0x200006f8

08001494 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800149c:	f7ff fff0 	bl	8001480 <HAL_GetTick>
 80014a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014ac:	d005      	beq.n	80014ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014ae:	4b0a      	ldr	r3, [pc, #40]	; (80014d8 <HAL_Delay+0x44>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	461a      	mov	r2, r3
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	4413      	add	r3, r2
 80014b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014ba:	bf00      	nop
 80014bc:	f7ff ffe0 	bl	8001480 <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	68fa      	ldr	r2, [r7, #12]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d8f7      	bhi.n	80014bc <HAL_Delay+0x28>
  {
  }
}
 80014cc:	bf00      	nop
 80014ce:	bf00      	nop
 80014d0:	3710      	adds	r7, #16
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	20000370 	.word	0x20000370

080014dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014dc:	b480      	push	{r7}
 80014de:	b085      	sub	sp, #20
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	f003 0307 	and.w	r3, r3, #7
 80014ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014ec:	4b0c      	ldr	r3, [pc, #48]	; (8001520 <__NVIC_SetPriorityGrouping+0x44>)
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014f2:	68ba      	ldr	r2, [r7, #8]
 80014f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014f8:	4013      	ands	r3, r2
 80014fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001504:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001508:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800150c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800150e:	4a04      	ldr	r2, [pc, #16]	; (8001520 <__NVIC_SetPriorityGrouping+0x44>)
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	60d3      	str	r3, [r2, #12]
}
 8001514:	bf00      	nop
 8001516:	3714      	adds	r7, #20
 8001518:	46bd      	mov	sp, r7
 800151a:	bc80      	pop	{r7}
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	e000ed00 	.word	0xe000ed00

08001524 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001528:	4b04      	ldr	r3, [pc, #16]	; (800153c <__NVIC_GetPriorityGrouping+0x18>)
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	0a1b      	lsrs	r3, r3, #8
 800152e:	f003 0307 	and.w	r3, r3, #7
}
 8001532:	4618      	mov	r0, r3
 8001534:	46bd      	mov	sp, r7
 8001536:	bc80      	pop	{r7}
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	e000ed00 	.word	0xe000ed00

08001540 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	4603      	mov	r3, r0
 8001548:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800154a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154e:	2b00      	cmp	r3, #0
 8001550:	db0b      	blt.n	800156a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001552:	79fb      	ldrb	r3, [r7, #7]
 8001554:	f003 021f 	and.w	r2, r3, #31
 8001558:	4906      	ldr	r1, [pc, #24]	; (8001574 <__NVIC_EnableIRQ+0x34>)
 800155a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155e:	095b      	lsrs	r3, r3, #5
 8001560:	2001      	movs	r0, #1
 8001562:	fa00 f202 	lsl.w	r2, r0, r2
 8001566:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800156a:	bf00      	nop
 800156c:	370c      	adds	r7, #12
 800156e:	46bd      	mov	sp, r7
 8001570:	bc80      	pop	{r7}
 8001572:	4770      	bx	lr
 8001574:	e000e100 	.word	0xe000e100

08001578 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	4603      	mov	r3, r0
 8001580:	6039      	str	r1, [r7, #0]
 8001582:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001588:	2b00      	cmp	r3, #0
 800158a:	db0a      	blt.n	80015a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	b2da      	uxtb	r2, r3
 8001590:	490c      	ldr	r1, [pc, #48]	; (80015c4 <__NVIC_SetPriority+0x4c>)
 8001592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001596:	0112      	lsls	r2, r2, #4
 8001598:	b2d2      	uxtb	r2, r2
 800159a:	440b      	add	r3, r1
 800159c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015a0:	e00a      	b.n	80015b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	b2da      	uxtb	r2, r3
 80015a6:	4908      	ldr	r1, [pc, #32]	; (80015c8 <__NVIC_SetPriority+0x50>)
 80015a8:	79fb      	ldrb	r3, [r7, #7]
 80015aa:	f003 030f 	and.w	r3, r3, #15
 80015ae:	3b04      	subs	r3, #4
 80015b0:	0112      	lsls	r2, r2, #4
 80015b2:	b2d2      	uxtb	r2, r2
 80015b4:	440b      	add	r3, r1
 80015b6:	761a      	strb	r2, [r3, #24]
}
 80015b8:	bf00      	nop
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	bc80      	pop	{r7}
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	e000e100 	.word	0xe000e100
 80015c8:	e000ed00 	.word	0xe000ed00

080015cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b089      	sub	sp, #36	; 0x24
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	60f8      	str	r0, [r7, #12]
 80015d4:	60b9      	str	r1, [r7, #8]
 80015d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	f003 0307 	and.w	r3, r3, #7
 80015de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	f1c3 0307 	rsb	r3, r3, #7
 80015e6:	2b04      	cmp	r3, #4
 80015e8:	bf28      	it	cs
 80015ea:	2304      	movcs	r3, #4
 80015ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	3304      	adds	r3, #4
 80015f2:	2b06      	cmp	r3, #6
 80015f4:	d902      	bls.n	80015fc <NVIC_EncodePriority+0x30>
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	3b03      	subs	r3, #3
 80015fa:	e000      	b.n	80015fe <NVIC_EncodePriority+0x32>
 80015fc:	2300      	movs	r3, #0
 80015fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001600:	f04f 32ff 	mov.w	r2, #4294967295
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	fa02 f303 	lsl.w	r3, r2, r3
 800160a:	43da      	mvns	r2, r3
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	401a      	ands	r2, r3
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001614:	f04f 31ff 	mov.w	r1, #4294967295
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	fa01 f303 	lsl.w	r3, r1, r3
 800161e:	43d9      	mvns	r1, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001624:	4313      	orrs	r3, r2
         );
}
 8001626:	4618      	mov	r0, r3
 8001628:	3724      	adds	r7, #36	; 0x24
 800162a:	46bd      	mov	sp, r7
 800162c:	bc80      	pop	{r7}
 800162e:	4770      	bx	lr

08001630 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	3b01      	subs	r3, #1
 800163c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001640:	d301      	bcc.n	8001646 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001642:	2301      	movs	r3, #1
 8001644:	e00f      	b.n	8001666 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001646:	4a0a      	ldr	r2, [pc, #40]	; (8001670 <SysTick_Config+0x40>)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	3b01      	subs	r3, #1
 800164c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800164e:	210f      	movs	r1, #15
 8001650:	f04f 30ff 	mov.w	r0, #4294967295
 8001654:	f7ff ff90 	bl	8001578 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001658:	4b05      	ldr	r3, [pc, #20]	; (8001670 <SysTick_Config+0x40>)
 800165a:	2200      	movs	r2, #0
 800165c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800165e:	4b04      	ldr	r3, [pc, #16]	; (8001670 <SysTick_Config+0x40>)
 8001660:	2207      	movs	r2, #7
 8001662:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001664:	2300      	movs	r3, #0
}
 8001666:	4618      	mov	r0, r3
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	e000e010 	.word	0xe000e010

08001674 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f7ff ff2d 	bl	80014dc <__NVIC_SetPriorityGrouping>
}
 8001682:	bf00      	nop
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}

0800168a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800168a:	b580      	push	{r7, lr}
 800168c:	b086      	sub	sp, #24
 800168e:	af00      	add	r7, sp, #0
 8001690:	4603      	mov	r3, r0
 8001692:	60b9      	str	r1, [r7, #8]
 8001694:	607a      	str	r2, [r7, #4]
 8001696:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001698:	2300      	movs	r3, #0
 800169a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800169c:	f7ff ff42 	bl	8001524 <__NVIC_GetPriorityGrouping>
 80016a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	68b9      	ldr	r1, [r7, #8]
 80016a6:	6978      	ldr	r0, [r7, #20]
 80016a8:	f7ff ff90 	bl	80015cc <NVIC_EncodePriority>
 80016ac:	4602      	mov	r2, r0
 80016ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016b2:	4611      	mov	r1, r2
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7ff ff5f 	bl	8001578 <__NVIC_SetPriority>
}
 80016ba:	bf00      	nop
 80016bc:	3718      	adds	r7, #24
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}

080016c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016c2:	b580      	push	{r7, lr}
 80016c4:	b082      	sub	sp, #8
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	4603      	mov	r3, r0
 80016ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff ff35 	bl	8001540 <__NVIC_EnableIRQ>
}
 80016d6:	bf00      	nop
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}

080016de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	b082      	sub	sp, #8
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f7ff ffa2 	bl	8001630 <SysTick_Config>
 80016ec:	4603      	mov	r3, r0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
	...

080016f8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001700:	2300      	movs	r3, #0
 8001702:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800170a:	2b02      	cmp	r3, #2
 800170c:	d005      	beq.n	800171a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2204      	movs	r2, #4
 8001712:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	73fb      	strb	r3, [r7, #15]
 8001718:	e051      	b.n	80017be <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f022 020e 	bic.w	r2, r2, #14
 8001728:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f022 0201 	bic.w	r2, r2, #1
 8001738:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a22      	ldr	r2, [pc, #136]	; (80017c8 <HAL_DMA_Abort_IT+0xd0>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d029      	beq.n	8001798 <HAL_DMA_Abort_IT+0xa0>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a20      	ldr	r2, [pc, #128]	; (80017cc <HAL_DMA_Abort_IT+0xd4>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d022      	beq.n	8001794 <HAL_DMA_Abort_IT+0x9c>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a1f      	ldr	r2, [pc, #124]	; (80017d0 <HAL_DMA_Abort_IT+0xd8>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d01a      	beq.n	800178e <HAL_DMA_Abort_IT+0x96>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a1d      	ldr	r2, [pc, #116]	; (80017d4 <HAL_DMA_Abort_IT+0xdc>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d012      	beq.n	8001788 <HAL_DMA_Abort_IT+0x90>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a1c      	ldr	r2, [pc, #112]	; (80017d8 <HAL_DMA_Abort_IT+0xe0>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d00a      	beq.n	8001782 <HAL_DMA_Abort_IT+0x8a>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a1a      	ldr	r2, [pc, #104]	; (80017dc <HAL_DMA_Abort_IT+0xe4>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d102      	bne.n	800177c <HAL_DMA_Abort_IT+0x84>
 8001776:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800177a:	e00e      	b.n	800179a <HAL_DMA_Abort_IT+0xa2>
 800177c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001780:	e00b      	b.n	800179a <HAL_DMA_Abort_IT+0xa2>
 8001782:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001786:	e008      	b.n	800179a <HAL_DMA_Abort_IT+0xa2>
 8001788:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800178c:	e005      	b.n	800179a <HAL_DMA_Abort_IT+0xa2>
 800178e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001792:	e002      	b.n	800179a <HAL_DMA_Abort_IT+0xa2>
 8001794:	2310      	movs	r3, #16
 8001796:	e000      	b.n	800179a <HAL_DMA_Abort_IT+0xa2>
 8001798:	2301      	movs	r3, #1
 800179a:	4a11      	ldr	r2, [pc, #68]	; (80017e0 <HAL_DMA_Abort_IT+0xe8>)
 800179c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2201      	movs	r2, #1
 80017a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2200      	movs	r2, #0
 80017aa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d003      	beq.n	80017be <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	4798      	blx	r3
    } 
  }
  return status;
 80017be:	7bfb      	ldrb	r3, [r7, #15]
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3710      	adds	r7, #16
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	40020008 	.word	0x40020008
 80017cc:	4002001c 	.word	0x4002001c
 80017d0:	40020030 	.word	0x40020030
 80017d4:	40020044 	.word	0x40020044
 80017d8:	40020058 	.word	0x40020058
 80017dc:	4002006c 	.word	0x4002006c
 80017e0:	40020000 	.word	0x40020000

080017e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b08b      	sub	sp, #44	; 0x2c
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017ee:	2300      	movs	r3, #0
 80017f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017f2:	2300      	movs	r3, #0
 80017f4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017f6:	e169      	b.n	8001acc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017f8:	2201      	movs	r2, #1
 80017fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001800:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	69fa      	ldr	r2, [r7, #28]
 8001808:	4013      	ands	r3, r2
 800180a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	429a      	cmp	r2, r3
 8001812:	f040 8158 	bne.w	8001ac6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	4a9a      	ldr	r2, [pc, #616]	; (8001a84 <HAL_GPIO_Init+0x2a0>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d05e      	beq.n	80018de <HAL_GPIO_Init+0xfa>
 8001820:	4a98      	ldr	r2, [pc, #608]	; (8001a84 <HAL_GPIO_Init+0x2a0>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d875      	bhi.n	8001912 <HAL_GPIO_Init+0x12e>
 8001826:	4a98      	ldr	r2, [pc, #608]	; (8001a88 <HAL_GPIO_Init+0x2a4>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d058      	beq.n	80018de <HAL_GPIO_Init+0xfa>
 800182c:	4a96      	ldr	r2, [pc, #600]	; (8001a88 <HAL_GPIO_Init+0x2a4>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d86f      	bhi.n	8001912 <HAL_GPIO_Init+0x12e>
 8001832:	4a96      	ldr	r2, [pc, #600]	; (8001a8c <HAL_GPIO_Init+0x2a8>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d052      	beq.n	80018de <HAL_GPIO_Init+0xfa>
 8001838:	4a94      	ldr	r2, [pc, #592]	; (8001a8c <HAL_GPIO_Init+0x2a8>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d869      	bhi.n	8001912 <HAL_GPIO_Init+0x12e>
 800183e:	4a94      	ldr	r2, [pc, #592]	; (8001a90 <HAL_GPIO_Init+0x2ac>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d04c      	beq.n	80018de <HAL_GPIO_Init+0xfa>
 8001844:	4a92      	ldr	r2, [pc, #584]	; (8001a90 <HAL_GPIO_Init+0x2ac>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d863      	bhi.n	8001912 <HAL_GPIO_Init+0x12e>
 800184a:	4a92      	ldr	r2, [pc, #584]	; (8001a94 <HAL_GPIO_Init+0x2b0>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d046      	beq.n	80018de <HAL_GPIO_Init+0xfa>
 8001850:	4a90      	ldr	r2, [pc, #576]	; (8001a94 <HAL_GPIO_Init+0x2b0>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d85d      	bhi.n	8001912 <HAL_GPIO_Init+0x12e>
 8001856:	2b12      	cmp	r3, #18
 8001858:	d82a      	bhi.n	80018b0 <HAL_GPIO_Init+0xcc>
 800185a:	2b12      	cmp	r3, #18
 800185c:	d859      	bhi.n	8001912 <HAL_GPIO_Init+0x12e>
 800185e:	a201      	add	r2, pc, #4	; (adr r2, 8001864 <HAL_GPIO_Init+0x80>)
 8001860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001864:	080018df 	.word	0x080018df
 8001868:	080018b9 	.word	0x080018b9
 800186c:	080018cb 	.word	0x080018cb
 8001870:	0800190d 	.word	0x0800190d
 8001874:	08001913 	.word	0x08001913
 8001878:	08001913 	.word	0x08001913
 800187c:	08001913 	.word	0x08001913
 8001880:	08001913 	.word	0x08001913
 8001884:	08001913 	.word	0x08001913
 8001888:	08001913 	.word	0x08001913
 800188c:	08001913 	.word	0x08001913
 8001890:	08001913 	.word	0x08001913
 8001894:	08001913 	.word	0x08001913
 8001898:	08001913 	.word	0x08001913
 800189c:	08001913 	.word	0x08001913
 80018a0:	08001913 	.word	0x08001913
 80018a4:	08001913 	.word	0x08001913
 80018a8:	080018c1 	.word	0x080018c1
 80018ac:	080018d5 	.word	0x080018d5
 80018b0:	4a79      	ldr	r2, [pc, #484]	; (8001a98 <HAL_GPIO_Init+0x2b4>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d013      	beq.n	80018de <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80018b6:	e02c      	b.n	8001912 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	623b      	str	r3, [r7, #32]
          break;
 80018be:	e029      	b.n	8001914 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	3304      	adds	r3, #4
 80018c6:	623b      	str	r3, [r7, #32]
          break;
 80018c8:	e024      	b.n	8001914 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	68db      	ldr	r3, [r3, #12]
 80018ce:	3308      	adds	r3, #8
 80018d0:	623b      	str	r3, [r7, #32]
          break;
 80018d2:	e01f      	b.n	8001914 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	330c      	adds	r3, #12
 80018da:	623b      	str	r3, [r7, #32]
          break;
 80018dc:	e01a      	b.n	8001914 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d102      	bne.n	80018ec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018e6:	2304      	movs	r3, #4
 80018e8:	623b      	str	r3, [r7, #32]
          break;
 80018ea:	e013      	b.n	8001914 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d105      	bne.n	8001900 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018f4:	2308      	movs	r3, #8
 80018f6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	69fa      	ldr	r2, [r7, #28]
 80018fc:	611a      	str	r2, [r3, #16]
          break;
 80018fe:	e009      	b.n	8001914 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001900:	2308      	movs	r3, #8
 8001902:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	69fa      	ldr	r2, [r7, #28]
 8001908:	615a      	str	r2, [r3, #20]
          break;
 800190a:	e003      	b.n	8001914 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800190c:	2300      	movs	r3, #0
 800190e:	623b      	str	r3, [r7, #32]
          break;
 8001910:	e000      	b.n	8001914 <HAL_GPIO_Init+0x130>
          break;
 8001912:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001914:	69bb      	ldr	r3, [r7, #24]
 8001916:	2bff      	cmp	r3, #255	; 0xff
 8001918:	d801      	bhi.n	800191e <HAL_GPIO_Init+0x13a>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	e001      	b.n	8001922 <HAL_GPIO_Init+0x13e>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	3304      	adds	r3, #4
 8001922:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	2bff      	cmp	r3, #255	; 0xff
 8001928:	d802      	bhi.n	8001930 <HAL_GPIO_Init+0x14c>
 800192a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	e002      	b.n	8001936 <HAL_GPIO_Init+0x152>
 8001930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001932:	3b08      	subs	r3, #8
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	210f      	movs	r1, #15
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	fa01 f303 	lsl.w	r3, r1, r3
 8001944:	43db      	mvns	r3, r3
 8001946:	401a      	ands	r2, r3
 8001948:	6a39      	ldr	r1, [r7, #32]
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	fa01 f303 	lsl.w	r3, r1, r3
 8001950:	431a      	orrs	r2, r3
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800195e:	2b00      	cmp	r3, #0
 8001960:	f000 80b1 	beq.w	8001ac6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001964:	4b4d      	ldr	r3, [pc, #308]	; (8001a9c <HAL_GPIO_Init+0x2b8>)
 8001966:	699b      	ldr	r3, [r3, #24]
 8001968:	4a4c      	ldr	r2, [pc, #304]	; (8001a9c <HAL_GPIO_Init+0x2b8>)
 800196a:	f043 0301 	orr.w	r3, r3, #1
 800196e:	6193      	str	r3, [r2, #24]
 8001970:	4b4a      	ldr	r3, [pc, #296]	; (8001a9c <HAL_GPIO_Init+0x2b8>)
 8001972:	699b      	ldr	r3, [r3, #24]
 8001974:	f003 0301 	and.w	r3, r3, #1
 8001978:	60bb      	str	r3, [r7, #8]
 800197a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800197c:	4a48      	ldr	r2, [pc, #288]	; (8001aa0 <HAL_GPIO_Init+0x2bc>)
 800197e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001980:	089b      	lsrs	r3, r3, #2
 8001982:	3302      	adds	r3, #2
 8001984:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001988:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800198a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198c:	f003 0303 	and.w	r3, r3, #3
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	220f      	movs	r2, #15
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	43db      	mvns	r3, r3
 800199a:	68fa      	ldr	r2, [r7, #12]
 800199c:	4013      	ands	r3, r2
 800199e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	4a40      	ldr	r2, [pc, #256]	; (8001aa4 <HAL_GPIO_Init+0x2c0>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d013      	beq.n	80019d0 <HAL_GPIO_Init+0x1ec>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	4a3f      	ldr	r2, [pc, #252]	; (8001aa8 <HAL_GPIO_Init+0x2c4>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d00d      	beq.n	80019cc <HAL_GPIO_Init+0x1e8>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	4a3e      	ldr	r2, [pc, #248]	; (8001aac <HAL_GPIO_Init+0x2c8>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d007      	beq.n	80019c8 <HAL_GPIO_Init+0x1e4>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	4a3d      	ldr	r2, [pc, #244]	; (8001ab0 <HAL_GPIO_Init+0x2cc>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d101      	bne.n	80019c4 <HAL_GPIO_Init+0x1e0>
 80019c0:	2303      	movs	r3, #3
 80019c2:	e006      	b.n	80019d2 <HAL_GPIO_Init+0x1ee>
 80019c4:	2304      	movs	r3, #4
 80019c6:	e004      	b.n	80019d2 <HAL_GPIO_Init+0x1ee>
 80019c8:	2302      	movs	r3, #2
 80019ca:	e002      	b.n	80019d2 <HAL_GPIO_Init+0x1ee>
 80019cc:	2301      	movs	r3, #1
 80019ce:	e000      	b.n	80019d2 <HAL_GPIO_Init+0x1ee>
 80019d0:	2300      	movs	r3, #0
 80019d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019d4:	f002 0203 	and.w	r2, r2, #3
 80019d8:	0092      	lsls	r2, r2, #2
 80019da:	4093      	lsls	r3, r2
 80019dc:	68fa      	ldr	r2, [r7, #12]
 80019de:	4313      	orrs	r3, r2
 80019e0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80019e2:	492f      	ldr	r1, [pc, #188]	; (8001aa0 <HAL_GPIO_Init+0x2bc>)
 80019e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e6:	089b      	lsrs	r3, r3, #2
 80019e8:	3302      	adds	r3, #2
 80019ea:	68fa      	ldr	r2, [r7, #12]
 80019ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d006      	beq.n	8001a0a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019fc:	4b2d      	ldr	r3, [pc, #180]	; (8001ab4 <HAL_GPIO_Init+0x2d0>)
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	492c      	ldr	r1, [pc, #176]	; (8001ab4 <HAL_GPIO_Init+0x2d0>)
 8001a02:	69bb      	ldr	r3, [r7, #24]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	600b      	str	r3, [r1, #0]
 8001a08:	e006      	b.n	8001a18 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a0a:	4b2a      	ldr	r3, [pc, #168]	; (8001ab4 <HAL_GPIO_Init+0x2d0>)
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	43db      	mvns	r3, r3
 8001a12:	4928      	ldr	r1, [pc, #160]	; (8001ab4 <HAL_GPIO_Init+0x2d0>)
 8001a14:	4013      	ands	r3, r2
 8001a16:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d006      	beq.n	8001a32 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a24:	4b23      	ldr	r3, [pc, #140]	; (8001ab4 <HAL_GPIO_Init+0x2d0>)
 8001a26:	685a      	ldr	r2, [r3, #4]
 8001a28:	4922      	ldr	r1, [pc, #136]	; (8001ab4 <HAL_GPIO_Init+0x2d0>)
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	604b      	str	r3, [r1, #4]
 8001a30:	e006      	b.n	8001a40 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a32:	4b20      	ldr	r3, [pc, #128]	; (8001ab4 <HAL_GPIO_Init+0x2d0>)
 8001a34:	685a      	ldr	r2, [r3, #4]
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	43db      	mvns	r3, r3
 8001a3a:	491e      	ldr	r1, [pc, #120]	; (8001ab4 <HAL_GPIO_Init+0x2d0>)
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d006      	beq.n	8001a5a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a4c:	4b19      	ldr	r3, [pc, #100]	; (8001ab4 <HAL_GPIO_Init+0x2d0>)
 8001a4e:	689a      	ldr	r2, [r3, #8]
 8001a50:	4918      	ldr	r1, [pc, #96]	; (8001ab4 <HAL_GPIO_Init+0x2d0>)
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	608b      	str	r3, [r1, #8]
 8001a58:	e006      	b.n	8001a68 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a5a:	4b16      	ldr	r3, [pc, #88]	; (8001ab4 <HAL_GPIO_Init+0x2d0>)
 8001a5c:	689a      	ldr	r2, [r3, #8]
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	43db      	mvns	r3, r3
 8001a62:	4914      	ldr	r1, [pc, #80]	; (8001ab4 <HAL_GPIO_Init+0x2d0>)
 8001a64:	4013      	ands	r3, r2
 8001a66:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d021      	beq.n	8001ab8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a74:	4b0f      	ldr	r3, [pc, #60]	; (8001ab4 <HAL_GPIO_Init+0x2d0>)
 8001a76:	68da      	ldr	r2, [r3, #12]
 8001a78:	490e      	ldr	r1, [pc, #56]	; (8001ab4 <HAL_GPIO_Init+0x2d0>)
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	60cb      	str	r3, [r1, #12]
 8001a80:	e021      	b.n	8001ac6 <HAL_GPIO_Init+0x2e2>
 8001a82:	bf00      	nop
 8001a84:	10320000 	.word	0x10320000
 8001a88:	10310000 	.word	0x10310000
 8001a8c:	10220000 	.word	0x10220000
 8001a90:	10210000 	.word	0x10210000
 8001a94:	10120000 	.word	0x10120000
 8001a98:	10110000 	.word	0x10110000
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	40010000 	.word	0x40010000
 8001aa4:	40010800 	.word	0x40010800
 8001aa8:	40010c00 	.word	0x40010c00
 8001aac:	40011000 	.word	0x40011000
 8001ab0:	40011400 	.word	0x40011400
 8001ab4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ab8:	4b0b      	ldr	r3, [pc, #44]	; (8001ae8 <HAL_GPIO_Init+0x304>)
 8001aba:	68da      	ldr	r2, [r3, #12]
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	43db      	mvns	r3, r3
 8001ac0:	4909      	ldr	r1, [pc, #36]	; (8001ae8 <HAL_GPIO_Init+0x304>)
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac8:	3301      	adds	r3, #1
 8001aca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	f47f ae8e 	bne.w	80017f8 <HAL_GPIO_Init+0x14>
  }
}
 8001adc:	bf00      	nop
 8001ade:	bf00      	nop
 8001ae0:	372c      	adds	r7, #44	; 0x2c
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bc80      	pop	{r7}
 8001ae6:	4770      	bx	lr
 8001ae8:	40010400 	.word	0x40010400

08001aec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	460b      	mov	r3, r1
 8001af6:	807b      	strh	r3, [r7, #2]
 8001af8:	4613      	mov	r3, r2
 8001afa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001afc:	787b      	ldrb	r3, [r7, #1]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d003      	beq.n	8001b0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b02:	887a      	ldrh	r2, [r7, #2]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b08:	e003      	b.n	8001b12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b0a:	887b      	ldrh	r3, [r7, #2]
 8001b0c:	041a      	lsls	r2, r3, #16
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	611a      	str	r2, [r3, #16]
}
 8001b12:	bf00      	nop
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bc80      	pop	{r7}
 8001b1a:	4770      	bx	lr

08001b1c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	4603      	mov	r3, r0
 8001b24:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001b26:	4b08      	ldr	r3, [pc, #32]	; (8001b48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b28:	695a      	ldr	r2, [r3, #20]
 8001b2a:	88fb      	ldrh	r3, [r7, #6]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d006      	beq.n	8001b40 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b32:	4a05      	ldr	r2, [pc, #20]	; (8001b48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b34:	88fb      	ldrh	r3, [r7, #6]
 8001b36:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b38:	88fb      	ldrh	r3, [r7, #6]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f000 f806 	bl	8001b4c <HAL_GPIO_EXTI_Callback>
  }
}
 8001b40:	bf00      	nop
 8001b42:	3708      	adds	r7, #8
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	40010400 	.word	0x40010400

08001b4c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	4603      	mov	r3, r0
 8001b54:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001b56:	bf00      	nop
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bc80      	pop	{r7}
 8001b5e:	4770      	bx	lr

08001b60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b086      	sub	sp, #24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d101      	bne.n	8001b72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e26c      	b.n	800204c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0301 	and.w	r3, r3, #1
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	f000 8087 	beq.w	8001c8e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b80:	4b92      	ldr	r3, [pc, #584]	; (8001dcc <HAL_RCC_OscConfig+0x26c>)
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f003 030c 	and.w	r3, r3, #12
 8001b88:	2b04      	cmp	r3, #4
 8001b8a:	d00c      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b8c:	4b8f      	ldr	r3, [pc, #572]	; (8001dcc <HAL_RCC_OscConfig+0x26c>)
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f003 030c 	and.w	r3, r3, #12
 8001b94:	2b08      	cmp	r3, #8
 8001b96:	d112      	bne.n	8001bbe <HAL_RCC_OscConfig+0x5e>
 8001b98:	4b8c      	ldr	r3, [pc, #560]	; (8001dcc <HAL_RCC_OscConfig+0x26c>)
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ba0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ba4:	d10b      	bne.n	8001bbe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ba6:	4b89      	ldr	r3, [pc, #548]	; (8001dcc <HAL_RCC_OscConfig+0x26c>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d06c      	beq.n	8001c8c <HAL_RCC_OscConfig+0x12c>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d168      	bne.n	8001c8c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e246      	b.n	800204c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bc6:	d106      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x76>
 8001bc8:	4b80      	ldr	r3, [pc, #512]	; (8001dcc <HAL_RCC_OscConfig+0x26c>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a7f      	ldr	r2, [pc, #508]	; (8001dcc <HAL_RCC_OscConfig+0x26c>)
 8001bce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bd2:	6013      	str	r3, [r2, #0]
 8001bd4:	e02e      	b.n	8001c34 <HAL_RCC_OscConfig+0xd4>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d10c      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x98>
 8001bde:	4b7b      	ldr	r3, [pc, #492]	; (8001dcc <HAL_RCC_OscConfig+0x26c>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a7a      	ldr	r2, [pc, #488]	; (8001dcc <HAL_RCC_OscConfig+0x26c>)
 8001be4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001be8:	6013      	str	r3, [r2, #0]
 8001bea:	4b78      	ldr	r3, [pc, #480]	; (8001dcc <HAL_RCC_OscConfig+0x26c>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a77      	ldr	r2, [pc, #476]	; (8001dcc <HAL_RCC_OscConfig+0x26c>)
 8001bf0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bf4:	6013      	str	r3, [r2, #0]
 8001bf6:	e01d      	b.n	8001c34 <HAL_RCC_OscConfig+0xd4>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c00:	d10c      	bne.n	8001c1c <HAL_RCC_OscConfig+0xbc>
 8001c02:	4b72      	ldr	r3, [pc, #456]	; (8001dcc <HAL_RCC_OscConfig+0x26c>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a71      	ldr	r2, [pc, #452]	; (8001dcc <HAL_RCC_OscConfig+0x26c>)
 8001c08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c0c:	6013      	str	r3, [r2, #0]
 8001c0e:	4b6f      	ldr	r3, [pc, #444]	; (8001dcc <HAL_RCC_OscConfig+0x26c>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a6e      	ldr	r2, [pc, #440]	; (8001dcc <HAL_RCC_OscConfig+0x26c>)
 8001c14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c18:	6013      	str	r3, [r2, #0]
 8001c1a:	e00b      	b.n	8001c34 <HAL_RCC_OscConfig+0xd4>
 8001c1c:	4b6b      	ldr	r3, [pc, #428]	; (8001dcc <HAL_RCC_OscConfig+0x26c>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a6a      	ldr	r2, [pc, #424]	; (8001dcc <HAL_RCC_OscConfig+0x26c>)
 8001c22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c26:	6013      	str	r3, [r2, #0]
 8001c28:	4b68      	ldr	r3, [pc, #416]	; (8001dcc <HAL_RCC_OscConfig+0x26c>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a67      	ldr	r2, [pc, #412]	; (8001dcc <HAL_RCC_OscConfig+0x26c>)
 8001c2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c32:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d013      	beq.n	8001c64 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c3c:	f7ff fc20 	bl	8001480 <HAL_GetTick>
 8001c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c42:	e008      	b.n	8001c56 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c44:	f7ff fc1c 	bl	8001480 <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	2b64      	cmp	r3, #100	; 0x64
 8001c50:	d901      	bls.n	8001c56 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e1fa      	b.n	800204c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c56:	4b5d      	ldr	r3, [pc, #372]	; (8001dcc <HAL_RCC_OscConfig+0x26c>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d0f0      	beq.n	8001c44 <HAL_RCC_OscConfig+0xe4>
 8001c62:	e014      	b.n	8001c8e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c64:	f7ff fc0c 	bl	8001480 <HAL_GetTick>
 8001c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c6a:	e008      	b.n	8001c7e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c6c:	f7ff fc08 	bl	8001480 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	2b64      	cmp	r3, #100	; 0x64
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e1e6      	b.n	800204c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c7e:	4b53      	ldr	r3, [pc, #332]	; (8001dcc <HAL_RCC_OscConfig+0x26c>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d1f0      	bne.n	8001c6c <HAL_RCC_OscConfig+0x10c>
 8001c8a:	e000      	b.n	8001c8e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0302 	and.w	r3, r3, #2
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d063      	beq.n	8001d62 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c9a:	4b4c      	ldr	r3, [pc, #304]	; (8001dcc <HAL_RCC_OscConfig+0x26c>)
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f003 030c 	and.w	r3, r3, #12
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d00b      	beq.n	8001cbe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ca6:	4b49      	ldr	r3, [pc, #292]	; (8001dcc <HAL_RCC_OscConfig+0x26c>)
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f003 030c 	and.w	r3, r3, #12
 8001cae:	2b08      	cmp	r3, #8
 8001cb0:	d11c      	bne.n	8001cec <HAL_RCC_OscConfig+0x18c>
 8001cb2:	4b46      	ldr	r3, [pc, #280]	; (8001dcc <HAL_RCC_OscConfig+0x26c>)
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d116      	bne.n	8001cec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cbe:	4b43      	ldr	r3, [pc, #268]	; (8001dcc <HAL_RCC_OscConfig+0x26c>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d005      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x176>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	691b      	ldr	r3, [r3, #16]
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d001      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e1ba      	b.n	800204c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cd6:	4b3d      	ldr	r3, [pc, #244]	; (8001dcc <HAL_RCC_OscConfig+0x26c>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	695b      	ldr	r3, [r3, #20]
 8001ce2:	00db      	lsls	r3, r3, #3
 8001ce4:	4939      	ldr	r1, [pc, #228]	; (8001dcc <HAL_RCC_OscConfig+0x26c>)
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cea:	e03a      	b.n	8001d62 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	691b      	ldr	r3, [r3, #16]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d020      	beq.n	8001d36 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cf4:	4b36      	ldr	r3, [pc, #216]	; (8001dd0 <HAL_RCC_OscConfig+0x270>)
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cfa:	f7ff fbc1 	bl	8001480 <HAL_GetTick>
 8001cfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d00:	e008      	b.n	8001d14 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d02:	f7ff fbbd 	bl	8001480 <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d901      	bls.n	8001d14 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d10:	2303      	movs	r3, #3
 8001d12:	e19b      	b.n	800204c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d14:	4b2d      	ldr	r3, [pc, #180]	; (8001dcc <HAL_RCC_OscConfig+0x26c>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0302 	and.w	r3, r3, #2
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d0f0      	beq.n	8001d02 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d20:	4b2a      	ldr	r3, [pc, #168]	; (8001dcc <HAL_RCC_OscConfig+0x26c>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	695b      	ldr	r3, [r3, #20]
 8001d2c:	00db      	lsls	r3, r3, #3
 8001d2e:	4927      	ldr	r1, [pc, #156]	; (8001dcc <HAL_RCC_OscConfig+0x26c>)
 8001d30:	4313      	orrs	r3, r2
 8001d32:	600b      	str	r3, [r1, #0]
 8001d34:	e015      	b.n	8001d62 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d36:	4b26      	ldr	r3, [pc, #152]	; (8001dd0 <HAL_RCC_OscConfig+0x270>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d3c:	f7ff fba0 	bl	8001480 <HAL_GetTick>
 8001d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d42:	e008      	b.n	8001d56 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d44:	f7ff fb9c 	bl	8001480 <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e17a      	b.n	800204c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d56:	4b1d      	ldr	r3, [pc, #116]	; (8001dcc <HAL_RCC_OscConfig+0x26c>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0302 	and.w	r3, r3, #2
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d1f0      	bne.n	8001d44 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0308 	and.w	r3, r3, #8
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d03a      	beq.n	8001de4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	699b      	ldr	r3, [r3, #24]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d019      	beq.n	8001daa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d76:	4b17      	ldr	r3, [pc, #92]	; (8001dd4 <HAL_RCC_OscConfig+0x274>)
 8001d78:	2201      	movs	r2, #1
 8001d7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d7c:	f7ff fb80 	bl	8001480 <HAL_GetTick>
 8001d80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d82:	e008      	b.n	8001d96 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d84:	f7ff fb7c 	bl	8001480 <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e15a      	b.n	800204c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d96:	4b0d      	ldr	r3, [pc, #52]	; (8001dcc <HAL_RCC_OscConfig+0x26c>)
 8001d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d0f0      	beq.n	8001d84 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001da2:	2001      	movs	r0, #1
 8001da4:	f000 fad8 	bl	8002358 <RCC_Delay>
 8001da8:	e01c      	b.n	8001de4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001daa:	4b0a      	ldr	r3, [pc, #40]	; (8001dd4 <HAL_RCC_OscConfig+0x274>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001db0:	f7ff fb66 	bl	8001480 <HAL_GetTick>
 8001db4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001db6:	e00f      	b.n	8001dd8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001db8:	f7ff fb62 	bl	8001480 <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d908      	bls.n	8001dd8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e140      	b.n	800204c <HAL_RCC_OscConfig+0x4ec>
 8001dca:	bf00      	nop
 8001dcc:	40021000 	.word	0x40021000
 8001dd0:	42420000 	.word	0x42420000
 8001dd4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dd8:	4b9e      	ldr	r3, [pc, #632]	; (8002054 <HAL_RCC_OscConfig+0x4f4>)
 8001dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ddc:	f003 0302 	and.w	r3, r3, #2
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d1e9      	bne.n	8001db8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0304 	and.w	r3, r3, #4
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	f000 80a6 	beq.w	8001f3e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001df2:	2300      	movs	r3, #0
 8001df4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001df6:	4b97      	ldr	r3, [pc, #604]	; (8002054 <HAL_RCC_OscConfig+0x4f4>)
 8001df8:	69db      	ldr	r3, [r3, #28]
 8001dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d10d      	bne.n	8001e1e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e02:	4b94      	ldr	r3, [pc, #592]	; (8002054 <HAL_RCC_OscConfig+0x4f4>)
 8001e04:	69db      	ldr	r3, [r3, #28]
 8001e06:	4a93      	ldr	r2, [pc, #588]	; (8002054 <HAL_RCC_OscConfig+0x4f4>)
 8001e08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e0c:	61d3      	str	r3, [r2, #28]
 8001e0e:	4b91      	ldr	r3, [pc, #580]	; (8002054 <HAL_RCC_OscConfig+0x4f4>)
 8001e10:	69db      	ldr	r3, [r3, #28]
 8001e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e16:	60bb      	str	r3, [r7, #8]
 8001e18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e1e:	4b8e      	ldr	r3, [pc, #568]	; (8002058 <HAL_RCC_OscConfig+0x4f8>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d118      	bne.n	8001e5c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e2a:	4b8b      	ldr	r3, [pc, #556]	; (8002058 <HAL_RCC_OscConfig+0x4f8>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a8a      	ldr	r2, [pc, #552]	; (8002058 <HAL_RCC_OscConfig+0x4f8>)
 8001e30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e36:	f7ff fb23 	bl	8001480 <HAL_GetTick>
 8001e3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e3c:	e008      	b.n	8001e50 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e3e:	f7ff fb1f 	bl	8001480 <HAL_GetTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	2b64      	cmp	r3, #100	; 0x64
 8001e4a:	d901      	bls.n	8001e50 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e0fd      	b.n	800204c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e50:	4b81      	ldr	r3, [pc, #516]	; (8002058 <HAL_RCC_OscConfig+0x4f8>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d0f0      	beq.n	8001e3e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d106      	bne.n	8001e72 <HAL_RCC_OscConfig+0x312>
 8001e64:	4b7b      	ldr	r3, [pc, #492]	; (8002054 <HAL_RCC_OscConfig+0x4f4>)
 8001e66:	6a1b      	ldr	r3, [r3, #32]
 8001e68:	4a7a      	ldr	r2, [pc, #488]	; (8002054 <HAL_RCC_OscConfig+0x4f4>)
 8001e6a:	f043 0301 	orr.w	r3, r3, #1
 8001e6e:	6213      	str	r3, [r2, #32]
 8001e70:	e02d      	b.n	8001ece <HAL_RCC_OscConfig+0x36e>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d10c      	bne.n	8001e94 <HAL_RCC_OscConfig+0x334>
 8001e7a:	4b76      	ldr	r3, [pc, #472]	; (8002054 <HAL_RCC_OscConfig+0x4f4>)
 8001e7c:	6a1b      	ldr	r3, [r3, #32]
 8001e7e:	4a75      	ldr	r2, [pc, #468]	; (8002054 <HAL_RCC_OscConfig+0x4f4>)
 8001e80:	f023 0301 	bic.w	r3, r3, #1
 8001e84:	6213      	str	r3, [r2, #32]
 8001e86:	4b73      	ldr	r3, [pc, #460]	; (8002054 <HAL_RCC_OscConfig+0x4f4>)
 8001e88:	6a1b      	ldr	r3, [r3, #32]
 8001e8a:	4a72      	ldr	r2, [pc, #456]	; (8002054 <HAL_RCC_OscConfig+0x4f4>)
 8001e8c:	f023 0304 	bic.w	r3, r3, #4
 8001e90:	6213      	str	r3, [r2, #32]
 8001e92:	e01c      	b.n	8001ece <HAL_RCC_OscConfig+0x36e>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	2b05      	cmp	r3, #5
 8001e9a:	d10c      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x356>
 8001e9c:	4b6d      	ldr	r3, [pc, #436]	; (8002054 <HAL_RCC_OscConfig+0x4f4>)
 8001e9e:	6a1b      	ldr	r3, [r3, #32]
 8001ea0:	4a6c      	ldr	r2, [pc, #432]	; (8002054 <HAL_RCC_OscConfig+0x4f4>)
 8001ea2:	f043 0304 	orr.w	r3, r3, #4
 8001ea6:	6213      	str	r3, [r2, #32]
 8001ea8:	4b6a      	ldr	r3, [pc, #424]	; (8002054 <HAL_RCC_OscConfig+0x4f4>)
 8001eaa:	6a1b      	ldr	r3, [r3, #32]
 8001eac:	4a69      	ldr	r2, [pc, #420]	; (8002054 <HAL_RCC_OscConfig+0x4f4>)
 8001eae:	f043 0301 	orr.w	r3, r3, #1
 8001eb2:	6213      	str	r3, [r2, #32]
 8001eb4:	e00b      	b.n	8001ece <HAL_RCC_OscConfig+0x36e>
 8001eb6:	4b67      	ldr	r3, [pc, #412]	; (8002054 <HAL_RCC_OscConfig+0x4f4>)
 8001eb8:	6a1b      	ldr	r3, [r3, #32]
 8001eba:	4a66      	ldr	r2, [pc, #408]	; (8002054 <HAL_RCC_OscConfig+0x4f4>)
 8001ebc:	f023 0301 	bic.w	r3, r3, #1
 8001ec0:	6213      	str	r3, [r2, #32]
 8001ec2:	4b64      	ldr	r3, [pc, #400]	; (8002054 <HAL_RCC_OscConfig+0x4f4>)
 8001ec4:	6a1b      	ldr	r3, [r3, #32]
 8001ec6:	4a63      	ldr	r2, [pc, #396]	; (8002054 <HAL_RCC_OscConfig+0x4f4>)
 8001ec8:	f023 0304 	bic.w	r3, r3, #4
 8001ecc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d015      	beq.n	8001f02 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ed6:	f7ff fad3 	bl	8001480 <HAL_GetTick>
 8001eda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001edc:	e00a      	b.n	8001ef4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ede:	f7ff facf 	bl	8001480 <HAL_GetTick>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d901      	bls.n	8001ef4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	e0ab      	b.n	800204c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ef4:	4b57      	ldr	r3, [pc, #348]	; (8002054 <HAL_RCC_OscConfig+0x4f4>)
 8001ef6:	6a1b      	ldr	r3, [r3, #32]
 8001ef8:	f003 0302 	and.w	r3, r3, #2
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d0ee      	beq.n	8001ede <HAL_RCC_OscConfig+0x37e>
 8001f00:	e014      	b.n	8001f2c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f02:	f7ff fabd 	bl	8001480 <HAL_GetTick>
 8001f06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f08:	e00a      	b.n	8001f20 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f0a:	f7ff fab9 	bl	8001480 <HAL_GetTick>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d901      	bls.n	8001f20 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	e095      	b.n	800204c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f20:	4b4c      	ldr	r3, [pc, #304]	; (8002054 <HAL_RCC_OscConfig+0x4f4>)
 8001f22:	6a1b      	ldr	r3, [r3, #32]
 8001f24:	f003 0302 	and.w	r3, r3, #2
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d1ee      	bne.n	8001f0a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f2c:	7dfb      	ldrb	r3, [r7, #23]
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d105      	bne.n	8001f3e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f32:	4b48      	ldr	r3, [pc, #288]	; (8002054 <HAL_RCC_OscConfig+0x4f4>)
 8001f34:	69db      	ldr	r3, [r3, #28]
 8001f36:	4a47      	ldr	r2, [pc, #284]	; (8002054 <HAL_RCC_OscConfig+0x4f4>)
 8001f38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f3c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	69db      	ldr	r3, [r3, #28]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	f000 8081 	beq.w	800204a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f48:	4b42      	ldr	r3, [pc, #264]	; (8002054 <HAL_RCC_OscConfig+0x4f4>)
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f003 030c 	and.w	r3, r3, #12
 8001f50:	2b08      	cmp	r3, #8
 8001f52:	d061      	beq.n	8002018 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	69db      	ldr	r3, [r3, #28]
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d146      	bne.n	8001fea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f5c:	4b3f      	ldr	r3, [pc, #252]	; (800205c <HAL_RCC_OscConfig+0x4fc>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f62:	f7ff fa8d 	bl	8001480 <HAL_GetTick>
 8001f66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f68:	e008      	b.n	8001f7c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f6a:	f7ff fa89 	bl	8001480 <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d901      	bls.n	8001f7c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e067      	b.n	800204c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f7c:	4b35      	ldr	r3, [pc, #212]	; (8002054 <HAL_RCC_OscConfig+0x4f4>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d1f0      	bne.n	8001f6a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6a1b      	ldr	r3, [r3, #32]
 8001f8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f90:	d108      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f92:	4b30      	ldr	r3, [pc, #192]	; (8002054 <HAL_RCC_OscConfig+0x4f4>)
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	492d      	ldr	r1, [pc, #180]	; (8002054 <HAL_RCC_OscConfig+0x4f4>)
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fa4:	4b2b      	ldr	r3, [pc, #172]	; (8002054 <HAL_RCC_OscConfig+0x4f4>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6a19      	ldr	r1, [r3, #32]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb4:	430b      	orrs	r3, r1
 8001fb6:	4927      	ldr	r1, [pc, #156]	; (8002054 <HAL_RCC_OscConfig+0x4f4>)
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fbc:	4b27      	ldr	r3, [pc, #156]	; (800205c <HAL_RCC_OscConfig+0x4fc>)
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc2:	f7ff fa5d 	bl	8001480 <HAL_GetTick>
 8001fc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fc8:	e008      	b.n	8001fdc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fca:	f7ff fa59 	bl	8001480 <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d901      	bls.n	8001fdc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	e037      	b.n	800204c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fdc:	4b1d      	ldr	r3, [pc, #116]	; (8002054 <HAL_RCC_OscConfig+0x4f4>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d0f0      	beq.n	8001fca <HAL_RCC_OscConfig+0x46a>
 8001fe8:	e02f      	b.n	800204a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fea:	4b1c      	ldr	r3, [pc, #112]	; (800205c <HAL_RCC_OscConfig+0x4fc>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff0:	f7ff fa46 	bl	8001480 <HAL_GetTick>
 8001ff4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ff6:	e008      	b.n	800200a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ff8:	f7ff fa42 	bl	8001480 <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	2b02      	cmp	r3, #2
 8002004:	d901      	bls.n	800200a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e020      	b.n	800204c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800200a:	4b12      	ldr	r3, [pc, #72]	; (8002054 <HAL_RCC_OscConfig+0x4f4>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d1f0      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x498>
 8002016:	e018      	b.n	800204a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	69db      	ldr	r3, [r3, #28]
 800201c:	2b01      	cmp	r3, #1
 800201e:	d101      	bne.n	8002024 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e013      	b.n	800204c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002024:	4b0b      	ldr	r3, [pc, #44]	; (8002054 <HAL_RCC_OscConfig+0x4f4>)
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a1b      	ldr	r3, [r3, #32]
 8002034:	429a      	cmp	r2, r3
 8002036:	d106      	bne.n	8002046 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002042:	429a      	cmp	r2, r3
 8002044:	d001      	beq.n	800204a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e000      	b.n	800204c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800204a:	2300      	movs	r3, #0
}
 800204c:	4618      	mov	r0, r3
 800204e:	3718      	adds	r7, #24
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	40021000 	.word	0x40021000
 8002058:	40007000 	.word	0x40007000
 800205c:	42420060 	.word	0x42420060

08002060 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d101      	bne.n	8002074 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e0d0      	b.n	8002216 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002074:	4b6a      	ldr	r3, [pc, #424]	; (8002220 <HAL_RCC_ClockConfig+0x1c0>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0307 	and.w	r3, r3, #7
 800207c:	683a      	ldr	r2, [r7, #0]
 800207e:	429a      	cmp	r2, r3
 8002080:	d910      	bls.n	80020a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002082:	4b67      	ldr	r3, [pc, #412]	; (8002220 <HAL_RCC_ClockConfig+0x1c0>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f023 0207 	bic.w	r2, r3, #7
 800208a:	4965      	ldr	r1, [pc, #404]	; (8002220 <HAL_RCC_ClockConfig+0x1c0>)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	4313      	orrs	r3, r2
 8002090:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002092:	4b63      	ldr	r3, [pc, #396]	; (8002220 <HAL_RCC_ClockConfig+0x1c0>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0307 	and.w	r3, r3, #7
 800209a:	683a      	ldr	r2, [r7, #0]
 800209c:	429a      	cmp	r2, r3
 800209e:	d001      	beq.n	80020a4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e0b8      	b.n	8002216 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0302 	and.w	r3, r3, #2
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d020      	beq.n	80020f2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0304 	and.w	r3, r3, #4
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d005      	beq.n	80020c8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020bc:	4b59      	ldr	r3, [pc, #356]	; (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	4a58      	ldr	r2, [pc, #352]	; (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 80020c2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020c6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0308 	and.w	r3, r3, #8
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d005      	beq.n	80020e0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020d4:	4b53      	ldr	r3, [pc, #332]	; (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	4a52      	ldr	r2, [pc, #328]	; (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 80020da:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80020de:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020e0:	4b50      	ldr	r3, [pc, #320]	; (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	494d      	ldr	r1, [pc, #308]	; (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 80020ee:	4313      	orrs	r3, r2
 80020f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0301 	and.w	r3, r3, #1
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d040      	beq.n	8002180 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	2b01      	cmp	r3, #1
 8002104:	d107      	bne.n	8002116 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002106:	4b47      	ldr	r3, [pc, #284]	; (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d115      	bne.n	800213e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e07f      	b.n	8002216 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	2b02      	cmp	r3, #2
 800211c:	d107      	bne.n	800212e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800211e:	4b41      	ldr	r3, [pc, #260]	; (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d109      	bne.n	800213e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e073      	b.n	8002216 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800212e:	4b3d      	ldr	r3, [pc, #244]	; (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0302 	and.w	r3, r3, #2
 8002136:	2b00      	cmp	r3, #0
 8002138:	d101      	bne.n	800213e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e06b      	b.n	8002216 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800213e:	4b39      	ldr	r3, [pc, #228]	; (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f023 0203 	bic.w	r2, r3, #3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	4936      	ldr	r1, [pc, #216]	; (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 800214c:	4313      	orrs	r3, r2
 800214e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002150:	f7ff f996 	bl	8001480 <HAL_GetTick>
 8002154:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002156:	e00a      	b.n	800216e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002158:	f7ff f992 	bl	8001480 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	f241 3288 	movw	r2, #5000	; 0x1388
 8002166:	4293      	cmp	r3, r2
 8002168:	d901      	bls.n	800216e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e053      	b.n	8002216 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800216e:	4b2d      	ldr	r3, [pc, #180]	; (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f003 020c 	and.w	r2, r3, #12
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	429a      	cmp	r2, r3
 800217e:	d1eb      	bne.n	8002158 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002180:	4b27      	ldr	r3, [pc, #156]	; (8002220 <HAL_RCC_ClockConfig+0x1c0>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0307 	and.w	r3, r3, #7
 8002188:	683a      	ldr	r2, [r7, #0]
 800218a:	429a      	cmp	r2, r3
 800218c:	d210      	bcs.n	80021b0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800218e:	4b24      	ldr	r3, [pc, #144]	; (8002220 <HAL_RCC_ClockConfig+0x1c0>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f023 0207 	bic.w	r2, r3, #7
 8002196:	4922      	ldr	r1, [pc, #136]	; (8002220 <HAL_RCC_ClockConfig+0x1c0>)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	4313      	orrs	r3, r2
 800219c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800219e:	4b20      	ldr	r3, [pc, #128]	; (8002220 <HAL_RCC_ClockConfig+0x1c0>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0307 	and.w	r3, r3, #7
 80021a6:	683a      	ldr	r2, [r7, #0]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d001      	beq.n	80021b0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e032      	b.n	8002216 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0304 	and.w	r3, r3, #4
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d008      	beq.n	80021ce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021bc:	4b19      	ldr	r3, [pc, #100]	; (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	4916      	ldr	r1, [pc, #88]	; (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0308 	and.w	r3, r3, #8
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d009      	beq.n	80021ee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021da:	4b12      	ldr	r3, [pc, #72]	; (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	691b      	ldr	r3, [r3, #16]
 80021e6:	00db      	lsls	r3, r3, #3
 80021e8:	490e      	ldr	r1, [pc, #56]	; (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 80021ea:	4313      	orrs	r3, r2
 80021ec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021ee:	f000 f821 	bl	8002234 <HAL_RCC_GetSysClockFreq>
 80021f2:	4602      	mov	r2, r0
 80021f4:	4b0b      	ldr	r3, [pc, #44]	; (8002224 <HAL_RCC_ClockConfig+0x1c4>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	091b      	lsrs	r3, r3, #4
 80021fa:	f003 030f 	and.w	r3, r3, #15
 80021fe:	490a      	ldr	r1, [pc, #40]	; (8002228 <HAL_RCC_ClockConfig+0x1c8>)
 8002200:	5ccb      	ldrb	r3, [r1, r3]
 8002202:	fa22 f303 	lsr.w	r3, r2, r3
 8002206:	4a09      	ldr	r2, [pc, #36]	; (800222c <HAL_RCC_ClockConfig+0x1cc>)
 8002208:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800220a:	4b09      	ldr	r3, [pc, #36]	; (8002230 <HAL_RCC_ClockConfig+0x1d0>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4618      	mov	r0, r3
 8002210:	f7ff f8f4 	bl	80013fc <HAL_InitTick>

  return HAL_OK;
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3710      	adds	r7, #16
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	40022000 	.word	0x40022000
 8002224:	40021000 	.word	0x40021000
 8002228:	080048fc 	.word	0x080048fc
 800222c:	20000368 	.word	0x20000368
 8002230:	2000036c 	.word	0x2000036c

08002234 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002234:	b490      	push	{r4, r7}
 8002236:	b08a      	sub	sp, #40	; 0x28
 8002238:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800223a:	4b2a      	ldr	r3, [pc, #168]	; (80022e4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800223c:	1d3c      	adds	r4, r7, #4
 800223e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002240:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002244:	f240 2301 	movw	r3, #513	; 0x201
 8002248:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800224a:	2300      	movs	r3, #0
 800224c:	61fb      	str	r3, [r7, #28]
 800224e:	2300      	movs	r3, #0
 8002250:	61bb      	str	r3, [r7, #24]
 8002252:	2300      	movs	r3, #0
 8002254:	627b      	str	r3, [r7, #36]	; 0x24
 8002256:	2300      	movs	r3, #0
 8002258:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800225a:	2300      	movs	r3, #0
 800225c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800225e:	4b22      	ldr	r3, [pc, #136]	; (80022e8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	f003 030c 	and.w	r3, r3, #12
 800226a:	2b04      	cmp	r3, #4
 800226c:	d002      	beq.n	8002274 <HAL_RCC_GetSysClockFreq+0x40>
 800226e:	2b08      	cmp	r3, #8
 8002270:	d003      	beq.n	800227a <HAL_RCC_GetSysClockFreq+0x46>
 8002272:	e02d      	b.n	80022d0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002274:	4b1d      	ldr	r3, [pc, #116]	; (80022ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8002276:	623b      	str	r3, [r7, #32]
      break;
 8002278:	e02d      	b.n	80022d6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	0c9b      	lsrs	r3, r3, #18
 800227e:	f003 030f 	and.w	r3, r3, #15
 8002282:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002286:	4413      	add	r3, r2
 8002288:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800228c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d013      	beq.n	80022c0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002298:	4b13      	ldr	r3, [pc, #76]	; (80022e8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	0c5b      	lsrs	r3, r3, #17
 800229e:	f003 0301 	and.w	r3, r3, #1
 80022a2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80022a6:	4413      	add	r3, r2
 80022a8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80022ac:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	4a0e      	ldr	r2, [pc, #56]	; (80022ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80022b2:	fb02 f203 	mul.w	r2, r2, r3
 80022b6:	69bb      	ldr	r3, [r7, #24]
 80022b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80022bc:	627b      	str	r3, [r7, #36]	; 0x24
 80022be:	e004      	b.n	80022ca <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	4a0b      	ldr	r2, [pc, #44]	; (80022f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80022c4:	fb02 f303 	mul.w	r3, r2, r3
 80022c8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80022ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022cc:	623b      	str	r3, [r7, #32]
      break;
 80022ce:	e002      	b.n	80022d6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022d0:	4b06      	ldr	r3, [pc, #24]	; (80022ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80022d2:	623b      	str	r3, [r7, #32]
      break;
 80022d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022d6:	6a3b      	ldr	r3, [r7, #32]
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3728      	adds	r7, #40	; 0x28
 80022dc:	46bd      	mov	sp, r7
 80022de:	bc90      	pop	{r4, r7}
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	080048ec 	.word	0x080048ec
 80022e8:	40021000 	.word	0x40021000
 80022ec:	007a1200 	.word	0x007a1200
 80022f0:	003d0900 	.word	0x003d0900

080022f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022f8:	4b02      	ldr	r3, [pc, #8]	; (8002304 <HAL_RCC_GetHCLKFreq+0x10>)
 80022fa:	681b      	ldr	r3, [r3, #0]
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	46bd      	mov	sp, r7
 8002300:	bc80      	pop	{r7}
 8002302:	4770      	bx	lr
 8002304:	20000368 	.word	0x20000368

08002308 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800230c:	f7ff fff2 	bl	80022f4 <HAL_RCC_GetHCLKFreq>
 8002310:	4602      	mov	r2, r0
 8002312:	4b05      	ldr	r3, [pc, #20]	; (8002328 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	0a1b      	lsrs	r3, r3, #8
 8002318:	f003 0307 	and.w	r3, r3, #7
 800231c:	4903      	ldr	r1, [pc, #12]	; (800232c <HAL_RCC_GetPCLK1Freq+0x24>)
 800231e:	5ccb      	ldrb	r3, [r1, r3]
 8002320:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002324:	4618      	mov	r0, r3
 8002326:	bd80      	pop	{r7, pc}
 8002328:	40021000 	.word	0x40021000
 800232c:	0800490c 	.word	0x0800490c

08002330 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002334:	f7ff ffde 	bl	80022f4 <HAL_RCC_GetHCLKFreq>
 8002338:	4602      	mov	r2, r0
 800233a:	4b05      	ldr	r3, [pc, #20]	; (8002350 <HAL_RCC_GetPCLK2Freq+0x20>)
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	0adb      	lsrs	r3, r3, #11
 8002340:	f003 0307 	and.w	r3, r3, #7
 8002344:	4903      	ldr	r1, [pc, #12]	; (8002354 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002346:	5ccb      	ldrb	r3, [r1, r3]
 8002348:	fa22 f303 	lsr.w	r3, r2, r3
}
 800234c:	4618      	mov	r0, r3
 800234e:	bd80      	pop	{r7, pc}
 8002350:	40021000 	.word	0x40021000
 8002354:	0800490c 	.word	0x0800490c

08002358 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002358:	b480      	push	{r7}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002360:	4b0a      	ldr	r3, [pc, #40]	; (800238c <RCC_Delay+0x34>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a0a      	ldr	r2, [pc, #40]	; (8002390 <RCC_Delay+0x38>)
 8002366:	fba2 2303 	umull	r2, r3, r2, r3
 800236a:	0a5b      	lsrs	r3, r3, #9
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	fb02 f303 	mul.w	r3, r2, r3
 8002372:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002374:	bf00      	nop
  }
  while (Delay --);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	1e5a      	subs	r2, r3, #1
 800237a:	60fa      	str	r2, [r7, #12]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d1f9      	bne.n	8002374 <RCC_Delay+0x1c>
}
 8002380:	bf00      	nop
 8002382:	bf00      	nop
 8002384:	3714      	adds	r7, #20
 8002386:	46bd      	mov	sp, r7
 8002388:	bc80      	pop	{r7}
 800238a:	4770      	bx	lr
 800238c:	20000368 	.word	0x20000368
 8002390:	10624dd3 	.word	0x10624dd3

08002394 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d101      	bne.n	80023a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e041      	b.n	800242a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d106      	bne.n	80023c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f7fe fdca 	bl	8000f54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2202      	movs	r2, #2
 80023c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	3304      	adds	r3, #4
 80023d0:	4619      	mov	r1, r3
 80023d2:	4610      	mov	r0, r2
 80023d4:	f000 fa9e 	bl	8002914 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2201      	movs	r2, #1
 80023dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2201      	movs	r2, #1
 80023e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2201      	movs	r2, #1
 80023ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2201      	movs	r2, #1
 80023fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2201      	movs	r2, #1
 800240c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2201      	movs	r2, #1
 8002414:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2201      	movs	r2, #1
 8002424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002428:	2300      	movs	r3, #0
}
 800242a:	4618      	mov	r0, r3
 800242c:	3708      	adds	r7, #8
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
	...

08002434 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002434:	b480      	push	{r7}
 8002436:	b085      	sub	sp, #20
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002442:	b2db      	uxtb	r3, r3
 8002444:	2b01      	cmp	r3, #1
 8002446:	d001      	beq.n	800244c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e03a      	b.n	80024c2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2202      	movs	r2, #2
 8002450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	68da      	ldr	r2, [r3, #12]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f042 0201 	orr.w	r2, r2, #1
 8002462:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a18      	ldr	r2, [pc, #96]	; (80024cc <HAL_TIM_Base_Start_IT+0x98>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d00e      	beq.n	800248c <HAL_TIM_Base_Start_IT+0x58>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002476:	d009      	beq.n	800248c <HAL_TIM_Base_Start_IT+0x58>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a14      	ldr	r2, [pc, #80]	; (80024d0 <HAL_TIM_Base_Start_IT+0x9c>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d004      	beq.n	800248c <HAL_TIM_Base_Start_IT+0x58>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a13      	ldr	r2, [pc, #76]	; (80024d4 <HAL_TIM_Base_Start_IT+0xa0>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d111      	bne.n	80024b0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f003 0307 	and.w	r3, r3, #7
 8002496:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2b06      	cmp	r3, #6
 800249c:	d010      	beq.n	80024c0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f042 0201 	orr.w	r2, r2, #1
 80024ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024ae:	e007      	b.n	80024c0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f042 0201 	orr.w	r2, r2, #1
 80024be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3714      	adds	r7, #20
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bc80      	pop	{r7}
 80024ca:	4770      	bx	lr
 80024cc:	40012c00 	.word	0x40012c00
 80024d0:	40000400 	.word	0x40000400
 80024d4:	40000800 	.word	0x40000800

080024d8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	68da      	ldr	r2, [r3, #12]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f022 0201 	bic.w	r2, r2, #1
 80024ee:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	6a1a      	ldr	r2, [r3, #32]
 80024f6:	f241 1311 	movw	r3, #4369	; 0x1111
 80024fa:	4013      	ands	r3, r2
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d10f      	bne.n	8002520 <HAL_TIM_Base_Stop_IT+0x48>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	6a1a      	ldr	r2, [r3, #32]
 8002506:	f240 4344 	movw	r3, #1092	; 0x444
 800250a:	4013      	ands	r3, r2
 800250c:	2b00      	cmp	r3, #0
 800250e:	d107      	bne.n	8002520 <HAL_TIM_Base_Stop_IT+0x48>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f022 0201 	bic.w	r2, r2, #1
 800251e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	370c      	adds	r7, #12
 800252e:	46bd      	mov	sp, r7
 8002530:	bc80      	pop	{r7}
 8002532:	4770      	bx	lr

08002534 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	691b      	ldr	r3, [r3, #16]
 8002542:	f003 0302 	and.w	r3, r3, #2
 8002546:	2b02      	cmp	r3, #2
 8002548:	d122      	bne.n	8002590 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	f003 0302 	and.w	r3, r3, #2
 8002554:	2b02      	cmp	r3, #2
 8002556:	d11b      	bne.n	8002590 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f06f 0202 	mvn.w	r2, #2
 8002560:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2201      	movs	r2, #1
 8002566:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	699b      	ldr	r3, [r3, #24]
 800256e:	f003 0303 	and.w	r3, r3, #3
 8002572:	2b00      	cmp	r3, #0
 8002574:	d003      	beq.n	800257e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f000 f9b1 	bl	80028de <HAL_TIM_IC_CaptureCallback>
 800257c:	e005      	b.n	800258a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f000 f9a4 	bl	80028cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f000 f9b3 	bl	80028f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	691b      	ldr	r3, [r3, #16]
 8002596:	f003 0304 	and.w	r3, r3, #4
 800259a:	2b04      	cmp	r3, #4
 800259c:	d122      	bne.n	80025e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	f003 0304 	and.w	r3, r3, #4
 80025a8:	2b04      	cmp	r3, #4
 80025aa:	d11b      	bne.n	80025e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f06f 0204 	mvn.w	r2, #4
 80025b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2202      	movs	r2, #2
 80025ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	699b      	ldr	r3, [r3, #24]
 80025c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d003      	beq.n	80025d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f000 f987 	bl	80028de <HAL_TIM_IC_CaptureCallback>
 80025d0:	e005      	b.n	80025de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f000 f97a 	bl	80028cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f000 f989 	bl	80028f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	691b      	ldr	r3, [r3, #16]
 80025ea:	f003 0308 	and.w	r3, r3, #8
 80025ee:	2b08      	cmp	r3, #8
 80025f0:	d122      	bne.n	8002638 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	f003 0308 	and.w	r3, r3, #8
 80025fc:	2b08      	cmp	r3, #8
 80025fe:	d11b      	bne.n	8002638 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f06f 0208 	mvn.w	r2, #8
 8002608:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2204      	movs	r2, #4
 800260e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	69db      	ldr	r3, [r3, #28]
 8002616:	f003 0303 	and.w	r3, r3, #3
 800261a:	2b00      	cmp	r3, #0
 800261c:	d003      	beq.n	8002626 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f000 f95d 	bl	80028de <HAL_TIM_IC_CaptureCallback>
 8002624:	e005      	b.n	8002632 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f000 f950 	bl	80028cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f000 f95f 	bl	80028f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	f003 0310 	and.w	r3, r3, #16
 8002642:	2b10      	cmp	r3, #16
 8002644:	d122      	bne.n	800268c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	f003 0310 	and.w	r3, r3, #16
 8002650:	2b10      	cmp	r3, #16
 8002652:	d11b      	bne.n	800268c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f06f 0210 	mvn.w	r2, #16
 800265c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2208      	movs	r2, #8
 8002662:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	69db      	ldr	r3, [r3, #28]
 800266a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800266e:	2b00      	cmp	r3, #0
 8002670:	d003      	beq.n	800267a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f000 f933 	bl	80028de <HAL_TIM_IC_CaptureCallback>
 8002678:	e005      	b.n	8002686 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f000 f926 	bl	80028cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f000 f935 	bl	80028f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	f003 0301 	and.w	r3, r3, #1
 8002696:	2b01      	cmp	r3, #1
 8002698:	d10e      	bne.n	80026b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	f003 0301 	and.w	r3, r3, #1
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d107      	bne.n	80026b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f06f 0201 	mvn.w	r2, #1
 80026b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f7fe fc0c 	bl	8000ed0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	691b      	ldr	r3, [r3, #16]
 80026be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026c2:	2b80      	cmp	r3, #128	; 0x80
 80026c4:	d10e      	bne.n	80026e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026d0:	2b80      	cmp	r3, #128	; 0x80
 80026d2:	d107      	bne.n	80026e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80026dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f000 fa77 	bl	8002bd2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	691b      	ldr	r3, [r3, #16]
 80026ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ee:	2b40      	cmp	r3, #64	; 0x40
 80026f0:	d10e      	bne.n	8002710 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026fc:	2b40      	cmp	r3, #64	; 0x40
 80026fe:	d107      	bne.n	8002710 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002708:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f000 f8f9 	bl	8002902 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	f003 0320 	and.w	r3, r3, #32
 800271a:	2b20      	cmp	r3, #32
 800271c:	d10e      	bne.n	800273c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	f003 0320 	and.w	r3, r3, #32
 8002728:	2b20      	cmp	r3, #32
 800272a:	d107      	bne.n	800273c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f06f 0220 	mvn.w	r2, #32
 8002734:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f000 fa42 	bl	8002bc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800273c:	bf00      	nop
 800273e:	3708      	adds	r7, #8
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}

08002744 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002754:	2b01      	cmp	r3, #1
 8002756:	d101      	bne.n	800275c <HAL_TIM_ConfigClockSource+0x18>
 8002758:	2302      	movs	r3, #2
 800275a:	e0b3      	b.n	80028c4 <HAL_TIM_ConfigClockSource+0x180>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2201      	movs	r2, #1
 8002760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2202      	movs	r2, #2
 8002768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800277a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002782:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	68fa      	ldr	r2, [r7, #12]
 800278a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002794:	d03e      	beq.n	8002814 <HAL_TIM_ConfigClockSource+0xd0>
 8002796:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800279a:	f200 8087 	bhi.w	80028ac <HAL_TIM_ConfigClockSource+0x168>
 800279e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027a2:	f000 8085 	beq.w	80028b0 <HAL_TIM_ConfigClockSource+0x16c>
 80027a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027aa:	d87f      	bhi.n	80028ac <HAL_TIM_ConfigClockSource+0x168>
 80027ac:	2b70      	cmp	r3, #112	; 0x70
 80027ae:	d01a      	beq.n	80027e6 <HAL_TIM_ConfigClockSource+0xa2>
 80027b0:	2b70      	cmp	r3, #112	; 0x70
 80027b2:	d87b      	bhi.n	80028ac <HAL_TIM_ConfigClockSource+0x168>
 80027b4:	2b60      	cmp	r3, #96	; 0x60
 80027b6:	d050      	beq.n	800285a <HAL_TIM_ConfigClockSource+0x116>
 80027b8:	2b60      	cmp	r3, #96	; 0x60
 80027ba:	d877      	bhi.n	80028ac <HAL_TIM_ConfigClockSource+0x168>
 80027bc:	2b50      	cmp	r3, #80	; 0x50
 80027be:	d03c      	beq.n	800283a <HAL_TIM_ConfigClockSource+0xf6>
 80027c0:	2b50      	cmp	r3, #80	; 0x50
 80027c2:	d873      	bhi.n	80028ac <HAL_TIM_ConfigClockSource+0x168>
 80027c4:	2b40      	cmp	r3, #64	; 0x40
 80027c6:	d058      	beq.n	800287a <HAL_TIM_ConfigClockSource+0x136>
 80027c8:	2b40      	cmp	r3, #64	; 0x40
 80027ca:	d86f      	bhi.n	80028ac <HAL_TIM_ConfigClockSource+0x168>
 80027cc:	2b30      	cmp	r3, #48	; 0x30
 80027ce:	d064      	beq.n	800289a <HAL_TIM_ConfigClockSource+0x156>
 80027d0:	2b30      	cmp	r3, #48	; 0x30
 80027d2:	d86b      	bhi.n	80028ac <HAL_TIM_ConfigClockSource+0x168>
 80027d4:	2b20      	cmp	r3, #32
 80027d6:	d060      	beq.n	800289a <HAL_TIM_ConfigClockSource+0x156>
 80027d8:	2b20      	cmp	r3, #32
 80027da:	d867      	bhi.n	80028ac <HAL_TIM_ConfigClockSource+0x168>
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d05c      	beq.n	800289a <HAL_TIM_ConfigClockSource+0x156>
 80027e0:	2b10      	cmp	r3, #16
 80027e2:	d05a      	beq.n	800289a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80027e4:	e062      	b.n	80028ac <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6818      	ldr	r0, [r3, #0]
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	6899      	ldr	r1, [r3, #8]
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	685a      	ldr	r2, [r3, #4]
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	f000 f966 	bl	8002ac6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002808:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	68fa      	ldr	r2, [r7, #12]
 8002810:	609a      	str	r2, [r3, #8]
      break;
 8002812:	e04e      	b.n	80028b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6818      	ldr	r0, [r3, #0]
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	6899      	ldr	r1, [r3, #8]
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685a      	ldr	r2, [r3, #4]
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	f000 f94f 	bl	8002ac6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	689a      	ldr	r2, [r3, #8]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002836:	609a      	str	r2, [r3, #8]
      break;
 8002838:	e03b      	b.n	80028b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6818      	ldr	r0, [r3, #0]
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	6859      	ldr	r1, [r3, #4]
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	461a      	mov	r2, r3
 8002848:	f000 f8c6 	bl	80029d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2150      	movs	r1, #80	; 0x50
 8002852:	4618      	mov	r0, r3
 8002854:	f000 f91d 	bl	8002a92 <TIM_ITRx_SetConfig>
      break;
 8002858:	e02b      	b.n	80028b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6818      	ldr	r0, [r3, #0]
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	6859      	ldr	r1, [r3, #4]
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	461a      	mov	r2, r3
 8002868:	f000 f8e4 	bl	8002a34 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2160      	movs	r1, #96	; 0x60
 8002872:	4618      	mov	r0, r3
 8002874:	f000 f90d 	bl	8002a92 <TIM_ITRx_SetConfig>
      break;
 8002878:	e01b      	b.n	80028b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6818      	ldr	r0, [r3, #0]
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	6859      	ldr	r1, [r3, #4]
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	461a      	mov	r2, r3
 8002888:	f000 f8a6 	bl	80029d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2140      	movs	r1, #64	; 0x40
 8002892:	4618      	mov	r0, r3
 8002894:	f000 f8fd 	bl	8002a92 <TIM_ITRx_SetConfig>
      break;
 8002898:	e00b      	b.n	80028b2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4619      	mov	r1, r3
 80028a4:	4610      	mov	r0, r2
 80028a6:	f000 f8f4 	bl	8002a92 <TIM_ITRx_SetConfig>
        break;
 80028aa:	e002      	b.n	80028b2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80028ac:	bf00      	nop
 80028ae:	e000      	b.n	80028b2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80028b0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2201      	movs	r2, #1
 80028b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80028c2:	2300      	movs	r3, #0
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3710      	adds	r7, #16
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80028d4:	bf00      	nop
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	bc80      	pop	{r7}
 80028dc:	4770      	bx	lr

080028de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80028de:	b480      	push	{r7}
 80028e0:	b083      	sub	sp, #12
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80028e6:	bf00      	nop
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bc80      	pop	{r7}
 80028ee:	4770      	bx	lr

080028f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80028f8:	bf00      	nop
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bc80      	pop	{r7}
 8002900:	4770      	bx	lr

08002902 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002902:	b480      	push	{r7}
 8002904:	b083      	sub	sp, #12
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800290a:	bf00      	nop
 800290c:	370c      	adds	r7, #12
 800290e:	46bd      	mov	sp, r7
 8002910:	bc80      	pop	{r7}
 8002912:	4770      	bx	lr

08002914 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002914:	b480      	push	{r7}
 8002916:	b085      	sub	sp, #20
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	4a29      	ldr	r2, [pc, #164]	; (80029cc <TIM_Base_SetConfig+0xb8>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d00b      	beq.n	8002944 <TIM_Base_SetConfig+0x30>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002932:	d007      	beq.n	8002944 <TIM_Base_SetConfig+0x30>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	4a26      	ldr	r2, [pc, #152]	; (80029d0 <TIM_Base_SetConfig+0xbc>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d003      	beq.n	8002944 <TIM_Base_SetConfig+0x30>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	4a25      	ldr	r2, [pc, #148]	; (80029d4 <TIM_Base_SetConfig+0xc0>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d108      	bne.n	8002956 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800294a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	68fa      	ldr	r2, [r7, #12]
 8002952:	4313      	orrs	r3, r2
 8002954:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a1c      	ldr	r2, [pc, #112]	; (80029cc <TIM_Base_SetConfig+0xb8>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d00b      	beq.n	8002976 <TIM_Base_SetConfig+0x62>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002964:	d007      	beq.n	8002976 <TIM_Base_SetConfig+0x62>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a19      	ldr	r2, [pc, #100]	; (80029d0 <TIM_Base_SetConfig+0xbc>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d003      	beq.n	8002976 <TIM_Base_SetConfig+0x62>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4a18      	ldr	r2, [pc, #96]	; (80029d4 <TIM_Base_SetConfig+0xc0>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d108      	bne.n	8002988 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800297c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	68fa      	ldr	r2, [r7, #12]
 8002984:	4313      	orrs	r3, r2
 8002986:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	695b      	ldr	r3, [r3, #20]
 8002992:	4313      	orrs	r3, r2
 8002994:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	68fa      	ldr	r2, [r7, #12]
 800299a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	689a      	ldr	r2, [r3, #8]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4a07      	ldr	r2, [pc, #28]	; (80029cc <TIM_Base_SetConfig+0xb8>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d103      	bne.n	80029bc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	691a      	ldr	r2, [r3, #16]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	615a      	str	r2, [r3, #20]
}
 80029c2:	bf00      	nop
 80029c4:	3714      	adds	r7, #20
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bc80      	pop	{r7}
 80029ca:	4770      	bx	lr
 80029cc:	40012c00 	.word	0x40012c00
 80029d0:	40000400 	.word	0x40000400
 80029d4:	40000800 	.word	0x40000800

080029d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029d8:	b480      	push	{r7}
 80029da:	b087      	sub	sp, #28
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	60b9      	str	r1, [r7, #8]
 80029e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	6a1b      	ldr	r3, [r3, #32]
 80029e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6a1b      	ldr	r3, [r3, #32]
 80029ee:	f023 0201 	bic.w	r2, r3, #1
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	699b      	ldr	r3, [r3, #24]
 80029fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	011b      	lsls	r3, r3, #4
 8002a08:	693a      	ldr	r2, [r7, #16]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	f023 030a 	bic.w	r3, r3, #10
 8002a14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a16:	697a      	ldr	r2, [r7, #20]
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	693a      	ldr	r2, [r7, #16]
 8002a22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	697a      	ldr	r2, [r7, #20]
 8002a28:	621a      	str	r2, [r3, #32]
}
 8002a2a:	bf00      	nop
 8002a2c:	371c      	adds	r7, #28
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bc80      	pop	{r7}
 8002a32:	4770      	bx	lr

08002a34 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b087      	sub	sp, #28
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	60b9      	str	r1, [r7, #8]
 8002a3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6a1b      	ldr	r3, [r3, #32]
 8002a44:	f023 0210 	bic.w	r2, r3, #16
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	699b      	ldr	r3, [r3, #24]
 8002a50:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	6a1b      	ldr	r3, [r3, #32]
 8002a56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002a5e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	031b      	lsls	r3, r3, #12
 8002a64:	697a      	ldr	r2, [r7, #20]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002a70:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	011b      	lsls	r3, r3, #4
 8002a76:	693a      	ldr	r2, [r7, #16]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	697a      	ldr	r2, [r7, #20]
 8002a80:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	693a      	ldr	r2, [r7, #16]
 8002a86:	621a      	str	r2, [r3, #32]
}
 8002a88:	bf00      	nop
 8002a8a:	371c      	adds	r7, #28
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bc80      	pop	{r7}
 8002a90:	4770      	bx	lr

08002a92 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a92:	b480      	push	{r7}
 8002a94:	b085      	sub	sp, #20
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
 8002a9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aa8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002aaa:	683a      	ldr	r2, [r7, #0]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	f043 0307 	orr.w	r3, r3, #7
 8002ab4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	68fa      	ldr	r2, [r7, #12]
 8002aba:	609a      	str	r2, [r3, #8]
}
 8002abc:	bf00      	nop
 8002abe:	3714      	adds	r7, #20
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bc80      	pop	{r7}
 8002ac4:	4770      	bx	lr

08002ac6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ac6:	b480      	push	{r7}
 8002ac8:	b087      	sub	sp, #28
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	60f8      	str	r0, [r7, #12]
 8002ace:	60b9      	str	r1, [r7, #8]
 8002ad0:	607a      	str	r2, [r7, #4]
 8002ad2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ae0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	021a      	lsls	r2, r3, #8
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	431a      	orrs	r2, r3
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	697a      	ldr	r2, [r7, #20]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	697a      	ldr	r2, [r7, #20]
 8002af8:	609a      	str	r2, [r3, #8]
}
 8002afa:	bf00      	nop
 8002afc:	371c      	adds	r7, #28
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bc80      	pop	{r7}
 8002b02:	4770      	bx	lr

08002b04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b085      	sub	sp, #20
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d101      	bne.n	8002b1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b18:	2302      	movs	r3, #2
 8002b1a:	e046      	b.n	8002baa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2202      	movs	r2, #2
 8002b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	68fa      	ldr	r2, [r7, #12]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	68fa      	ldr	r2, [r7, #12]
 8002b54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a16      	ldr	r2, [pc, #88]	; (8002bb4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d00e      	beq.n	8002b7e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b68:	d009      	beq.n	8002b7e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a12      	ldr	r2, [pc, #72]	; (8002bb8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d004      	beq.n	8002b7e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a10      	ldr	r2, [pc, #64]	; (8002bbc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d10c      	bne.n	8002b98 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	68ba      	ldr	r2, [r7, #8]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	68ba      	ldr	r2, [r7, #8]
 8002b96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3714      	adds	r7, #20
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bc80      	pop	{r7}
 8002bb2:	4770      	bx	lr
 8002bb4:	40012c00 	.word	0x40012c00
 8002bb8:	40000400 	.word	0x40000400
 8002bbc:	40000800 	.word	0x40000800

08002bc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002bc8:	bf00      	nop
 8002bca:	370c      	adds	r7, #12
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bc80      	pop	{r7}
 8002bd0:	4770      	bx	lr

08002bd2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002bd2:	b480      	push	{r7}
 8002bd4:	b083      	sub	sp, #12
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002bda:	bf00      	nop
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bc80      	pop	{r7}
 8002be2:	4770      	bx	lr

08002be4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d101      	bne.n	8002bf6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e03f      	b.n	8002c76 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d106      	bne.n	8002c10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f7fe f9c6 	bl	8000f9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2224      	movs	r2, #36	; 0x24
 8002c14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	68da      	ldr	r2, [r3, #12]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c26:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	f000 fc21 	bl	8003470 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	691a      	ldr	r2, [r3, #16]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	695a      	ldr	r2, [r3, #20]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c4c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	68da      	ldr	r2, [r3, #12]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c5c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2220      	movs	r2, #32
 8002c68:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2220      	movs	r2, #32
 8002c70:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3708      	adds	r7, #8
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}

08002c7e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c7e:	b580      	push	{r7, lr}
 8002c80:	b08a      	sub	sp, #40	; 0x28
 8002c82:	af02      	add	r7, sp, #8
 8002c84:	60f8      	str	r0, [r7, #12]
 8002c86:	60b9      	str	r1, [r7, #8]
 8002c88:	603b      	str	r3, [r7, #0]
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	2b20      	cmp	r3, #32
 8002c9c:	d17c      	bne.n	8002d98 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d002      	beq.n	8002caa <HAL_UART_Transmit+0x2c>
 8002ca4:	88fb      	ldrh	r3, [r7, #6]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d101      	bne.n	8002cae <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e075      	b.n	8002d9a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d101      	bne.n	8002cbc <HAL_UART_Transmit+0x3e>
 8002cb8:	2302      	movs	r3, #2
 8002cba:	e06e      	b.n	8002d9a <HAL_UART_Transmit+0x11c>
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2221      	movs	r2, #33	; 0x21
 8002cce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002cd2:	f7fe fbd5 	bl	8001480 <HAL_GetTick>
 8002cd6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	88fa      	ldrh	r2, [r7, #6]
 8002cdc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	88fa      	ldrh	r2, [r7, #6]
 8002ce2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cec:	d108      	bne.n	8002d00 <HAL_UART_Transmit+0x82>
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d104      	bne.n	8002d00 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	61bb      	str	r3, [r7, #24]
 8002cfe:	e003      	b.n	8002d08 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d04:	2300      	movs	r3, #0
 8002d06:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002d10:	e02a      	b.n	8002d68 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	9300      	str	r3, [sp, #0]
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	2180      	movs	r1, #128	; 0x80
 8002d1c:	68f8      	ldr	r0, [r7, #12]
 8002d1e:	f000 fa45 	bl	80031ac <UART_WaitOnFlagUntilTimeout>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d001      	beq.n	8002d2c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	e036      	b.n	8002d9a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d10b      	bne.n	8002d4a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	881b      	ldrh	r3, [r3, #0]
 8002d36:	461a      	mov	r2, r3
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d40:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	3302      	adds	r3, #2
 8002d46:	61bb      	str	r3, [r7, #24]
 8002d48:	e007      	b.n	8002d5a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	781a      	ldrb	r2, [r3, #0]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	3301      	adds	r3, #1
 8002d58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	3b01      	subs	r3, #1
 8002d62:	b29a      	uxth	r2, r3
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d1cf      	bne.n	8002d12 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	9300      	str	r3, [sp, #0]
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	2140      	movs	r1, #64	; 0x40
 8002d7c:	68f8      	ldr	r0, [r7, #12]
 8002d7e:	f000 fa15 	bl	80031ac <UART_WaitOnFlagUntilTimeout>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d001      	beq.n	8002d8c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e006      	b.n	8002d9a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2220      	movs	r2, #32
 8002d90:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002d94:	2300      	movs	r3, #0
 8002d96:	e000      	b.n	8002d9a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002d98:	2302      	movs	r3, #2
  }
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3720      	adds	r7, #32
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002da2:	b580      	push	{r7, lr}
 8002da4:	b08a      	sub	sp, #40	; 0x28
 8002da6:	af02      	add	r7, sp, #8
 8002da8:	60f8      	str	r0, [r7, #12]
 8002daa:	60b9      	str	r1, [r7, #8]
 8002dac:	603b      	str	r3, [r7, #0]
 8002dae:	4613      	mov	r3, r2
 8002db0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002db2:	2300      	movs	r3, #0
 8002db4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	2b20      	cmp	r3, #32
 8002dc0:	f040 8089 	bne.w	8002ed6 <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d002      	beq.n	8002dd0 <HAL_UART_Receive+0x2e>
 8002dca:	88fb      	ldrh	r3, [r7, #6]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d101      	bne.n	8002dd4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e081      	b.n	8002ed8 <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d101      	bne.n	8002de2 <HAL_UART_Receive+0x40>
 8002dde:	2302      	movs	r3, #2
 8002de0:	e07a      	b.n	8002ed8 <HAL_UART_Receive+0x136>
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2201      	movs	r2, #1
 8002de6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2200      	movs	r2, #0
 8002dee:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2222      	movs	r2, #34	; 0x22
 8002df4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002df8:	f7fe fb42 	bl	8001480 <HAL_GetTick>
 8002dfc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	88fa      	ldrh	r2, [r7, #6]
 8002e02:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	88fa      	ldrh	r2, [r7, #6]
 8002e08:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e12:	d108      	bne.n	8002e26 <HAL_UART_Receive+0x84>
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	691b      	ldr	r3, [r3, #16]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d104      	bne.n	8002e26 <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	61bb      	str	r3, [r7, #24]
 8002e24:	e003      	b.n	8002e2e <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2200      	movs	r2, #0
 8002e32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002e36:	e043      	b.n	8002ec0 <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	9300      	str	r3, [sp, #0]
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	2120      	movs	r1, #32
 8002e42:	68f8      	ldr	r0, [r7, #12]
 8002e44:	f000 f9b2 	bl	80031ac <UART_WaitOnFlagUntilTimeout>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d001      	beq.n	8002e52 <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e042      	b.n	8002ed8 <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d10c      	bne.n	8002e72 <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e64:	b29a      	uxth	r2, r3
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002e6a:	69bb      	ldr	r3, [r7, #24]
 8002e6c:	3302      	adds	r3, #2
 8002e6e:	61bb      	str	r3, [r7, #24]
 8002e70:	e01f      	b.n	8002eb2 <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e7a:	d007      	beq.n	8002e8c <HAL_UART_Receive+0xea>
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d10a      	bne.n	8002e9a <HAL_UART_Receive+0xf8>
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	691b      	ldr	r3, [r3, #16]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d106      	bne.n	8002e9a <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	b2da      	uxtb	r2, r3
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	701a      	strb	r2, [r3, #0]
 8002e98:	e008      	b.n	8002eac <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ea6:	b2da      	uxtb	r2, r3
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	3301      	adds	r3, #1
 8002eb0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	3b01      	subs	r3, #1
 8002eba:	b29a      	uxth	r2, r3
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d1b6      	bne.n	8002e38 <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2220      	movs	r2, #32
 8002ece:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	e000      	b.n	8002ed8 <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 8002ed6:	2302      	movs	r3, #2
  }
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3720      	adds	r7, #32
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b085      	sub	sp, #20
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	60b9      	str	r1, [r7, #8]
 8002eea:	4613      	mov	r3, r2
 8002eec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2b20      	cmp	r3, #32
 8002ef8:	d140      	bne.n	8002f7c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d002      	beq.n	8002f06 <HAL_UART_Receive_IT+0x26>
 8002f00:	88fb      	ldrh	r3, [r7, #6]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d101      	bne.n	8002f0a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e039      	b.n	8002f7e <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d101      	bne.n	8002f18 <HAL_UART_Receive_IT+0x38>
 8002f14:	2302      	movs	r3, #2
 8002f16:	e032      	b.n	8002f7e <HAL_UART_Receive_IT+0x9e>
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	68ba      	ldr	r2, [r7, #8]
 8002f24:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	88fa      	ldrh	r2, [r7, #6]
 8002f2a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	88fa      	ldrh	r2, [r7, #6]
 8002f30:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2222      	movs	r2, #34	; 0x22
 8002f3c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	68da      	ldr	r2, [r3, #12]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f56:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	695a      	ldr	r2, [r3, #20]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f042 0201 	orr.w	r2, r2, #1
 8002f66:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	68da      	ldr	r2, [r3, #12]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f042 0220 	orr.w	r2, r2, #32
 8002f76:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	e000      	b.n	8002f7e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002f7c:	2302      	movs	r3, #2
  }
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3714      	adds	r7, #20
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bc80      	pop	{r7}
 8002f86:	4770      	bx	lr

08002f88 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b088      	sub	sp, #32
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	695b      	ldr	r3, [r3, #20]
 8002fa6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002fac:	2300      	movs	r3, #0
 8002fae:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	f003 030f 	and.w	r3, r3, #15
 8002fb6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d10d      	bne.n	8002fda <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	f003 0320 	and.w	r3, r3, #32
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d008      	beq.n	8002fda <HAL_UART_IRQHandler+0x52>
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	f003 0320 	and.w	r3, r3, #32
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d003      	beq.n	8002fda <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f000 f9cc 	bl	8003370 <UART_Receive_IT>
      return;
 8002fd8:	e0d0      	b.n	800317c <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	f000 80b0 	beq.w	8003142 <HAL_UART_IRQHandler+0x1ba>
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	f003 0301 	and.w	r3, r3, #1
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d105      	bne.n	8002ff8 <HAL_UART_IRQHandler+0x70>
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	f000 80a5 	beq.w	8003142 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	f003 0301 	and.w	r3, r3, #1
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d00a      	beq.n	8003018 <HAL_UART_IRQHandler+0x90>
 8003002:	69bb      	ldr	r3, [r7, #24]
 8003004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003008:	2b00      	cmp	r3, #0
 800300a:	d005      	beq.n	8003018 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003010:	f043 0201 	orr.w	r2, r3, #1
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	f003 0304 	and.w	r3, r3, #4
 800301e:	2b00      	cmp	r3, #0
 8003020:	d00a      	beq.n	8003038 <HAL_UART_IRQHandler+0xb0>
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	f003 0301 	and.w	r3, r3, #1
 8003028:	2b00      	cmp	r3, #0
 800302a:	d005      	beq.n	8003038 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003030:	f043 0202 	orr.w	r2, r3, #2
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	f003 0302 	and.w	r3, r3, #2
 800303e:	2b00      	cmp	r3, #0
 8003040:	d00a      	beq.n	8003058 <HAL_UART_IRQHandler+0xd0>
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	f003 0301 	and.w	r3, r3, #1
 8003048:	2b00      	cmp	r3, #0
 800304a:	d005      	beq.n	8003058 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003050:	f043 0204 	orr.w	r2, r3, #4
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	f003 0308 	and.w	r3, r3, #8
 800305e:	2b00      	cmp	r3, #0
 8003060:	d00f      	beq.n	8003082 <HAL_UART_IRQHandler+0xfa>
 8003062:	69bb      	ldr	r3, [r7, #24]
 8003064:	f003 0320 	and.w	r3, r3, #32
 8003068:	2b00      	cmp	r3, #0
 800306a:	d104      	bne.n	8003076 <HAL_UART_IRQHandler+0xee>
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	f003 0301 	and.w	r3, r3, #1
 8003072:	2b00      	cmp	r3, #0
 8003074:	d005      	beq.n	8003082 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800307a:	f043 0208 	orr.w	r2, r3, #8
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003086:	2b00      	cmp	r3, #0
 8003088:	d077      	beq.n	800317a <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	f003 0320 	and.w	r3, r3, #32
 8003090:	2b00      	cmp	r3, #0
 8003092:	d007      	beq.n	80030a4 <HAL_UART_IRQHandler+0x11c>
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	f003 0320 	and.w	r3, r3, #32
 800309a:	2b00      	cmp	r3, #0
 800309c:	d002      	beq.n	80030a4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f000 f966 	bl	8003370 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	695b      	ldr	r3, [r3, #20]
 80030aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	bf14      	ite	ne
 80030b2:	2301      	movne	r3, #1
 80030b4:	2300      	moveq	r3, #0
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030be:	f003 0308 	and.w	r3, r3, #8
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d102      	bne.n	80030cc <HAL_UART_IRQHandler+0x144>
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d031      	beq.n	8003130 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f000 f8b7 	bl	8003240 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	695b      	ldr	r3, [r3, #20]
 80030d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d023      	beq.n	8003128 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	695a      	ldr	r2, [r3, #20]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030ee:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d013      	beq.n	8003120 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030fc:	4a21      	ldr	r2, [pc, #132]	; (8003184 <HAL_UART_IRQHandler+0x1fc>)
 80030fe:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003104:	4618      	mov	r0, r3
 8003106:	f7fe faf7 	bl	80016f8 <HAL_DMA_Abort_IT>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d016      	beq.n	800313e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800311a:	4610      	mov	r0, r2
 800311c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800311e:	e00e      	b.n	800313e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f000 f83a 	bl	800319a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003126:	e00a      	b.n	800313e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f000 f836 	bl	800319a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800312e:	e006      	b.n	800313e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f000 f832 	bl	800319a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800313c:	e01d      	b.n	800317a <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800313e:	bf00      	nop
    return;
 8003140:	e01b      	b.n	800317a <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003148:	2b00      	cmp	r3, #0
 800314a:	d008      	beq.n	800315e <HAL_UART_IRQHandler+0x1d6>
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003152:	2b00      	cmp	r3, #0
 8003154:	d003      	beq.n	800315e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f000 f8a3 	bl	80032a2 <UART_Transmit_IT>
    return;
 800315c:	e00e      	b.n	800317c <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003164:	2b00      	cmp	r3, #0
 8003166:	d009      	beq.n	800317c <HAL_UART_IRQHandler+0x1f4>
 8003168:	69bb      	ldr	r3, [r7, #24]
 800316a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800316e:	2b00      	cmp	r3, #0
 8003170:	d004      	beq.n	800317c <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f000 f8e4 	bl	8003340 <UART_EndTransmit_IT>
    return;
 8003178:	e000      	b.n	800317c <HAL_UART_IRQHandler+0x1f4>
    return;
 800317a:	bf00      	nop
  }
}
 800317c:	3720      	adds	r7, #32
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	0800327b 	.word	0x0800327b

08003188 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003190:	bf00      	nop
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	bc80      	pop	{r7}
 8003198:	4770      	bx	lr

0800319a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800319a:	b480      	push	{r7}
 800319c:	b083      	sub	sp, #12
 800319e:	af00      	add	r7, sp, #0
 80031a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80031a2:	bf00      	nop
 80031a4:	370c      	adds	r7, #12
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bc80      	pop	{r7}
 80031aa:	4770      	bx	lr

080031ac <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	60b9      	str	r1, [r7, #8]
 80031b6:	603b      	str	r3, [r7, #0]
 80031b8:	4613      	mov	r3, r2
 80031ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031bc:	e02c      	b.n	8003218 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031be:	69bb      	ldr	r3, [r7, #24]
 80031c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031c4:	d028      	beq.n	8003218 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d007      	beq.n	80031dc <UART_WaitOnFlagUntilTimeout+0x30>
 80031cc:	f7fe f958 	bl	8001480 <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	69ba      	ldr	r2, [r7, #24]
 80031d8:	429a      	cmp	r2, r3
 80031da:	d21d      	bcs.n	8003218 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	68da      	ldr	r2, [r3, #12]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80031ea:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	695a      	ldr	r2, [r3, #20]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f022 0201 	bic.w	r2, r2, #1
 80031fa:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2220      	movs	r2, #32
 8003200:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2220      	movs	r2, #32
 8003208:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003214:	2303      	movs	r3, #3
 8003216:	e00f      	b.n	8003238 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	4013      	ands	r3, r2
 8003222:	68ba      	ldr	r2, [r7, #8]
 8003224:	429a      	cmp	r2, r3
 8003226:	bf0c      	ite	eq
 8003228:	2301      	moveq	r3, #1
 800322a:	2300      	movne	r3, #0
 800322c:	b2db      	uxtb	r3, r3
 800322e:	461a      	mov	r2, r3
 8003230:	79fb      	ldrb	r3, [r7, #7]
 8003232:	429a      	cmp	r2, r3
 8003234:	d0c3      	beq.n	80031be <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003236:	2300      	movs	r3, #0
}
 8003238:	4618      	mov	r0, r3
 800323a:	3710      	adds	r7, #16
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}

08003240 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	68da      	ldr	r2, [r3, #12]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003256:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	695a      	ldr	r2, [r3, #20]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f022 0201 	bic.w	r2, r2, #1
 8003266:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2220      	movs	r2, #32
 800326c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003270:	bf00      	nop
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	bc80      	pop	{r7}
 8003278:	4770      	bx	lr

0800327a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800327a:	b580      	push	{r7, lr}
 800327c:	b084      	sub	sp, #16
 800327e:	af00      	add	r7, sp, #0
 8003280:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003286:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2200      	movs	r2, #0
 800328c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2200      	movs	r2, #0
 8003292:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003294:	68f8      	ldr	r0, [r7, #12]
 8003296:	f7ff ff80 	bl	800319a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800329a:	bf00      	nop
 800329c:	3710      	adds	r7, #16
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}

080032a2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80032a2:	b480      	push	{r7}
 80032a4:	b085      	sub	sp, #20
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	2b21      	cmp	r3, #33	; 0x21
 80032b4:	d13e      	bne.n	8003334 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032be:	d114      	bne.n	80032ea <UART_Transmit_IT+0x48>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	691b      	ldr	r3, [r3, #16]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d110      	bne.n	80032ea <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6a1b      	ldr	r3, [r3, #32]
 80032cc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	881b      	ldrh	r3, [r3, #0]
 80032d2:	461a      	mov	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032dc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a1b      	ldr	r3, [r3, #32]
 80032e2:	1c9a      	adds	r2, r3, #2
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	621a      	str	r2, [r3, #32]
 80032e8:	e008      	b.n	80032fc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a1b      	ldr	r3, [r3, #32]
 80032ee:	1c59      	adds	r1, r3, #1
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	6211      	str	r1, [r2, #32]
 80032f4:	781a      	ldrb	r2, [r3, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003300:	b29b      	uxth	r3, r3
 8003302:	3b01      	subs	r3, #1
 8003304:	b29b      	uxth	r3, r3
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	4619      	mov	r1, r3
 800330a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800330c:	2b00      	cmp	r3, #0
 800330e:	d10f      	bne.n	8003330 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	68da      	ldr	r2, [r3, #12]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800331e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	68da      	ldr	r2, [r3, #12]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800332e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003330:	2300      	movs	r3, #0
 8003332:	e000      	b.n	8003336 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003334:	2302      	movs	r3, #2
  }
}
 8003336:	4618      	mov	r0, r3
 8003338:	3714      	adds	r7, #20
 800333a:	46bd      	mov	sp, r7
 800333c:	bc80      	pop	{r7}
 800333e:	4770      	bx	lr

08003340 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	68da      	ldr	r2, [r3, #12]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003356:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2220      	movs	r2, #32
 800335c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f7ff ff11 	bl	8003188 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003366:	2300      	movs	r3, #0
}
 8003368:	4618      	mov	r0, r3
 800336a:	3708      	adds	r7, #8
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}

08003370 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800337e:	b2db      	uxtb	r3, r3
 8003380:	2b22      	cmp	r3, #34	; 0x22
 8003382:	d170      	bne.n	8003466 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800338c:	d117      	bne.n	80033be <UART_Receive_IT+0x4e>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d113      	bne.n	80033be <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8003396:	2300      	movs	r3, #0
 8003398:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800339e:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033ac:	b29a      	uxth	r2, r3
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b6:	1c9a      	adds	r2, r3, #2
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	629a      	str	r2, [r3, #40]	; 0x28
 80033bc:	e026      	b.n	800340c <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c2:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80033c4:	2300      	movs	r3, #0
 80033c6:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033d0:	d007      	beq.n	80033e2 <UART_Receive_IT+0x72>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d10a      	bne.n	80033f0 <UART_Receive_IT+0x80>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d106      	bne.n	80033f0 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	b2da      	uxtb	r2, r3
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	701a      	strb	r2, [r3, #0]
 80033ee:	e008      	b.n	8003402 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033fc:	b2da      	uxtb	r2, r3
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003406:	1c5a      	adds	r2, r3, #1
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003410:	b29b      	uxth	r3, r3
 8003412:	3b01      	subs	r3, #1
 8003414:	b29b      	uxth	r3, r3
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	4619      	mov	r1, r3
 800341a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800341c:	2b00      	cmp	r3, #0
 800341e:	d120      	bne.n	8003462 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	68da      	ldr	r2, [r3, #12]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f022 0220 	bic.w	r2, r2, #32
 800342e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	68da      	ldr	r2, [r3, #12]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800343e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	695a      	ldr	r2, [r3, #20]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f022 0201 	bic.w	r2, r2, #1
 800344e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2220      	movs	r2, #32
 8003454:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f7fd fcc5 	bl	8000de8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800345e:	2300      	movs	r3, #0
 8003460:	e002      	b.n	8003468 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8003462:	2300      	movs	r3, #0
 8003464:	e000      	b.n	8003468 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8003466:	2302      	movs	r3, #2
  }
}
 8003468:	4618      	mov	r0, r3
 800346a:	3710      	adds	r7, #16
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}

08003470 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b084      	sub	sp, #16
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	691b      	ldr	r3, [r3, #16]
 800347e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	68da      	ldr	r2, [r3, #12]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	430a      	orrs	r2, r1
 800348c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	689a      	ldr	r2, [r3, #8]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	431a      	orrs	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	695b      	ldr	r3, [r3, #20]
 800349c:	4313      	orrs	r3, r2
 800349e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80034aa:	f023 030c 	bic.w	r3, r3, #12
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	6812      	ldr	r2, [r2, #0]
 80034b2:	68b9      	ldr	r1, [r7, #8]
 80034b4:	430b      	orrs	r3, r1
 80034b6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	695b      	ldr	r3, [r3, #20]
 80034be:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	699a      	ldr	r2, [r3, #24]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	430a      	orrs	r2, r1
 80034cc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a2c      	ldr	r2, [pc, #176]	; (8003584 <UART_SetConfig+0x114>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d103      	bne.n	80034e0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80034d8:	f7fe ff2a 	bl	8002330 <HAL_RCC_GetPCLK2Freq>
 80034dc:	60f8      	str	r0, [r7, #12]
 80034de:	e002      	b.n	80034e6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80034e0:	f7fe ff12 	bl	8002308 <HAL_RCC_GetPCLK1Freq>
 80034e4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80034e6:	68fa      	ldr	r2, [r7, #12]
 80034e8:	4613      	mov	r3, r2
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	4413      	add	r3, r2
 80034ee:	009a      	lsls	r2, r3, #2
 80034f0:	441a      	add	r2, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034fc:	4a22      	ldr	r2, [pc, #136]	; (8003588 <UART_SetConfig+0x118>)
 80034fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003502:	095b      	lsrs	r3, r3, #5
 8003504:	0119      	lsls	r1, r3, #4
 8003506:	68fa      	ldr	r2, [r7, #12]
 8003508:	4613      	mov	r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	4413      	add	r3, r2
 800350e:	009a      	lsls	r2, r3, #2
 8003510:	441a      	add	r2, r3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	fbb2 f2f3 	udiv	r2, r2, r3
 800351c:	4b1a      	ldr	r3, [pc, #104]	; (8003588 <UART_SetConfig+0x118>)
 800351e:	fba3 0302 	umull	r0, r3, r3, r2
 8003522:	095b      	lsrs	r3, r3, #5
 8003524:	2064      	movs	r0, #100	; 0x64
 8003526:	fb00 f303 	mul.w	r3, r0, r3
 800352a:	1ad3      	subs	r3, r2, r3
 800352c:	011b      	lsls	r3, r3, #4
 800352e:	3332      	adds	r3, #50	; 0x32
 8003530:	4a15      	ldr	r2, [pc, #84]	; (8003588 <UART_SetConfig+0x118>)
 8003532:	fba2 2303 	umull	r2, r3, r2, r3
 8003536:	095b      	lsrs	r3, r3, #5
 8003538:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800353c:	4419      	add	r1, r3
 800353e:	68fa      	ldr	r2, [r7, #12]
 8003540:	4613      	mov	r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	4413      	add	r3, r2
 8003546:	009a      	lsls	r2, r3, #2
 8003548:	441a      	add	r2, r3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	fbb2 f2f3 	udiv	r2, r2, r3
 8003554:	4b0c      	ldr	r3, [pc, #48]	; (8003588 <UART_SetConfig+0x118>)
 8003556:	fba3 0302 	umull	r0, r3, r3, r2
 800355a:	095b      	lsrs	r3, r3, #5
 800355c:	2064      	movs	r0, #100	; 0x64
 800355e:	fb00 f303 	mul.w	r3, r0, r3
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	011b      	lsls	r3, r3, #4
 8003566:	3332      	adds	r3, #50	; 0x32
 8003568:	4a07      	ldr	r2, [pc, #28]	; (8003588 <UART_SetConfig+0x118>)
 800356a:	fba2 2303 	umull	r2, r3, r2, r3
 800356e:	095b      	lsrs	r3, r3, #5
 8003570:	f003 020f 	and.w	r2, r3, #15
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	440a      	add	r2, r1
 800357a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800357c:	bf00      	nop
 800357e:	3710      	adds	r7, #16
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}
 8003584:	40013800 	.word	0x40013800
 8003588:	51eb851f 	.word	0x51eb851f

0800358c <atoi>:
 800358c:	220a      	movs	r2, #10
 800358e:	2100      	movs	r1, #0
 8003590:	f000 b97a 	b.w	8003888 <strtol>

08003594 <__errno>:
 8003594:	4b01      	ldr	r3, [pc, #4]	; (800359c <__errno+0x8>)
 8003596:	6818      	ldr	r0, [r3, #0]
 8003598:	4770      	bx	lr
 800359a:	bf00      	nop
 800359c:	20000374 	.word	0x20000374

080035a0 <__libc_init_array>:
 80035a0:	b570      	push	{r4, r5, r6, lr}
 80035a2:	2600      	movs	r6, #0
 80035a4:	4d0c      	ldr	r5, [pc, #48]	; (80035d8 <__libc_init_array+0x38>)
 80035a6:	4c0d      	ldr	r4, [pc, #52]	; (80035dc <__libc_init_array+0x3c>)
 80035a8:	1b64      	subs	r4, r4, r5
 80035aa:	10a4      	asrs	r4, r4, #2
 80035ac:	42a6      	cmp	r6, r4
 80035ae:	d109      	bne.n	80035c4 <__libc_init_array+0x24>
 80035b0:	f001 f94e 	bl	8004850 <_init>
 80035b4:	2600      	movs	r6, #0
 80035b6:	4d0a      	ldr	r5, [pc, #40]	; (80035e0 <__libc_init_array+0x40>)
 80035b8:	4c0a      	ldr	r4, [pc, #40]	; (80035e4 <__libc_init_array+0x44>)
 80035ba:	1b64      	subs	r4, r4, r5
 80035bc:	10a4      	asrs	r4, r4, #2
 80035be:	42a6      	cmp	r6, r4
 80035c0:	d105      	bne.n	80035ce <__libc_init_array+0x2e>
 80035c2:	bd70      	pop	{r4, r5, r6, pc}
 80035c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80035c8:	4798      	blx	r3
 80035ca:	3601      	adds	r6, #1
 80035cc:	e7ee      	b.n	80035ac <__libc_init_array+0xc>
 80035ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80035d2:	4798      	blx	r3
 80035d4:	3601      	adds	r6, #1
 80035d6:	e7f2      	b.n	80035be <__libc_init_array+0x1e>
 80035d8:	08004b60 	.word	0x08004b60
 80035dc:	08004b60 	.word	0x08004b60
 80035e0:	08004b60 	.word	0x08004b60
 80035e4:	08004b64 	.word	0x08004b64

080035e8 <memccpy>:
 80035e8:	b510      	push	{r4, lr}
 80035ea:	b2d2      	uxtb	r2, r2
 80035ec:	3901      	subs	r1, #1
 80035ee:	4403      	add	r3, r0
 80035f0:	4298      	cmp	r0, r3
 80035f2:	d101      	bne.n	80035f8 <memccpy+0x10>
 80035f4:	2000      	movs	r0, #0
 80035f6:	e005      	b.n	8003604 <memccpy+0x1c>
 80035f8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80035fc:	4294      	cmp	r4, r2
 80035fe:	f800 4b01 	strb.w	r4, [r0], #1
 8003602:	d1f5      	bne.n	80035f0 <memccpy+0x8>
 8003604:	bd10      	pop	{r4, pc}

08003606 <memset>:
 8003606:	4603      	mov	r3, r0
 8003608:	4402      	add	r2, r0
 800360a:	4293      	cmp	r3, r2
 800360c:	d100      	bne.n	8003610 <memset+0xa>
 800360e:	4770      	bx	lr
 8003610:	f803 1b01 	strb.w	r1, [r3], #1
 8003614:	e7f9      	b.n	800360a <memset+0x4>

08003616 <strcat>:
 8003616:	4602      	mov	r2, r0
 8003618:	b510      	push	{r4, lr}
 800361a:	7814      	ldrb	r4, [r2, #0]
 800361c:	4613      	mov	r3, r2
 800361e:	3201      	adds	r2, #1
 8003620:	2c00      	cmp	r4, #0
 8003622:	d1fa      	bne.n	800361a <strcat+0x4>
 8003624:	3b01      	subs	r3, #1
 8003626:	f811 2b01 	ldrb.w	r2, [r1], #1
 800362a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800362e:	2a00      	cmp	r2, #0
 8003630:	d1f9      	bne.n	8003626 <strcat+0x10>
 8003632:	bd10      	pop	{r4, pc}

08003634 <strchr>:
 8003634:	4603      	mov	r3, r0
 8003636:	b2c9      	uxtb	r1, r1
 8003638:	4618      	mov	r0, r3
 800363a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800363e:	b112      	cbz	r2, 8003646 <strchr+0x12>
 8003640:	428a      	cmp	r2, r1
 8003642:	d1f9      	bne.n	8003638 <strchr+0x4>
 8003644:	4770      	bx	lr
 8003646:	2900      	cmp	r1, #0
 8003648:	bf18      	it	ne
 800364a:	2000      	movne	r0, #0
 800364c:	4770      	bx	lr

0800364e <strcpy>:
 800364e:	4603      	mov	r3, r0
 8003650:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003654:	f803 2b01 	strb.w	r2, [r3], #1
 8003658:	2a00      	cmp	r2, #0
 800365a:	d1f9      	bne.n	8003650 <strcpy+0x2>
 800365c:	4770      	bx	lr
	...

08003660 <strdup>:
 8003660:	4b02      	ldr	r3, [pc, #8]	; (800366c <strdup+0xc>)
 8003662:	4601      	mov	r1, r0
 8003664:	6818      	ldr	r0, [r3, #0]
 8003666:	f000 b803 	b.w	8003670 <_strdup_r>
 800366a:	bf00      	nop
 800366c:	20000374 	.word	0x20000374

08003670 <_strdup_r>:
 8003670:	b570      	push	{r4, r5, r6, lr}
 8003672:	4604      	mov	r4, r0
 8003674:	4608      	mov	r0, r1
 8003676:	460d      	mov	r5, r1
 8003678:	f7fc fd68 	bl	800014c <strlen>
 800367c:	1c46      	adds	r6, r0, #1
 800367e:	4631      	mov	r1, r6
 8003680:	4620      	mov	r0, r4
 8003682:	f000 f99d 	bl	80039c0 <_malloc_r>
 8003686:	4604      	mov	r4, r0
 8003688:	b118      	cbz	r0, 8003692 <_strdup_r+0x22>
 800368a:	4632      	mov	r2, r6
 800368c:	4629      	mov	r1, r5
 800368e:	f000 f93d 	bl	800390c <memcpy>
 8003692:	4620      	mov	r0, r4
 8003694:	bd70      	pop	{r4, r5, r6, pc}

08003696 <strstr>:
 8003696:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003698:	780c      	ldrb	r4, [r1, #0]
 800369a:	b164      	cbz	r4, 80036b6 <strstr+0x20>
 800369c:	4603      	mov	r3, r0
 800369e:	781a      	ldrb	r2, [r3, #0]
 80036a0:	4618      	mov	r0, r3
 80036a2:	1c5e      	adds	r6, r3, #1
 80036a4:	b90a      	cbnz	r2, 80036aa <strstr+0x14>
 80036a6:	4610      	mov	r0, r2
 80036a8:	e005      	b.n	80036b6 <strstr+0x20>
 80036aa:	4294      	cmp	r4, r2
 80036ac:	d108      	bne.n	80036c0 <strstr+0x2a>
 80036ae:	460d      	mov	r5, r1
 80036b0:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80036b4:	b902      	cbnz	r2, 80036b8 <strstr+0x22>
 80036b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036b8:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80036bc:	4297      	cmp	r7, r2
 80036be:	d0f7      	beq.n	80036b0 <strstr+0x1a>
 80036c0:	4633      	mov	r3, r6
 80036c2:	e7ec      	b.n	800369e <strstr+0x8>

080036c4 <strtok>:
 80036c4:	4b16      	ldr	r3, [pc, #88]	; (8003720 <strtok+0x5c>)
 80036c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036ca:	681f      	ldr	r7, [r3, #0]
 80036cc:	4605      	mov	r5, r0
 80036ce:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 80036d0:	460e      	mov	r6, r1
 80036d2:	b9ec      	cbnz	r4, 8003710 <strtok+0x4c>
 80036d4:	2050      	movs	r0, #80	; 0x50
 80036d6:	f000 f911 	bl	80038fc <malloc>
 80036da:	4602      	mov	r2, r0
 80036dc:	65b8      	str	r0, [r7, #88]	; 0x58
 80036de:	b920      	cbnz	r0, 80036ea <strtok+0x26>
 80036e0:	2157      	movs	r1, #87	; 0x57
 80036e2:	4b10      	ldr	r3, [pc, #64]	; (8003724 <strtok+0x60>)
 80036e4:	4810      	ldr	r0, [pc, #64]	; (8003728 <strtok+0x64>)
 80036e6:	f000 f8d9 	bl	800389c <__assert_func>
 80036ea:	e9c0 4400 	strd	r4, r4, [r0]
 80036ee:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80036f2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80036f6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80036fa:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80036fe:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8003702:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8003706:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800370a:	6184      	str	r4, [r0, #24]
 800370c:	7704      	strb	r4, [r0, #28]
 800370e:	6244      	str	r4, [r0, #36]	; 0x24
 8003710:	4631      	mov	r1, r6
 8003712:	4628      	mov	r0, r5
 8003714:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003716:	2301      	movs	r3, #1
 8003718:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800371c:	f000 b806 	b.w	800372c <__strtok_r>
 8003720:	20000374 	.word	0x20000374
 8003724:	08004918 	.word	0x08004918
 8003728:	0800492f 	.word	0x0800492f

0800372c <__strtok_r>:
 800372c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800372e:	b908      	cbnz	r0, 8003734 <__strtok_r+0x8>
 8003730:	6810      	ldr	r0, [r2, #0]
 8003732:	b188      	cbz	r0, 8003758 <__strtok_r+0x2c>
 8003734:	4604      	mov	r4, r0
 8003736:	460f      	mov	r7, r1
 8003738:	4620      	mov	r0, r4
 800373a:	f814 5b01 	ldrb.w	r5, [r4], #1
 800373e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8003742:	b91e      	cbnz	r6, 800374c <__strtok_r+0x20>
 8003744:	b965      	cbnz	r5, 8003760 <__strtok_r+0x34>
 8003746:	4628      	mov	r0, r5
 8003748:	6015      	str	r5, [r2, #0]
 800374a:	e005      	b.n	8003758 <__strtok_r+0x2c>
 800374c:	42b5      	cmp	r5, r6
 800374e:	d1f6      	bne.n	800373e <__strtok_r+0x12>
 8003750:	2b00      	cmp	r3, #0
 8003752:	d1f0      	bne.n	8003736 <__strtok_r+0xa>
 8003754:	6014      	str	r4, [r2, #0]
 8003756:	7003      	strb	r3, [r0, #0]
 8003758:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800375a:	461c      	mov	r4, r3
 800375c:	e00c      	b.n	8003778 <__strtok_r+0x4c>
 800375e:	b915      	cbnz	r5, 8003766 <__strtok_r+0x3a>
 8003760:	460e      	mov	r6, r1
 8003762:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003766:	f816 5b01 	ldrb.w	r5, [r6], #1
 800376a:	42ab      	cmp	r3, r5
 800376c:	d1f7      	bne.n	800375e <__strtok_r+0x32>
 800376e:	2b00      	cmp	r3, #0
 8003770:	d0f3      	beq.n	800375a <__strtok_r+0x2e>
 8003772:	2300      	movs	r3, #0
 8003774:	f804 3c01 	strb.w	r3, [r4, #-1]
 8003778:	6014      	str	r4, [r2, #0]
 800377a:	e7ed      	b.n	8003758 <__strtok_r+0x2c>

0800377c <_strtol_l.isra.0>:
 800377c:	2b01      	cmp	r3, #1
 800377e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003782:	4686      	mov	lr, r0
 8003784:	d001      	beq.n	800378a <_strtol_l.isra.0+0xe>
 8003786:	2b24      	cmp	r3, #36	; 0x24
 8003788:	d906      	bls.n	8003798 <_strtol_l.isra.0+0x1c>
 800378a:	f7ff ff03 	bl	8003594 <__errno>
 800378e:	2316      	movs	r3, #22
 8003790:	6003      	str	r3, [r0, #0]
 8003792:	2000      	movs	r0, #0
 8003794:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003798:	468c      	mov	ip, r1
 800379a:	4e3a      	ldr	r6, [pc, #232]	; (8003884 <_strtol_l.isra.0+0x108>)
 800379c:	4660      	mov	r0, ip
 800379e:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80037a2:	5da5      	ldrb	r5, [r4, r6]
 80037a4:	f015 0508 	ands.w	r5, r5, #8
 80037a8:	d1f8      	bne.n	800379c <_strtol_l.isra.0+0x20>
 80037aa:	2c2d      	cmp	r4, #45	; 0x2d
 80037ac:	d133      	bne.n	8003816 <_strtol_l.isra.0+0x9a>
 80037ae:	f04f 0801 	mov.w	r8, #1
 80037b2:	f89c 4000 	ldrb.w	r4, [ip]
 80037b6:	f100 0c02 	add.w	ip, r0, #2
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d05d      	beq.n	800387a <_strtol_l.isra.0+0xfe>
 80037be:	2b10      	cmp	r3, #16
 80037c0:	d10c      	bne.n	80037dc <_strtol_l.isra.0+0x60>
 80037c2:	2c30      	cmp	r4, #48	; 0x30
 80037c4:	d10a      	bne.n	80037dc <_strtol_l.isra.0+0x60>
 80037c6:	f89c 0000 	ldrb.w	r0, [ip]
 80037ca:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80037ce:	2858      	cmp	r0, #88	; 0x58
 80037d0:	d14e      	bne.n	8003870 <_strtol_l.isra.0+0xf4>
 80037d2:	2310      	movs	r3, #16
 80037d4:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80037d8:	f10c 0c02 	add.w	ip, ip, #2
 80037dc:	2500      	movs	r5, #0
 80037de:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 80037e2:	3f01      	subs	r7, #1
 80037e4:	fbb7 f9f3 	udiv	r9, r7, r3
 80037e8:	4628      	mov	r0, r5
 80037ea:	fb03 7a19 	mls	sl, r3, r9, r7
 80037ee:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80037f2:	2e09      	cmp	r6, #9
 80037f4:	d818      	bhi.n	8003828 <_strtol_l.isra.0+0xac>
 80037f6:	4634      	mov	r4, r6
 80037f8:	42a3      	cmp	r3, r4
 80037fa:	dd24      	ble.n	8003846 <_strtol_l.isra.0+0xca>
 80037fc:	2d00      	cmp	r5, #0
 80037fe:	db1f      	blt.n	8003840 <_strtol_l.isra.0+0xc4>
 8003800:	4581      	cmp	r9, r0
 8003802:	d31d      	bcc.n	8003840 <_strtol_l.isra.0+0xc4>
 8003804:	d101      	bne.n	800380a <_strtol_l.isra.0+0x8e>
 8003806:	45a2      	cmp	sl, r4
 8003808:	db1a      	blt.n	8003840 <_strtol_l.isra.0+0xc4>
 800380a:	2501      	movs	r5, #1
 800380c:	fb00 4003 	mla	r0, r0, r3, r4
 8003810:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8003814:	e7eb      	b.n	80037ee <_strtol_l.isra.0+0x72>
 8003816:	2c2b      	cmp	r4, #43	; 0x2b
 8003818:	bf08      	it	eq
 800381a:	f89c 4000 	ldrbeq.w	r4, [ip]
 800381e:	46a8      	mov	r8, r5
 8003820:	bf08      	it	eq
 8003822:	f100 0c02 	addeq.w	ip, r0, #2
 8003826:	e7c8      	b.n	80037ba <_strtol_l.isra.0+0x3e>
 8003828:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800382c:	2e19      	cmp	r6, #25
 800382e:	d801      	bhi.n	8003834 <_strtol_l.isra.0+0xb8>
 8003830:	3c37      	subs	r4, #55	; 0x37
 8003832:	e7e1      	b.n	80037f8 <_strtol_l.isra.0+0x7c>
 8003834:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8003838:	2e19      	cmp	r6, #25
 800383a:	d804      	bhi.n	8003846 <_strtol_l.isra.0+0xca>
 800383c:	3c57      	subs	r4, #87	; 0x57
 800383e:	e7db      	b.n	80037f8 <_strtol_l.isra.0+0x7c>
 8003840:	f04f 35ff 	mov.w	r5, #4294967295
 8003844:	e7e4      	b.n	8003810 <_strtol_l.isra.0+0x94>
 8003846:	2d00      	cmp	r5, #0
 8003848:	da08      	bge.n	800385c <_strtol_l.isra.0+0xe0>
 800384a:	2322      	movs	r3, #34	; 0x22
 800384c:	4638      	mov	r0, r7
 800384e:	f8ce 3000 	str.w	r3, [lr]
 8003852:	2a00      	cmp	r2, #0
 8003854:	d09e      	beq.n	8003794 <_strtol_l.isra.0+0x18>
 8003856:	f10c 31ff 	add.w	r1, ip, #4294967295
 800385a:	e007      	b.n	800386c <_strtol_l.isra.0+0xf0>
 800385c:	f1b8 0f00 	cmp.w	r8, #0
 8003860:	d000      	beq.n	8003864 <_strtol_l.isra.0+0xe8>
 8003862:	4240      	negs	r0, r0
 8003864:	2a00      	cmp	r2, #0
 8003866:	d095      	beq.n	8003794 <_strtol_l.isra.0+0x18>
 8003868:	2d00      	cmp	r5, #0
 800386a:	d1f4      	bne.n	8003856 <_strtol_l.isra.0+0xda>
 800386c:	6011      	str	r1, [r2, #0]
 800386e:	e791      	b.n	8003794 <_strtol_l.isra.0+0x18>
 8003870:	2430      	movs	r4, #48	; 0x30
 8003872:	2b00      	cmp	r3, #0
 8003874:	d1b2      	bne.n	80037dc <_strtol_l.isra.0+0x60>
 8003876:	2308      	movs	r3, #8
 8003878:	e7b0      	b.n	80037dc <_strtol_l.isra.0+0x60>
 800387a:	2c30      	cmp	r4, #48	; 0x30
 800387c:	d0a3      	beq.n	80037c6 <_strtol_l.isra.0+0x4a>
 800387e:	230a      	movs	r3, #10
 8003880:	e7ac      	b.n	80037dc <_strtol_l.isra.0+0x60>
 8003882:	bf00      	nop
 8003884:	080049cd 	.word	0x080049cd

08003888 <strtol>:
 8003888:	4613      	mov	r3, r2
 800388a:	460a      	mov	r2, r1
 800388c:	4601      	mov	r1, r0
 800388e:	4802      	ldr	r0, [pc, #8]	; (8003898 <strtol+0x10>)
 8003890:	6800      	ldr	r0, [r0, #0]
 8003892:	f7ff bf73 	b.w	800377c <_strtol_l.isra.0>
 8003896:	bf00      	nop
 8003898:	20000374 	.word	0x20000374

0800389c <__assert_func>:
 800389c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800389e:	4614      	mov	r4, r2
 80038a0:	461a      	mov	r2, r3
 80038a2:	4b09      	ldr	r3, [pc, #36]	; (80038c8 <__assert_func+0x2c>)
 80038a4:	4605      	mov	r5, r0
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	68d8      	ldr	r0, [r3, #12]
 80038aa:	b14c      	cbz	r4, 80038c0 <__assert_func+0x24>
 80038ac:	4b07      	ldr	r3, [pc, #28]	; (80038cc <__assert_func+0x30>)
 80038ae:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80038b2:	9100      	str	r1, [sp, #0]
 80038b4:	462b      	mov	r3, r5
 80038b6:	4906      	ldr	r1, [pc, #24]	; (80038d0 <__assert_func+0x34>)
 80038b8:	f000 f80e 	bl	80038d8 <fiprintf>
 80038bc:	f000 fc98 	bl	80041f0 <abort>
 80038c0:	4b04      	ldr	r3, [pc, #16]	; (80038d4 <__assert_func+0x38>)
 80038c2:	461c      	mov	r4, r3
 80038c4:	e7f3      	b.n	80038ae <__assert_func+0x12>
 80038c6:	bf00      	nop
 80038c8:	20000374 	.word	0x20000374
 80038cc:	08004990 	.word	0x08004990
 80038d0:	0800499d 	.word	0x0800499d
 80038d4:	080049cb 	.word	0x080049cb

080038d8 <fiprintf>:
 80038d8:	b40e      	push	{r1, r2, r3}
 80038da:	b503      	push	{r0, r1, lr}
 80038dc:	4601      	mov	r1, r0
 80038de:	ab03      	add	r3, sp, #12
 80038e0:	4805      	ldr	r0, [pc, #20]	; (80038f8 <fiprintf+0x20>)
 80038e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80038e6:	6800      	ldr	r0, [r0, #0]
 80038e8:	9301      	str	r3, [sp, #4]
 80038ea:	f000 f8eb 	bl	8003ac4 <_vfiprintf_r>
 80038ee:	b002      	add	sp, #8
 80038f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80038f4:	b003      	add	sp, #12
 80038f6:	4770      	bx	lr
 80038f8:	20000374 	.word	0x20000374

080038fc <malloc>:
 80038fc:	4b02      	ldr	r3, [pc, #8]	; (8003908 <malloc+0xc>)
 80038fe:	4601      	mov	r1, r0
 8003900:	6818      	ldr	r0, [r3, #0]
 8003902:	f000 b85d 	b.w	80039c0 <_malloc_r>
 8003906:	bf00      	nop
 8003908:	20000374 	.word	0x20000374

0800390c <memcpy>:
 800390c:	440a      	add	r2, r1
 800390e:	4291      	cmp	r1, r2
 8003910:	f100 33ff 	add.w	r3, r0, #4294967295
 8003914:	d100      	bne.n	8003918 <memcpy+0xc>
 8003916:	4770      	bx	lr
 8003918:	b510      	push	{r4, lr}
 800391a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800391e:	4291      	cmp	r1, r2
 8003920:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003924:	d1f9      	bne.n	800391a <memcpy+0xe>
 8003926:	bd10      	pop	{r4, pc}

08003928 <_free_r>:
 8003928:	b538      	push	{r3, r4, r5, lr}
 800392a:	4605      	mov	r5, r0
 800392c:	2900      	cmp	r1, #0
 800392e:	d043      	beq.n	80039b8 <_free_r+0x90>
 8003930:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003934:	1f0c      	subs	r4, r1, #4
 8003936:	2b00      	cmp	r3, #0
 8003938:	bfb8      	it	lt
 800393a:	18e4      	addlt	r4, r4, r3
 800393c:	f000 fe8c 	bl	8004658 <__malloc_lock>
 8003940:	4a1e      	ldr	r2, [pc, #120]	; (80039bc <_free_r+0x94>)
 8003942:	6813      	ldr	r3, [r2, #0]
 8003944:	4610      	mov	r0, r2
 8003946:	b933      	cbnz	r3, 8003956 <_free_r+0x2e>
 8003948:	6063      	str	r3, [r4, #4]
 800394a:	6014      	str	r4, [r2, #0]
 800394c:	4628      	mov	r0, r5
 800394e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003952:	f000 be87 	b.w	8004664 <__malloc_unlock>
 8003956:	42a3      	cmp	r3, r4
 8003958:	d90a      	bls.n	8003970 <_free_r+0x48>
 800395a:	6821      	ldr	r1, [r4, #0]
 800395c:	1862      	adds	r2, r4, r1
 800395e:	4293      	cmp	r3, r2
 8003960:	bf01      	itttt	eq
 8003962:	681a      	ldreq	r2, [r3, #0]
 8003964:	685b      	ldreq	r3, [r3, #4]
 8003966:	1852      	addeq	r2, r2, r1
 8003968:	6022      	streq	r2, [r4, #0]
 800396a:	6063      	str	r3, [r4, #4]
 800396c:	6004      	str	r4, [r0, #0]
 800396e:	e7ed      	b.n	800394c <_free_r+0x24>
 8003970:	461a      	mov	r2, r3
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	b10b      	cbz	r3, 800397a <_free_r+0x52>
 8003976:	42a3      	cmp	r3, r4
 8003978:	d9fa      	bls.n	8003970 <_free_r+0x48>
 800397a:	6811      	ldr	r1, [r2, #0]
 800397c:	1850      	adds	r0, r2, r1
 800397e:	42a0      	cmp	r0, r4
 8003980:	d10b      	bne.n	800399a <_free_r+0x72>
 8003982:	6820      	ldr	r0, [r4, #0]
 8003984:	4401      	add	r1, r0
 8003986:	1850      	adds	r0, r2, r1
 8003988:	4283      	cmp	r3, r0
 800398a:	6011      	str	r1, [r2, #0]
 800398c:	d1de      	bne.n	800394c <_free_r+0x24>
 800398e:	6818      	ldr	r0, [r3, #0]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	4401      	add	r1, r0
 8003994:	6011      	str	r1, [r2, #0]
 8003996:	6053      	str	r3, [r2, #4]
 8003998:	e7d8      	b.n	800394c <_free_r+0x24>
 800399a:	d902      	bls.n	80039a2 <_free_r+0x7a>
 800399c:	230c      	movs	r3, #12
 800399e:	602b      	str	r3, [r5, #0]
 80039a0:	e7d4      	b.n	800394c <_free_r+0x24>
 80039a2:	6820      	ldr	r0, [r4, #0]
 80039a4:	1821      	adds	r1, r4, r0
 80039a6:	428b      	cmp	r3, r1
 80039a8:	bf01      	itttt	eq
 80039aa:	6819      	ldreq	r1, [r3, #0]
 80039ac:	685b      	ldreq	r3, [r3, #4]
 80039ae:	1809      	addeq	r1, r1, r0
 80039b0:	6021      	streq	r1, [r4, #0]
 80039b2:	6063      	str	r3, [r4, #4]
 80039b4:	6054      	str	r4, [r2, #4]
 80039b6:	e7c9      	b.n	800394c <_free_r+0x24>
 80039b8:	bd38      	pop	{r3, r4, r5, pc}
 80039ba:	bf00      	nop
 80039bc:	20000400 	.word	0x20000400

080039c0 <_malloc_r>:
 80039c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039c2:	1ccd      	adds	r5, r1, #3
 80039c4:	f025 0503 	bic.w	r5, r5, #3
 80039c8:	3508      	adds	r5, #8
 80039ca:	2d0c      	cmp	r5, #12
 80039cc:	bf38      	it	cc
 80039ce:	250c      	movcc	r5, #12
 80039d0:	2d00      	cmp	r5, #0
 80039d2:	4606      	mov	r6, r0
 80039d4:	db01      	blt.n	80039da <_malloc_r+0x1a>
 80039d6:	42a9      	cmp	r1, r5
 80039d8:	d903      	bls.n	80039e2 <_malloc_r+0x22>
 80039da:	230c      	movs	r3, #12
 80039dc:	6033      	str	r3, [r6, #0]
 80039de:	2000      	movs	r0, #0
 80039e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039e2:	f000 fe39 	bl	8004658 <__malloc_lock>
 80039e6:	4921      	ldr	r1, [pc, #132]	; (8003a6c <_malloc_r+0xac>)
 80039e8:	680a      	ldr	r2, [r1, #0]
 80039ea:	4614      	mov	r4, r2
 80039ec:	b99c      	cbnz	r4, 8003a16 <_malloc_r+0x56>
 80039ee:	4f20      	ldr	r7, [pc, #128]	; (8003a70 <_malloc_r+0xb0>)
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	b923      	cbnz	r3, 80039fe <_malloc_r+0x3e>
 80039f4:	4621      	mov	r1, r4
 80039f6:	4630      	mov	r0, r6
 80039f8:	f000 fb2a 	bl	8004050 <_sbrk_r>
 80039fc:	6038      	str	r0, [r7, #0]
 80039fe:	4629      	mov	r1, r5
 8003a00:	4630      	mov	r0, r6
 8003a02:	f000 fb25 	bl	8004050 <_sbrk_r>
 8003a06:	1c43      	adds	r3, r0, #1
 8003a08:	d123      	bne.n	8003a52 <_malloc_r+0x92>
 8003a0a:	230c      	movs	r3, #12
 8003a0c:	4630      	mov	r0, r6
 8003a0e:	6033      	str	r3, [r6, #0]
 8003a10:	f000 fe28 	bl	8004664 <__malloc_unlock>
 8003a14:	e7e3      	b.n	80039de <_malloc_r+0x1e>
 8003a16:	6823      	ldr	r3, [r4, #0]
 8003a18:	1b5b      	subs	r3, r3, r5
 8003a1a:	d417      	bmi.n	8003a4c <_malloc_r+0x8c>
 8003a1c:	2b0b      	cmp	r3, #11
 8003a1e:	d903      	bls.n	8003a28 <_malloc_r+0x68>
 8003a20:	6023      	str	r3, [r4, #0]
 8003a22:	441c      	add	r4, r3
 8003a24:	6025      	str	r5, [r4, #0]
 8003a26:	e004      	b.n	8003a32 <_malloc_r+0x72>
 8003a28:	6863      	ldr	r3, [r4, #4]
 8003a2a:	42a2      	cmp	r2, r4
 8003a2c:	bf0c      	ite	eq
 8003a2e:	600b      	streq	r3, [r1, #0]
 8003a30:	6053      	strne	r3, [r2, #4]
 8003a32:	4630      	mov	r0, r6
 8003a34:	f000 fe16 	bl	8004664 <__malloc_unlock>
 8003a38:	f104 000b 	add.w	r0, r4, #11
 8003a3c:	1d23      	adds	r3, r4, #4
 8003a3e:	f020 0007 	bic.w	r0, r0, #7
 8003a42:	1ac2      	subs	r2, r0, r3
 8003a44:	d0cc      	beq.n	80039e0 <_malloc_r+0x20>
 8003a46:	1a1b      	subs	r3, r3, r0
 8003a48:	50a3      	str	r3, [r4, r2]
 8003a4a:	e7c9      	b.n	80039e0 <_malloc_r+0x20>
 8003a4c:	4622      	mov	r2, r4
 8003a4e:	6864      	ldr	r4, [r4, #4]
 8003a50:	e7cc      	b.n	80039ec <_malloc_r+0x2c>
 8003a52:	1cc4      	adds	r4, r0, #3
 8003a54:	f024 0403 	bic.w	r4, r4, #3
 8003a58:	42a0      	cmp	r0, r4
 8003a5a:	d0e3      	beq.n	8003a24 <_malloc_r+0x64>
 8003a5c:	1a21      	subs	r1, r4, r0
 8003a5e:	4630      	mov	r0, r6
 8003a60:	f000 faf6 	bl	8004050 <_sbrk_r>
 8003a64:	3001      	adds	r0, #1
 8003a66:	d1dd      	bne.n	8003a24 <_malloc_r+0x64>
 8003a68:	e7cf      	b.n	8003a0a <_malloc_r+0x4a>
 8003a6a:	bf00      	nop
 8003a6c:	20000400 	.word	0x20000400
 8003a70:	20000404 	.word	0x20000404

08003a74 <__sfputc_r>:
 8003a74:	6893      	ldr	r3, [r2, #8]
 8003a76:	b410      	push	{r4}
 8003a78:	3b01      	subs	r3, #1
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	6093      	str	r3, [r2, #8]
 8003a7e:	da07      	bge.n	8003a90 <__sfputc_r+0x1c>
 8003a80:	6994      	ldr	r4, [r2, #24]
 8003a82:	42a3      	cmp	r3, r4
 8003a84:	db01      	blt.n	8003a8a <__sfputc_r+0x16>
 8003a86:	290a      	cmp	r1, #10
 8003a88:	d102      	bne.n	8003a90 <__sfputc_r+0x1c>
 8003a8a:	bc10      	pop	{r4}
 8003a8c:	f000 baf0 	b.w	8004070 <__swbuf_r>
 8003a90:	6813      	ldr	r3, [r2, #0]
 8003a92:	1c58      	adds	r0, r3, #1
 8003a94:	6010      	str	r0, [r2, #0]
 8003a96:	7019      	strb	r1, [r3, #0]
 8003a98:	4608      	mov	r0, r1
 8003a9a:	bc10      	pop	{r4}
 8003a9c:	4770      	bx	lr

08003a9e <__sfputs_r>:
 8003a9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aa0:	4606      	mov	r6, r0
 8003aa2:	460f      	mov	r7, r1
 8003aa4:	4614      	mov	r4, r2
 8003aa6:	18d5      	adds	r5, r2, r3
 8003aa8:	42ac      	cmp	r4, r5
 8003aaa:	d101      	bne.n	8003ab0 <__sfputs_r+0x12>
 8003aac:	2000      	movs	r0, #0
 8003aae:	e007      	b.n	8003ac0 <__sfputs_r+0x22>
 8003ab0:	463a      	mov	r2, r7
 8003ab2:	4630      	mov	r0, r6
 8003ab4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ab8:	f7ff ffdc 	bl	8003a74 <__sfputc_r>
 8003abc:	1c43      	adds	r3, r0, #1
 8003abe:	d1f3      	bne.n	8003aa8 <__sfputs_r+0xa>
 8003ac0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003ac4 <_vfiprintf_r>:
 8003ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ac8:	460d      	mov	r5, r1
 8003aca:	4614      	mov	r4, r2
 8003acc:	4698      	mov	r8, r3
 8003ace:	4606      	mov	r6, r0
 8003ad0:	b09d      	sub	sp, #116	; 0x74
 8003ad2:	b118      	cbz	r0, 8003adc <_vfiprintf_r+0x18>
 8003ad4:	6983      	ldr	r3, [r0, #24]
 8003ad6:	b90b      	cbnz	r3, 8003adc <_vfiprintf_r+0x18>
 8003ad8:	f000 fcac 	bl	8004434 <__sinit>
 8003adc:	4b89      	ldr	r3, [pc, #548]	; (8003d04 <_vfiprintf_r+0x240>)
 8003ade:	429d      	cmp	r5, r3
 8003ae0:	d11b      	bne.n	8003b1a <_vfiprintf_r+0x56>
 8003ae2:	6875      	ldr	r5, [r6, #4]
 8003ae4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003ae6:	07d9      	lsls	r1, r3, #31
 8003ae8:	d405      	bmi.n	8003af6 <_vfiprintf_r+0x32>
 8003aea:	89ab      	ldrh	r3, [r5, #12]
 8003aec:	059a      	lsls	r2, r3, #22
 8003aee:	d402      	bmi.n	8003af6 <_vfiprintf_r+0x32>
 8003af0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003af2:	f000 fd3d 	bl	8004570 <__retarget_lock_acquire_recursive>
 8003af6:	89ab      	ldrh	r3, [r5, #12]
 8003af8:	071b      	lsls	r3, r3, #28
 8003afa:	d501      	bpl.n	8003b00 <_vfiprintf_r+0x3c>
 8003afc:	692b      	ldr	r3, [r5, #16]
 8003afe:	b9eb      	cbnz	r3, 8003b3c <_vfiprintf_r+0x78>
 8003b00:	4629      	mov	r1, r5
 8003b02:	4630      	mov	r0, r6
 8003b04:	f000 fb06 	bl	8004114 <__swsetup_r>
 8003b08:	b1c0      	cbz	r0, 8003b3c <_vfiprintf_r+0x78>
 8003b0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003b0c:	07dc      	lsls	r4, r3, #31
 8003b0e:	d50e      	bpl.n	8003b2e <_vfiprintf_r+0x6a>
 8003b10:	f04f 30ff 	mov.w	r0, #4294967295
 8003b14:	b01d      	add	sp, #116	; 0x74
 8003b16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b1a:	4b7b      	ldr	r3, [pc, #492]	; (8003d08 <_vfiprintf_r+0x244>)
 8003b1c:	429d      	cmp	r5, r3
 8003b1e:	d101      	bne.n	8003b24 <_vfiprintf_r+0x60>
 8003b20:	68b5      	ldr	r5, [r6, #8]
 8003b22:	e7df      	b.n	8003ae4 <_vfiprintf_r+0x20>
 8003b24:	4b79      	ldr	r3, [pc, #484]	; (8003d0c <_vfiprintf_r+0x248>)
 8003b26:	429d      	cmp	r5, r3
 8003b28:	bf08      	it	eq
 8003b2a:	68f5      	ldreq	r5, [r6, #12]
 8003b2c:	e7da      	b.n	8003ae4 <_vfiprintf_r+0x20>
 8003b2e:	89ab      	ldrh	r3, [r5, #12]
 8003b30:	0598      	lsls	r0, r3, #22
 8003b32:	d4ed      	bmi.n	8003b10 <_vfiprintf_r+0x4c>
 8003b34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003b36:	f000 fd1c 	bl	8004572 <__retarget_lock_release_recursive>
 8003b3a:	e7e9      	b.n	8003b10 <_vfiprintf_r+0x4c>
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	9309      	str	r3, [sp, #36]	; 0x24
 8003b40:	2320      	movs	r3, #32
 8003b42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003b46:	2330      	movs	r3, #48	; 0x30
 8003b48:	f04f 0901 	mov.w	r9, #1
 8003b4c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003b50:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8003d10 <_vfiprintf_r+0x24c>
 8003b54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003b58:	4623      	mov	r3, r4
 8003b5a:	469a      	mov	sl, r3
 8003b5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003b60:	b10a      	cbz	r2, 8003b66 <_vfiprintf_r+0xa2>
 8003b62:	2a25      	cmp	r2, #37	; 0x25
 8003b64:	d1f9      	bne.n	8003b5a <_vfiprintf_r+0x96>
 8003b66:	ebba 0b04 	subs.w	fp, sl, r4
 8003b6a:	d00b      	beq.n	8003b84 <_vfiprintf_r+0xc0>
 8003b6c:	465b      	mov	r3, fp
 8003b6e:	4622      	mov	r2, r4
 8003b70:	4629      	mov	r1, r5
 8003b72:	4630      	mov	r0, r6
 8003b74:	f7ff ff93 	bl	8003a9e <__sfputs_r>
 8003b78:	3001      	adds	r0, #1
 8003b7a:	f000 80aa 	beq.w	8003cd2 <_vfiprintf_r+0x20e>
 8003b7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003b80:	445a      	add	r2, fp
 8003b82:	9209      	str	r2, [sp, #36]	; 0x24
 8003b84:	f89a 3000 	ldrb.w	r3, [sl]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	f000 80a2 	beq.w	8003cd2 <_vfiprintf_r+0x20e>
 8003b8e:	2300      	movs	r3, #0
 8003b90:	f04f 32ff 	mov.w	r2, #4294967295
 8003b94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003b98:	f10a 0a01 	add.w	sl, sl, #1
 8003b9c:	9304      	str	r3, [sp, #16]
 8003b9e:	9307      	str	r3, [sp, #28]
 8003ba0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003ba4:	931a      	str	r3, [sp, #104]	; 0x68
 8003ba6:	4654      	mov	r4, sl
 8003ba8:	2205      	movs	r2, #5
 8003baa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bae:	4858      	ldr	r0, [pc, #352]	; (8003d10 <_vfiprintf_r+0x24c>)
 8003bb0:	f000 fd44 	bl	800463c <memchr>
 8003bb4:	9a04      	ldr	r2, [sp, #16]
 8003bb6:	b9d8      	cbnz	r0, 8003bf0 <_vfiprintf_r+0x12c>
 8003bb8:	06d1      	lsls	r1, r2, #27
 8003bba:	bf44      	itt	mi
 8003bbc:	2320      	movmi	r3, #32
 8003bbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003bc2:	0713      	lsls	r3, r2, #28
 8003bc4:	bf44      	itt	mi
 8003bc6:	232b      	movmi	r3, #43	; 0x2b
 8003bc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003bcc:	f89a 3000 	ldrb.w	r3, [sl]
 8003bd0:	2b2a      	cmp	r3, #42	; 0x2a
 8003bd2:	d015      	beq.n	8003c00 <_vfiprintf_r+0x13c>
 8003bd4:	4654      	mov	r4, sl
 8003bd6:	2000      	movs	r0, #0
 8003bd8:	f04f 0c0a 	mov.w	ip, #10
 8003bdc:	9a07      	ldr	r2, [sp, #28]
 8003bde:	4621      	mov	r1, r4
 8003be0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003be4:	3b30      	subs	r3, #48	; 0x30
 8003be6:	2b09      	cmp	r3, #9
 8003be8:	d94e      	bls.n	8003c88 <_vfiprintf_r+0x1c4>
 8003bea:	b1b0      	cbz	r0, 8003c1a <_vfiprintf_r+0x156>
 8003bec:	9207      	str	r2, [sp, #28]
 8003bee:	e014      	b.n	8003c1a <_vfiprintf_r+0x156>
 8003bf0:	eba0 0308 	sub.w	r3, r0, r8
 8003bf4:	fa09 f303 	lsl.w	r3, r9, r3
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	46a2      	mov	sl, r4
 8003bfc:	9304      	str	r3, [sp, #16]
 8003bfe:	e7d2      	b.n	8003ba6 <_vfiprintf_r+0xe2>
 8003c00:	9b03      	ldr	r3, [sp, #12]
 8003c02:	1d19      	adds	r1, r3, #4
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	9103      	str	r1, [sp, #12]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	bfbb      	ittet	lt
 8003c0c:	425b      	neglt	r3, r3
 8003c0e:	f042 0202 	orrlt.w	r2, r2, #2
 8003c12:	9307      	strge	r3, [sp, #28]
 8003c14:	9307      	strlt	r3, [sp, #28]
 8003c16:	bfb8      	it	lt
 8003c18:	9204      	strlt	r2, [sp, #16]
 8003c1a:	7823      	ldrb	r3, [r4, #0]
 8003c1c:	2b2e      	cmp	r3, #46	; 0x2e
 8003c1e:	d10c      	bne.n	8003c3a <_vfiprintf_r+0x176>
 8003c20:	7863      	ldrb	r3, [r4, #1]
 8003c22:	2b2a      	cmp	r3, #42	; 0x2a
 8003c24:	d135      	bne.n	8003c92 <_vfiprintf_r+0x1ce>
 8003c26:	9b03      	ldr	r3, [sp, #12]
 8003c28:	3402      	adds	r4, #2
 8003c2a:	1d1a      	adds	r2, r3, #4
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	9203      	str	r2, [sp, #12]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	bfb8      	it	lt
 8003c34:	f04f 33ff 	movlt.w	r3, #4294967295
 8003c38:	9305      	str	r3, [sp, #20]
 8003c3a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003d20 <_vfiprintf_r+0x25c>
 8003c3e:	2203      	movs	r2, #3
 8003c40:	4650      	mov	r0, sl
 8003c42:	7821      	ldrb	r1, [r4, #0]
 8003c44:	f000 fcfa 	bl	800463c <memchr>
 8003c48:	b140      	cbz	r0, 8003c5c <_vfiprintf_r+0x198>
 8003c4a:	2340      	movs	r3, #64	; 0x40
 8003c4c:	eba0 000a 	sub.w	r0, r0, sl
 8003c50:	fa03 f000 	lsl.w	r0, r3, r0
 8003c54:	9b04      	ldr	r3, [sp, #16]
 8003c56:	3401      	adds	r4, #1
 8003c58:	4303      	orrs	r3, r0
 8003c5a:	9304      	str	r3, [sp, #16]
 8003c5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c60:	2206      	movs	r2, #6
 8003c62:	482c      	ldr	r0, [pc, #176]	; (8003d14 <_vfiprintf_r+0x250>)
 8003c64:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003c68:	f000 fce8 	bl	800463c <memchr>
 8003c6c:	2800      	cmp	r0, #0
 8003c6e:	d03f      	beq.n	8003cf0 <_vfiprintf_r+0x22c>
 8003c70:	4b29      	ldr	r3, [pc, #164]	; (8003d18 <_vfiprintf_r+0x254>)
 8003c72:	bb1b      	cbnz	r3, 8003cbc <_vfiprintf_r+0x1f8>
 8003c74:	9b03      	ldr	r3, [sp, #12]
 8003c76:	3307      	adds	r3, #7
 8003c78:	f023 0307 	bic.w	r3, r3, #7
 8003c7c:	3308      	adds	r3, #8
 8003c7e:	9303      	str	r3, [sp, #12]
 8003c80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c82:	443b      	add	r3, r7
 8003c84:	9309      	str	r3, [sp, #36]	; 0x24
 8003c86:	e767      	b.n	8003b58 <_vfiprintf_r+0x94>
 8003c88:	460c      	mov	r4, r1
 8003c8a:	2001      	movs	r0, #1
 8003c8c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003c90:	e7a5      	b.n	8003bde <_vfiprintf_r+0x11a>
 8003c92:	2300      	movs	r3, #0
 8003c94:	f04f 0c0a 	mov.w	ip, #10
 8003c98:	4619      	mov	r1, r3
 8003c9a:	3401      	adds	r4, #1
 8003c9c:	9305      	str	r3, [sp, #20]
 8003c9e:	4620      	mov	r0, r4
 8003ca0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ca4:	3a30      	subs	r2, #48	; 0x30
 8003ca6:	2a09      	cmp	r2, #9
 8003ca8:	d903      	bls.n	8003cb2 <_vfiprintf_r+0x1ee>
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d0c5      	beq.n	8003c3a <_vfiprintf_r+0x176>
 8003cae:	9105      	str	r1, [sp, #20]
 8003cb0:	e7c3      	b.n	8003c3a <_vfiprintf_r+0x176>
 8003cb2:	4604      	mov	r4, r0
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	fb0c 2101 	mla	r1, ip, r1, r2
 8003cba:	e7f0      	b.n	8003c9e <_vfiprintf_r+0x1da>
 8003cbc:	ab03      	add	r3, sp, #12
 8003cbe:	9300      	str	r3, [sp, #0]
 8003cc0:	462a      	mov	r2, r5
 8003cc2:	4630      	mov	r0, r6
 8003cc4:	4b15      	ldr	r3, [pc, #84]	; (8003d1c <_vfiprintf_r+0x258>)
 8003cc6:	a904      	add	r1, sp, #16
 8003cc8:	f3af 8000 	nop.w
 8003ccc:	4607      	mov	r7, r0
 8003cce:	1c78      	adds	r0, r7, #1
 8003cd0:	d1d6      	bne.n	8003c80 <_vfiprintf_r+0x1bc>
 8003cd2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003cd4:	07d9      	lsls	r1, r3, #31
 8003cd6:	d405      	bmi.n	8003ce4 <_vfiprintf_r+0x220>
 8003cd8:	89ab      	ldrh	r3, [r5, #12]
 8003cda:	059a      	lsls	r2, r3, #22
 8003cdc:	d402      	bmi.n	8003ce4 <_vfiprintf_r+0x220>
 8003cde:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003ce0:	f000 fc47 	bl	8004572 <__retarget_lock_release_recursive>
 8003ce4:	89ab      	ldrh	r3, [r5, #12]
 8003ce6:	065b      	lsls	r3, r3, #25
 8003ce8:	f53f af12 	bmi.w	8003b10 <_vfiprintf_r+0x4c>
 8003cec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003cee:	e711      	b.n	8003b14 <_vfiprintf_r+0x50>
 8003cf0:	ab03      	add	r3, sp, #12
 8003cf2:	9300      	str	r3, [sp, #0]
 8003cf4:	462a      	mov	r2, r5
 8003cf6:	4630      	mov	r0, r6
 8003cf8:	4b08      	ldr	r3, [pc, #32]	; (8003d1c <_vfiprintf_r+0x258>)
 8003cfa:	a904      	add	r1, sp, #16
 8003cfc:	f000 f882 	bl	8003e04 <_printf_i>
 8003d00:	e7e4      	b.n	8003ccc <_vfiprintf_r+0x208>
 8003d02:	bf00      	nop
 8003d04:	08004b20 	.word	0x08004b20
 8003d08:	08004b40 	.word	0x08004b40
 8003d0c:	08004b00 	.word	0x08004b00
 8003d10:	08004acd 	.word	0x08004acd
 8003d14:	08004ad7 	.word	0x08004ad7
 8003d18:	00000000 	.word	0x00000000
 8003d1c:	08003a9f 	.word	0x08003a9f
 8003d20:	08004ad3 	.word	0x08004ad3

08003d24 <_printf_common>:
 8003d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d28:	4616      	mov	r6, r2
 8003d2a:	4699      	mov	r9, r3
 8003d2c:	688a      	ldr	r2, [r1, #8]
 8003d2e:	690b      	ldr	r3, [r1, #16]
 8003d30:	4607      	mov	r7, r0
 8003d32:	4293      	cmp	r3, r2
 8003d34:	bfb8      	it	lt
 8003d36:	4613      	movlt	r3, r2
 8003d38:	6033      	str	r3, [r6, #0]
 8003d3a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003d3e:	460c      	mov	r4, r1
 8003d40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003d44:	b10a      	cbz	r2, 8003d4a <_printf_common+0x26>
 8003d46:	3301      	adds	r3, #1
 8003d48:	6033      	str	r3, [r6, #0]
 8003d4a:	6823      	ldr	r3, [r4, #0]
 8003d4c:	0699      	lsls	r1, r3, #26
 8003d4e:	bf42      	ittt	mi
 8003d50:	6833      	ldrmi	r3, [r6, #0]
 8003d52:	3302      	addmi	r3, #2
 8003d54:	6033      	strmi	r3, [r6, #0]
 8003d56:	6825      	ldr	r5, [r4, #0]
 8003d58:	f015 0506 	ands.w	r5, r5, #6
 8003d5c:	d106      	bne.n	8003d6c <_printf_common+0x48>
 8003d5e:	f104 0a19 	add.w	sl, r4, #25
 8003d62:	68e3      	ldr	r3, [r4, #12]
 8003d64:	6832      	ldr	r2, [r6, #0]
 8003d66:	1a9b      	subs	r3, r3, r2
 8003d68:	42ab      	cmp	r3, r5
 8003d6a:	dc28      	bgt.n	8003dbe <_printf_common+0x9a>
 8003d6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003d70:	1e13      	subs	r3, r2, #0
 8003d72:	6822      	ldr	r2, [r4, #0]
 8003d74:	bf18      	it	ne
 8003d76:	2301      	movne	r3, #1
 8003d78:	0692      	lsls	r2, r2, #26
 8003d7a:	d42d      	bmi.n	8003dd8 <_printf_common+0xb4>
 8003d7c:	4649      	mov	r1, r9
 8003d7e:	4638      	mov	r0, r7
 8003d80:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003d84:	47c0      	blx	r8
 8003d86:	3001      	adds	r0, #1
 8003d88:	d020      	beq.n	8003dcc <_printf_common+0xa8>
 8003d8a:	6823      	ldr	r3, [r4, #0]
 8003d8c:	68e5      	ldr	r5, [r4, #12]
 8003d8e:	f003 0306 	and.w	r3, r3, #6
 8003d92:	2b04      	cmp	r3, #4
 8003d94:	bf18      	it	ne
 8003d96:	2500      	movne	r5, #0
 8003d98:	6832      	ldr	r2, [r6, #0]
 8003d9a:	f04f 0600 	mov.w	r6, #0
 8003d9e:	68a3      	ldr	r3, [r4, #8]
 8003da0:	bf08      	it	eq
 8003da2:	1aad      	subeq	r5, r5, r2
 8003da4:	6922      	ldr	r2, [r4, #16]
 8003da6:	bf08      	it	eq
 8003da8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003dac:	4293      	cmp	r3, r2
 8003dae:	bfc4      	itt	gt
 8003db0:	1a9b      	subgt	r3, r3, r2
 8003db2:	18ed      	addgt	r5, r5, r3
 8003db4:	341a      	adds	r4, #26
 8003db6:	42b5      	cmp	r5, r6
 8003db8:	d11a      	bne.n	8003df0 <_printf_common+0xcc>
 8003dba:	2000      	movs	r0, #0
 8003dbc:	e008      	b.n	8003dd0 <_printf_common+0xac>
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	4652      	mov	r2, sl
 8003dc2:	4649      	mov	r1, r9
 8003dc4:	4638      	mov	r0, r7
 8003dc6:	47c0      	blx	r8
 8003dc8:	3001      	adds	r0, #1
 8003dca:	d103      	bne.n	8003dd4 <_printf_common+0xb0>
 8003dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8003dd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dd4:	3501      	adds	r5, #1
 8003dd6:	e7c4      	b.n	8003d62 <_printf_common+0x3e>
 8003dd8:	2030      	movs	r0, #48	; 0x30
 8003dda:	18e1      	adds	r1, r4, r3
 8003ddc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003de0:	1c5a      	adds	r2, r3, #1
 8003de2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003de6:	4422      	add	r2, r4
 8003de8:	3302      	adds	r3, #2
 8003dea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003dee:	e7c5      	b.n	8003d7c <_printf_common+0x58>
 8003df0:	2301      	movs	r3, #1
 8003df2:	4622      	mov	r2, r4
 8003df4:	4649      	mov	r1, r9
 8003df6:	4638      	mov	r0, r7
 8003df8:	47c0      	blx	r8
 8003dfa:	3001      	adds	r0, #1
 8003dfc:	d0e6      	beq.n	8003dcc <_printf_common+0xa8>
 8003dfe:	3601      	adds	r6, #1
 8003e00:	e7d9      	b.n	8003db6 <_printf_common+0x92>
	...

08003e04 <_printf_i>:
 8003e04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e08:	460c      	mov	r4, r1
 8003e0a:	7e27      	ldrb	r7, [r4, #24]
 8003e0c:	4691      	mov	r9, r2
 8003e0e:	2f78      	cmp	r7, #120	; 0x78
 8003e10:	4680      	mov	r8, r0
 8003e12:	469a      	mov	sl, r3
 8003e14:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003e16:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e1a:	d807      	bhi.n	8003e2c <_printf_i+0x28>
 8003e1c:	2f62      	cmp	r7, #98	; 0x62
 8003e1e:	d80a      	bhi.n	8003e36 <_printf_i+0x32>
 8003e20:	2f00      	cmp	r7, #0
 8003e22:	f000 80d9 	beq.w	8003fd8 <_printf_i+0x1d4>
 8003e26:	2f58      	cmp	r7, #88	; 0x58
 8003e28:	f000 80a4 	beq.w	8003f74 <_printf_i+0x170>
 8003e2c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003e30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003e34:	e03a      	b.n	8003eac <_printf_i+0xa8>
 8003e36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003e3a:	2b15      	cmp	r3, #21
 8003e3c:	d8f6      	bhi.n	8003e2c <_printf_i+0x28>
 8003e3e:	a001      	add	r0, pc, #4	; (adr r0, 8003e44 <_printf_i+0x40>)
 8003e40:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003e44:	08003e9d 	.word	0x08003e9d
 8003e48:	08003eb1 	.word	0x08003eb1
 8003e4c:	08003e2d 	.word	0x08003e2d
 8003e50:	08003e2d 	.word	0x08003e2d
 8003e54:	08003e2d 	.word	0x08003e2d
 8003e58:	08003e2d 	.word	0x08003e2d
 8003e5c:	08003eb1 	.word	0x08003eb1
 8003e60:	08003e2d 	.word	0x08003e2d
 8003e64:	08003e2d 	.word	0x08003e2d
 8003e68:	08003e2d 	.word	0x08003e2d
 8003e6c:	08003e2d 	.word	0x08003e2d
 8003e70:	08003fbf 	.word	0x08003fbf
 8003e74:	08003ee1 	.word	0x08003ee1
 8003e78:	08003fa1 	.word	0x08003fa1
 8003e7c:	08003e2d 	.word	0x08003e2d
 8003e80:	08003e2d 	.word	0x08003e2d
 8003e84:	08003fe1 	.word	0x08003fe1
 8003e88:	08003e2d 	.word	0x08003e2d
 8003e8c:	08003ee1 	.word	0x08003ee1
 8003e90:	08003e2d 	.word	0x08003e2d
 8003e94:	08003e2d 	.word	0x08003e2d
 8003e98:	08003fa9 	.word	0x08003fa9
 8003e9c:	680b      	ldr	r3, [r1, #0]
 8003e9e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003ea2:	1d1a      	adds	r2, r3, #4
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	600a      	str	r2, [r1, #0]
 8003ea8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003eac:	2301      	movs	r3, #1
 8003eae:	e0a4      	b.n	8003ffa <_printf_i+0x1f6>
 8003eb0:	6825      	ldr	r5, [r4, #0]
 8003eb2:	6808      	ldr	r0, [r1, #0]
 8003eb4:	062e      	lsls	r6, r5, #24
 8003eb6:	f100 0304 	add.w	r3, r0, #4
 8003eba:	d50a      	bpl.n	8003ed2 <_printf_i+0xce>
 8003ebc:	6805      	ldr	r5, [r0, #0]
 8003ebe:	600b      	str	r3, [r1, #0]
 8003ec0:	2d00      	cmp	r5, #0
 8003ec2:	da03      	bge.n	8003ecc <_printf_i+0xc8>
 8003ec4:	232d      	movs	r3, #45	; 0x2d
 8003ec6:	426d      	negs	r5, r5
 8003ec8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ecc:	230a      	movs	r3, #10
 8003ece:	485e      	ldr	r0, [pc, #376]	; (8004048 <_printf_i+0x244>)
 8003ed0:	e019      	b.n	8003f06 <_printf_i+0x102>
 8003ed2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003ed6:	6805      	ldr	r5, [r0, #0]
 8003ed8:	600b      	str	r3, [r1, #0]
 8003eda:	bf18      	it	ne
 8003edc:	b22d      	sxthne	r5, r5
 8003ede:	e7ef      	b.n	8003ec0 <_printf_i+0xbc>
 8003ee0:	680b      	ldr	r3, [r1, #0]
 8003ee2:	6825      	ldr	r5, [r4, #0]
 8003ee4:	1d18      	adds	r0, r3, #4
 8003ee6:	6008      	str	r0, [r1, #0]
 8003ee8:	0628      	lsls	r0, r5, #24
 8003eea:	d501      	bpl.n	8003ef0 <_printf_i+0xec>
 8003eec:	681d      	ldr	r5, [r3, #0]
 8003eee:	e002      	b.n	8003ef6 <_printf_i+0xf2>
 8003ef0:	0669      	lsls	r1, r5, #25
 8003ef2:	d5fb      	bpl.n	8003eec <_printf_i+0xe8>
 8003ef4:	881d      	ldrh	r5, [r3, #0]
 8003ef6:	2f6f      	cmp	r7, #111	; 0x6f
 8003ef8:	bf0c      	ite	eq
 8003efa:	2308      	moveq	r3, #8
 8003efc:	230a      	movne	r3, #10
 8003efe:	4852      	ldr	r0, [pc, #328]	; (8004048 <_printf_i+0x244>)
 8003f00:	2100      	movs	r1, #0
 8003f02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003f06:	6866      	ldr	r6, [r4, #4]
 8003f08:	2e00      	cmp	r6, #0
 8003f0a:	bfa8      	it	ge
 8003f0c:	6821      	ldrge	r1, [r4, #0]
 8003f0e:	60a6      	str	r6, [r4, #8]
 8003f10:	bfa4      	itt	ge
 8003f12:	f021 0104 	bicge.w	r1, r1, #4
 8003f16:	6021      	strge	r1, [r4, #0]
 8003f18:	b90d      	cbnz	r5, 8003f1e <_printf_i+0x11a>
 8003f1a:	2e00      	cmp	r6, #0
 8003f1c:	d04d      	beq.n	8003fba <_printf_i+0x1b6>
 8003f1e:	4616      	mov	r6, r2
 8003f20:	fbb5 f1f3 	udiv	r1, r5, r3
 8003f24:	fb03 5711 	mls	r7, r3, r1, r5
 8003f28:	5dc7      	ldrb	r7, [r0, r7]
 8003f2a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003f2e:	462f      	mov	r7, r5
 8003f30:	42bb      	cmp	r3, r7
 8003f32:	460d      	mov	r5, r1
 8003f34:	d9f4      	bls.n	8003f20 <_printf_i+0x11c>
 8003f36:	2b08      	cmp	r3, #8
 8003f38:	d10b      	bne.n	8003f52 <_printf_i+0x14e>
 8003f3a:	6823      	ldr	r3, [r4, #0]
 8003f3c:	07df      	lsls	r7, r3, #31
 8003f3e:	d508      	bpl.n	8003f52 <_printf_i+0x14e>
 8003f40:	6923      	ldr	r3, [r4, #16]
 8003f42:	6861      	ldr	r1, [r4, #4]
 8003f44:	4299      	cmp	r1, r3
 8003f46:	bfde      	ittt	le
 8003f48:	2330      	movle	r3, #48	; 0x30
 8003f4a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003f4e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003f52:	1b92      	subs	r2, r2, r6
 8003f54:	6122      	str	r2, [r4, #16]
 8003f56:	464b      	mov	r3, r9
 8003f58:	4621      	mov	r1, r4
 8003f5a:	4640      	mov	r0, r8
 8003f5c:	f8cd a000 	str.w	sl, [sp]
 8003f60:	aa03      	add	r2, sp, #12
 8003f62:	f7ff fedf 	bl	8003d24 <_printf_common>
 8003f66:	3001      	adds	r0, #1
 8003f68:	d14c      	bne.n	8004004 <_printf_i+0x200>
 8003f6a:	f04f 30ff 	mov.w	r0, #4294967295
 8003f6e:	b004      	add	sp, #16
 8003f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f74:	4834      	ldr	r0, [pc, #208]	; (8004048 <_printf_i+0x244>)
 8003f76:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003f7a:	680e      	ldr	r6, [r1, #0]
 8003f7c:	6823      	ldr	r3, [r4, #0]
 8003f7e:	f856 5b04 	ldr.w	r5, [r6], #4
 8003f82:	061f      	lsls	r7, r3, #24
 8003f84:	600e      	str	r6, [r1, #0]
 8003f86:	d514      	bpl.n	8003fb2 <_printf_i+0x1ae>
 8003f88:	07d9      	lsls	r1, r3, #31
 8003f8a:	bf44      	itt	mi
 8003f8c:	f043 0320 	orrmi.w	r3, r3, #32
 8003f90:	6023      	strmi	r3, [r4, #0]
 8003f92:	b91d      	cbnz	r5, 8003f9c <_printf_i+0x198>
 8003f94:	6823      	ldr	r3, [r4, #0]
 8003f96:	f023 0320 	bic.w	r3, r3, #32
 8003f9a:	6023      	str	r3, [r4, #0]
 8003f9c:	2310      	movs	r3, #16
 8003f9e:	e7af      	b.n	8003f00 <_printf_i+0xfc>
 8003fa0:	6823      	ldr	r3, [r4, #0]
 8003fa2:	f043 0320 	orr.w	r3, r3, #32
 8003fa6:	6023      	str	r3, [r4, #0]
 8003fa8:	2378      	movs	r3, #120	; 0x78
 8003faa:	4828      	ldr	r0, [pc, #160]	; (800404c <_printf_i+0x248>)
 8003fac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003fb0:	e7e3      	b.n	8003f7a <_printf_i+0x176>
 8003fb2:	065e      	lsls	r6, r3, #25
 8003fb4:	bf48      	it	mi
 8003fb6:	b2ad      	uxthmi	r5, r5
 8003fb8:	e7e6      	b.n	8003f88 <_printf_i+0x184>
 8003fba:	4616      	mov	r6, r2
 8003fbc:	e7bb      	b.n	8003f36 <_printf_i+0x132>
 8003fbe:	680b      	ldr	r3, [r1, #0]
 8003fc0:	6826      	ldr	r6, [r4, #0]
 8003fc2:	1d1d      	adds	r5, r3, #4
 8003fc4:	6960      	ldr	r0, [r4, #20]
 8003fc6:	600d      	str	r5, [r1, #0]
 8003fc8:	0635      	lsls	r5, r6, #24
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	d501      	bpl.n	8003fd2 <_printf_i+0x1ce>
 8003fce:	6018      	str	r0, [r3, #0]
 8003fd0:	e002      	b.n	8003fd8 <_printf_i+0x1d4>
 8003fd2:	0671      	lsls	r1, r6, #25
 8003fd4:	d5fb      	bpl.n	8003fce <_printf_i+0x1ca>
 8003fd6:	8018      	strh	r0, [r3, #0]
 8003fd8:	2300      	movs	r3, #0
 8003fda:	4616      	mov	r6, r2
 8003fdc:	6123      	str	r3, [r4, #16]
 8003fde:	e7ba      	b.n	8003f56 <_printf_i+0x152>
 8003fe0:	680b      	ldr	r3, [r1, #0]
 8003fe2:	1d1a      	adds	r2, r3, #4
 8003fe4:	600a      	str	r2, [r1, #0]
 8003fe6:	681e      	ldr	r6, [r3, #0]
 8003fe8:	2100      	movs	r1, #0
 8003fea:	4630      	mov	r0, r6
 8003fec:	6862      	ldr	r2, [r4, #4]
 8003fee:	f000 fb25 	bl	800463c <memchr>
 8003ff2:	b108      	cbz	r0, 8003ff8 <_printf_i+0x1f4>
 8003ff4:	1b80      	subs	r0, r0, r6
 8003ff6:	6060      	str	r0, [r4, #4]
 8003ff8:	6863      	ldr	r3, [r4, #4]
 8003ffa:	6123      	str	r3, [r4, #16]
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004002:	e7a8      	b.n	8003f56 <_printf_i+0x152>
 8004004:	4632      	mov	r2, r6
 8004006:	4649      	mov	r1, r9
 8004008:	4640      	mov	r0, r8
 800400a:	6923      	ldr	r3, [r4, #16]
 800400c:	47d0      	blx	sl
 800400e:	3001      	adds	r0, #1
 8004010:	d0ab      	beq.n	8003f6a <_printf_i+0x166>
 8004012:	6823      	ldr	r3, [r4, #0]
 8004014:	079b      	lsls	r3, r3, #30
 8004016:	d413      	bmi.n	8004040 <_printf_i+0x23c>
 8004018:	68e0      	ldr	r0, [r4, #12]
 800401a:	9b03      	ldr	r3, [sp, #12]
 800401c:	4298      	cmp	r0, r3
 800401e:	bfb8      	it	lt
 8004020:	4618      	movlt	r0, r3
 8004022:	e7a4      	b.n	8003f6e <_printf_i+0x16a>
 8004024:	2301      	movs	r3, #1
 8004026:	4632      	mov	r2, r6
 8004028:	4649      	mov	r1, r9
 800402a:	4640      	mov	r0, r8
 800402c:	47d0      	blx	sl
 800402e:	3001      	adds	r0, #1
 8004030:	d09b      	beq.n	8003f6a <_printf_i+0x166>
 8004032:	3501      	adds	r5, #1
 8004034:	68e3      	ldr	r3, [r4, #12]
 8004036:	9903      	ldr	r1, [sp, #12]
 8004038:	1a5b      	subs	r3, r3, r1
 800403a:	42ab      	cmp	r3, r5
 800403c:	dcf2      	bgt.n	8004024 <_printf_i+0x220>
 800403e:	e7eb      	b.n	8004018 <_printf_i+0x214>
 8004040:	2500      	movs	r5, #0
 8004042:	f104 0619 	add.w	r6, r4, #25
 8004046:	e7f5      	b.n	8004034 <_printf_i+0x230>
 8004048:	08004ade 	.word	0x08004ade
 800404c:	08004aef 	.word	0x08004aef

08004050 <_sbrk_r>:
 8004050:	b538      	push	{r3, r4, r5, lr}
 8004052:	2300      	movs	r3, #0
 8004054:	4d05      	ldr	r5, [pc, #20]	; (800406c <_sbrk_r+0x1c>)
 8004056:	4604      	mov	r4, r0
 8004058:	4608      	mov	r0, r1
 800405a:	602b      	str	r3, [r5, #0]
 800405c:	f7fd f956 	bl	800130c <_sbrk>
 8004060:	1c43      	adds	r3, r0, #1
 8004062:	d102      	bne.n	800406a <_sbrk_r+0x1a>
 8004064:	682b      	ldr	r3, [r5, #0]
 8004066:	b103      	cbz	r3, 800406a <_sbrk_r+0x1a>
 8004068:	6023      	str	r3, [r4, #0]
 800406a:	bd38      	pop	{r3, r4, r5, pc}
 800406c:	20000708 	.word	0x20000708

08004070 <__swbuf_r>:
 8004070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004072:	460e      	mov	r6, r1
 8004074:	4614      	mov	r4, r2
 8004076:	4605      	mov	r5, r0
 8004078:	b118      	cbz	r0, 8004082 <__swbuf_r+0x12>
 800407a:	6983      	ldr	r3, [r0, #24]
 800407c:	b90b      	cbnz	r3, 8004082 <__swbuf_r+0x12>
 800407e:	f000 f9d9 	bl	8004434 <__sinit>
 8004082:	4b21      	ldr	r3, [pc, #132]	; (8004108 <__swbuf_r+0x98>)
 8004084:	429c      	cmp	r4, r3
 8004086:	d12b      	bne.n	80040e0 <__swbuf_r+0x70>
 8004088:	686c      	ldr	r4, [r5, #4]
 800408a:	69a3      	ldr	r3, [r4, #24]
 800408c:	60a3      	str	r3, [r4, #8]
 800408e:	89a3      	ldrh	r3, [r4, #12]
 8004090:	071a      	lsls	r2, r3, #28
 8004092:	d52f      	bpl.n	80040f4 <__swbuf_r+0x84>
 8004094:	6923      	ldr	r3, [r4, #16]
 8004096:	b36b      	cbz	r3, 80040f4 <__swbuf_r+0x84>
 8004098:	6923      	ldr	r3, [r4, #16]
 800409a:	6820      	ldr	r0, [r4, #0]
 800409c:	b2f6      	uxtb	r6, r6
 800409e:	1ac0      	subs	r0, r0, r3
 80040a0:	6963      	ldr	r3, [r4, #20]
 80040a2:	4637      	mov	r7, r6
 80040a4:	4283      	cmp	r3, r0
 80040a6:	dc04      	bgt.n	80040b2 <__swbuf_r+0x42>
 80040a8:	4621      	mov	r1, r4
 80040aa:	4628      	mov	r0, r5
 80040ac:	f000 f92e 	bl	800430c <_fflush_r>
 80040b0:	bb30      	cbnz	r0, 8004100 <__swbuf_r+0x90>
 80040b2:	68a3      	ldr	r3, [r4, #8]
 80040b4:	3001      	adds	r0, #1
 80040b6:	3b01      	subs	r3, #1
 80040b8:	60a3      	str	r3, [r4, #8]
 80040ba:	6823      	ldr	r3, [r4, #0]
 80040bc:	1c5a      	adds	r2, r3, #1
 80040be:	6022      	str	r2, [r4, #0]
 80040c0:	701e      	strb	r6, [r3, #0]
 80040c2:	6963      	ldr	r3, [r4, #20]
 80040c4:	4283      	cmp	r3, r0
 80040c6:	d004      	beq.n	80040d2 <__swbuf_r+0x62>
 80040c8:	89a3      	ldrh	r3, [r4, #12]
 80040ca:	07db      	lsls	r3, r3, #31
 80040cc:	d506      	bpl.n	80040dc <__swbuf_r+0x6c>
 80040ce:	2e0a      	cmp	r6, #10
 80040d0:	d104      	bne.n	80040dc <__swbuf_r+0x6c>
 80040d2:	4621      	mov	r1, r4
 80040d4:	4628      	mov	r0, r5
 80040d6:	f000 f919 	bl	800430c <_fflush_r>
 80040da:	b988      	cbnz	r0, 8004100 <__swbuf_r+0x90>
 80040dc:	4638      	mov	r0, r7
 80040de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80040e0:	4b0a      	ldr	r3, [pc, #40]	; (800410c <__swbuf_r+0x9c>)
 80040e2:	429c      	cmp	r4, r3
 80040e4:	d101      	bne.n	80040ea <__swbuf_r+0x7a>
 80040e6:	68ac      	ldr	r4, [r5, #8]
 80040e8:	e7cf      	b.n	800408a <__swbuf_r+0x1a>
 80040ea:	4b09      	ldr	r3, [pc, #36]	; (8004110 <__swbuf_r+0xa0>)
 80040ec:	429c      	cmp	r4, r3
 80040ee:	bf08      	it	eq
 80040f0:	68ec      	ldreq	r4, [r5, #12]
 80040f2:	e7ca      	b.n	800408a <__swbuf_r+0x1a>
 80040f4:	4621      	mov	r1, r4
 80040f6:	4628      	mov	r0, r5
 80040f8:	f000 f80c 	bl	8004114 <__swsetup_r>
 80040fc:	2800      	cmp	r0, #0
 80040fe:	d0cb      	beq.n	8004098 <__swbuf_r+0x28>
 8004100:	f04f 37ff 	mov.w	r7, #4294967295
 8004104:	e7ea      	b.n	80040dc <__swbuf_r+0x6c>
 8004106:	bf00      	nop
 8004108:	08004b20 	.word	0x08004b20
 800410c:	08004b40 	.word	0x08004b40
 8004110:	08004b00 	.word	0x08004b00

08004114 <__swsetup_r>:
 8004114:	4b32      	ldr	r3, [pc, #200]	; (80041e0 <__swsetup_r+0xcc>)
 8004116:	b570      	push	{r4, r5, r6, lr}
 8004118:	681d      	ldr	r5, [r3, #0]
 800411a:	4606      	mov	r6, r0
 800411c:	460c      	mov	r4, r1
 800411e:	b125      	cbz	r5, 800412a <__swsetup_r+0x16>
 8004120:	69ab      	ldr	r3, [r5, #24]
 8004122:	b913      	cbnz	r3, 800412a <__swsetup_r+0x16>
 8004124:	4628      	mov	r0, r5
 8004126:	f000 f985 	bl	8004434 <__sinit>
 800412a:	4b2e      	ldr	r3, [pc, #184]	; (80041e4 <__swsetup_r+0xd0>)
 800412c:	429c      	cmp	r4, r3
 800412e:	d10f      	bne.n	8004150 <__swsetup_r+0x3c>
 8004130:	686c      	ldr	r4, [r5, #4]
 8004132:	89a3      	ldrh	r3, [r4, #12]
 8004134:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004138:	0719      	lsls	r1, r3, #28
 800413a:	d42c      	bmi.n	8004196 <__swsetup_r+0x82>
 800413c:	06dd      	lsls	r5, r3, #27
 800413e:	d411      	bmi.n	8004164 <__swsetup_r+0x50>
 8004140:	2309      	movs	r3, #9
 8004142:	6033      	str	r3, [r6, #0]
 8004144:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004148:	f04f 30ff 	mov.w	r0, #4294967295
 800414c:	81a3      	strh	r3, [r4, #12]
 800414e:	e03e      	b.n	80041ce <__swsetup_r+0xba>
 8004150:	4b25      	ldr	r3, [pc, #148]	; (80041e8 <__swsetup_r+0xd4>)
 8004152:	429c      	cmp	r4, r3
 8004154:	d101      	bne.n	800415a <__swsetup_r+0x46>
 8004156:	68ac      	ldr	r4, [r5, #8]
 8004158:	e7eb      	b.n	8004132 <__swsetup_r+0x1e>
 800415a:	4b24      	ldr	r3, [pc, #144]	; (80041ec <__swsetup_r+0xd8>)
 800415c:	429c      	cmp	r4, r3
 800415e:	bf08      	it	eq
 8004160:	68ec      	ldreq	r4, [r5, #12]
 8004162:	e7e6      	b.n	8004132 <__swsetup_r+0x1e>
 8004164:	0758      	lsls	r0, r3, #29
 8004166:	d512      	bpl.n	800418e <__swsetup_r+0x7a>
 8004168:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800416a:	b141      	cbz	r1, 800417e <__swsetup_r+0x6a>
 800416c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004170:	4299      	cmp	r1, r3
 8004172:	d002      	beq.n	800417a <__swsetup_r+0x66>
 8004174:	4630      	mov	r0, r6
 8004176:	f7ff fbd7 	bl	8003928 <_free_r>
 800417a:	2300      	movs	r3, #0
 800417c:	6363      	str	r3, [r4, #52]	; 0x34
 800417e:	89a3      	ldrh	r3, [r4, #12]
 8004180:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004184:	81a3      	strh	r3, [r4, #12]
 8004186:	2300      	movs	r3, #0
 8004188:	6063      	str	r3, [r4, #4]
 800418a:	6923      	ldr	r3, [r4, #16]
 800418c:	6023      	str	r3, [r4, #0]
 800418e:	89a3      	ldrh	r3, [r4, #12]
 8004190:	f043 0308 	orr.w	r3, r3, #8
 8004194:	81a3      	strh	r3, [r4, #12]
 8004196:	6923      	ldr	r3, [r4, #16]
 8004198:	b94b      	cbnz	r3, 80041ae <__swsetup_r+0x9a>
 800419a:	89a3      	ldrh	r3, [r4, #12]
 800419c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80041a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041a4:	d003      	beq.n	80041ae <__swsetup_r+0x9a>
 80041a6:	4621      	mov	r1, r4
 80041a8:	4630      	mov	r0, r6
 80041aa:	f000 fa07 	bl	80045bc <__smakebuf_r>
 80041ae:	89a0      	ldrh	r0, [r4, #12]
 80041b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80041b4:	f010 0301 	ands.w	r3, r0, #1
 80041b8:	d00a      	beq.n	80041d0 <__swsetup_r+0xbc>
 80041ba:	2300      	movs	r3, #0
 80041bc:	60a3      	str	r3, [r4, #8]
 80041be:	6963      	ldr	r3, [r4, #20]
 80041c0:	425b      	negs	r3, r3
 80041c2:	61a3      	str	r3, [r4, #24]
 80041c4:	6923      	ldr	r3, [r4, #16]
 80041c6:	b943      	cbnz	r3, 80041da <__swsetup_r+0xc6>
 80041c8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80041cc:	d1ba      	bne.n	8004144 <__swsetup_r+0x30>
 80041ce:	bd70      	pop	{r4, r5, r6, pc}
 80041d0:	0781      	lsls	r1, r0, #30
 80041d2:	bf58      	it	pl
 80041d4:	6963      	ldrpl	r3, [r4, #20]
 80041d6:	60a3      	str	r3, [r4, #8]
 80041d8:	e7f4      	b.n	80041c4 <__swsetup_r+0xb0>
 80041da:	2000      	movs	r0, #0
 80041dc:	e7f7      	b.n	80041ce <__swsetup_r+0xba>
 80041de:	bf00      	nop
 80041e0:	20000374 	.word	0x20000374
 80041e4:	08004b20 	.word	0x08004b20
 80041e8:	08004b40 	.word	0x08004b40
 80041ec:	08004b00 	.word	0x08004b00

080041f0 <abort>:
 80041f0:	2006      	movs	r0, #6
 80041f2:	b508      	push	{r3, lr}
 80041f4:	f000 fa64 	bl	80046c0 <raise>
 80041f8:	2001      	movs	r0, #1
 80041fa:	f7fd f814 	bl	8001226 <_exit>
	...

08004200 <__sflush_r>:
 8004200:	898a      	ldrh	r2, [r1, #12]
 8004202:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004206:	4605      	mov	r5, r0
 8004208:	0710      	lsls	r0, r2, #28
 800420a:	460c      	mov	r4, r1
 800420c:	d458      	bmi.n	80042c0 <__sflush_r+0xc0>
 800420e:	684b      	ldr	r3, [r1, #4]
 8004210:	2b00      	cmp	r3, #0
 8004212:	dc05      	bgt.n	8004220 <__sflush_r+0x20>
 8004214:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004216:	2b00      	cmp	r3, #0
 8004218:	dc02      	bgt.n	8004220 <__sflush_r+0x20>
 800421a:	2000      	movs	r0, #0
 800421c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004220:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004222:	2e00      	cmp	r6, #0
 8004224:	d0f9      	beq.n	800421a <__sflush_r+0x1a>
 8004226:	2300      	movs	r3, #0
 8004228:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800422c:	682f      	ldr	r7, [r5, #0]
 800422e:	602b      	str	r3, [r5, #0]
 8004230:	d032      	beq.n	8004298 <__sflush_r+0x98>
 8004232:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004234:	89a3      	ldrh	r3, [r4, #12]
 8004236:	075a      	lsls	r2, r3, #29
 8004238:	d505      	bpl.n	8004246 <__sflush_r+0x46>
 800423a:	6863      	ldr	r3, [r4, #4]
 800423c:	1ac0      	subs	r0, r0, r3
 800423e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004240:	b10b      	cbz	r3, 8004246 <__sflush_r+0x46>
 8004242:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004244:	1ac0      	subs	r0, r0, r3
 8004246:	2300      	movs	r3, #0
 8004248:	4602      	mov	r2, r0
 800424a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800424c:	4628      	mov	r0, r5
 800424e:	6a21      	ldr	r1, [r4, #32]
 8004250:	47b0      	blx	r6
 8004252:	1c43      	adds	r3, r0, #1
 8004254:	89a3      	ldrh	r3, [r4, #12]
 8004256:	d106      	bne.n	8004266 <__sflush_r+0x66>
 8004258:	6829      	ldr	r1, [r5, #0]
 800425a:	291d      	cmp	r1, #29
 800425c:	d82c      	bhi.n	80042b8 <__sflush_r+0xb8>
 800425e:	4a2a      	ldr	r2, [pc, #168]	; (8004308 <__sflush_r+0x108>)
 8004260:	40ca      	lsrs	r2, r1
 8004262:	07d6      	lsls	r6, r2, #31
 8004264:	d528      	bpl.n	80042b8 <__sflush_r+0xb8>
 8004266:	2200      	movs	r2, #0
 8004268:	6062      	str	r2, [r4, #4]
 800426a:	6922      	ldr	r2, [r4, #16]
 800426c:	04d9      	lsls	r1, r3, #19
 800426e:	6022      	str	r2, [r4, #0]
 8004270:	d504      	bpl.n	800427c <__sflush_r+0x7c>
 8004272:	1c42      	adds	r2, r0, #1
 8004274:	d101      	bne.n	800427a <__sflush_r+0x7a>
 8004276:	682b      	ldr	r3, [r5, #0]
 8004278:	b903      	cbnz	r3, 800427c <__sflush_r+0x7c>
 800427a:	6560      	str	r0, [r4, #84]	; 0x54
 800427c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800427e:	602f      	str	r7, [r5, #0]
 8004280:	2900      	cmp	r1, #0
 8004282:	d0ca      	beq.n	800421a <__sflush_r+0x1a>
 8004284:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004288:	4299      	cmp	r1, r3
 800428a:	d002      	beq.n	8004292 <__sflush_r+0x92>
 800428c:	4628      	mov	r0, r5
 800428e:	f7ff fb4b 	bl	8003928 <_free_r>
 8004292:	2000      	movs	r0, #0
 8004294:	6360      	str	r0, [r4, #52]	; 0x34
 8004296:	e7c1      	b.n	800421c <__sflush_r+0x1c>
 8004298:	6a21      	ldr	r1, [r4, #32]
 800429a:	2301      	movs	r3, #1
 800429c:	4628      	mov	r0, r5
 800429e:	47b0      	blx	r6
 80042a0:	1c41      	adds	r1, r0, #1
 80042a2:	d1c7      	bne.n	8004234 <__sflush_r+0x34>
 80042a4:	682b      	ldr	r3, [r5, #0]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d0c4      	beq.n	8004234 <__sflush_r+0x34>
 80042aa:	2b1d      	cmp	r3, #29
 80042ac:	d001      	beq.n	80042b2 <__sflush_r+0xb2>
 80042ae:	2b16      	cmp	r3, #22
 80042b0:	d101      	bne.n	80042b6 <__sflush_r+0xb6>
 80042b2:	602f      	str	r7, [r5, #0]
 80042b4:	e7b1      	b.n	800421a <__sflush_r+0x1a>
 80042b6:	89a3      	ldrh	r3, [r4, #12]
 80042b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042bc:	81a3      	strh	r3, [r4, #12]
 80042be:	e7ad      	b.n	800421c <__sflush_r+0x1c>
 80042c0:	690f      	ldr	r7, [r1, #16]
 80042c2:	2f00      	cmp	r7, #0
 80042c4:	d0a9      	beq.n	800421a <__sflush_r+0x1a>
 80042c6:	0793      	lsls	r3, r2, #30
 80042c8:	bf18      	it	ne
 80042ca:	2300      	movne	r3, #0
 80042cc:	680e      	ldr	r6, [r1, #0]
 80042ce:	bf08      	it	eq
 80042d0:	694b      	ldreq	r3, [r1, #20]
 80042d2:	eba6 0807 	sub.w	r8, r6, r7
 80042d6:	600f      	str	r7, [r1, #0]
 80042d8:	608b      	str	r3, [r1, #8]
 80042da:	f1b8 0f00 	cmp.w	r8, #0
 80042de:	dd9c      	ble.n	800421a <__sflush_r+0x1a>
 80042e0:	4643      	mov	r3, r8
 80042e2:	463a      	mov	r2, r7
 80042e4:	4628      	mov	r0, r5
 80042e6:	6a21      	ldr	r1, [r4, #32]
 80042e8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80042ea:	47b0      	blx	r6
 80042ec:	2800      	cmp	r0, #0
 80042ee:	dc06      	bgt.n	80042fe <__sflush_r+0xfe>
 80042f0:	89a3      	ldrh	r3, [r4, #12]
 80042f2:	f04f 30ff 	mov.w	r0, #4294967295
 80042f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042fa:	81a3      	strh	r3, [r4, #12]
 80042fc:	e78e      	b.n	800421c <__sflush_r+0x1c>
 80042fe:	4407      	add	r7, r0
 8004300:	eba8 0800 	sub.w	r8, r8, r0
 8004304:	e7e9      	b.n	80042da <__sflush_r+0xda>
 8004306:	bf00      	nop
 8004308:	20400001 	.word	0x20400001

0800430c <_fflush_r>:
 800430c:	b538      	push	{r3, r4, r5, lr}
 800430e:	690b      	ldr	r3, [r1, #16]
 8004310:	4605      	mov	r5, r0
 8004312:	460c      	mov	r4, r1
 8004314:	b913      	cbnz	r3, 800431c <_fflush_r+0x10>
 8004316:	2500      	movs	r5, #0
 8004318:	4628      	mov	r0, r5
 800431a:	bd38      	pop	{r3, r4, r5, pc}
 800431c:	b118      	cbz	r0, 8004326 <_fflush_r+0x1a>
 800431e:	6983      	ldr	r3, [r0, #24]
 8004320:	b90b      	cbnz	r3, 8004326 <_fflush_r+0x1a>
 8004322:	f000 f887 	bl	8004434 <__sinit>
 8004326:	4b14      	ldr	r3, [pc, #80]	; (8004378 <_fflush_r+0x6c>)
 8004328:	429c      	cmp	r4, r3
 800432a:	d11b      	bne.n	8004364 <_fflush_r+0x58>
 800432c:	686c      	ldr	r4, [r5, #4]
 800432e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d0ef      	beq.n	8004316 <_fflush_r+0xa>
 8004336:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004338:	07d0      	lsls	r0, r2, #31
 800433a:	d404      	bmi.n	8004346 <_fflush_r+0x3a>
 800433c:	0599      	lsls	r1, r3, #22
 800433e:	d402      	bmi.n	8004346 <_fflush_r+0x3a>
 8004340:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004342:	f000 f915 	bl	8004570 <__retarget_lock_acquire_recursive>
 8004346:	4628      	mov	r0, r5
 8004348:	4621      	mov	r1, r4
 800434a:	f7ff ff59 	bl	8004200 <__sflush_r>
 800434e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004350:	4605      	mov	r5, r0
 8004352:	07da      	lsls	r2, r3, #31
 8004354:	d4e0      	bmi.n	8004318 <_fflush_r+0xc>
 8004356:	89a3      	ldrh	r3, [r4, #12]
 8004358:	059b      	lsls	r3, r3, #22
 800435a:	d4dd      	bmi.n	8004318 <_fflush_r+0xc>
 800435c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800435e:	f000 f908 	bl	8004572 <__retarget_lock_release_recursive>
 8004362:	e7d9      	b.n	8004318 <_fflush_r+0xc>
 8004364:	4b05      	ldr	r3, [pc, #20]	; (800437c <_fflush_r+0x70>)
 8004366:	429c      	cmp	r4, r3
 8004368:	d101      	bne.n	800436e <_fflush_r+0x62>
 800436a:	68ac      	ldr	r4, [r5, #8]
 800436c:	e7df      	b.n	800432e <_fflush_r+0x22>
 800436e:	4b04      	ldr	r3, [pc, #16]	; (8004380 <_fflush_r+0x74>)
 8004370:	429c      	cmp	r4, r3
 8004372:	bf08      	it	eq
 8004374:	68ec      	ldreq	r4, [r5, #12]
 8004376:	e7da      	b.n	800432e <_fflush_r+0x22>
 8004378:	08004b20 	.word	0x08004b20
 800437c:	08004b40 	.word	0x08004b40
 8004380:	08004b00 	.word	0x08004b00

08004384 <std>:
 8004384:	2300      	movs	r3, #0
 8004386:	b510      	push	{r4, lr}
 8004388:	4604      	mov	r4, r0
 800438a:	e9c0 3300 	strd	r3, r3, [r0]
 800438e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004392:	6083      	str	r3, [r0, #8]
 8004394:	8181      	strh	r1, [r0, #12]
 8004396:	6643      	str	r3, [r0, #100]	; 0x64
 8004398:	81c2      	strh	r2, [r0, #14]
 800439a:	6183      	str	r3, [r0, #24]
 800439c:	4619      	mov	r1, r3
 800439e:	2208      	movs	r2, #8
 80043a0:	305c      	adds	r0, #92	; 0x5c
 80043a2:	f7ff f930 	bl	8003606 <memset>
 80043a6:	4b05      	ldr	r3, [pc, #20]	; (80043bc <std+0x38>)
 80043a8:	6224      	str	r4, [r4, #32]
 80043aa:	6263      	str	r3, [r4, #36]	; 0x24
 80043ac:	4b04      	ldr	r3, [pc, #16]	; (80043c0 <std+0x3c>)
 80043ae:	62a3      	str	r3, [r4, #40]	; 0x28
 80043b0:	4b04      	ldr	r3, [pc, #16]	; (80043c4 <std+0x40>)
 80043b2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80043b4:	4b04      	ldr	r3, [pc, #16]	; (80043c8 <std+0x44>)
 80043b6:	6323      	str	r3, [r4, #48]	; 0x30
 80043b8:	bd10      	pop	{r4, pc}
 80043ba:	bf00      	nop
 80043bc:	080046f9 	.word	0x080046f9
 80043c0:	0800471b 	.word	0x0800471b
 80043c4:	08004753 	.word	0x08004753
 80043c8:	08004777 	.word	0x08004777

080043cc <_cleanup_r>:
 80043cc:	4901      	ldr	r1, [pc, #4]	; (80043d4 <_cleanup_r+0x8>)
 80043ce:	f000 b8af 	b.w	8004530 <_fwalk_reent>
 80043d2:	bf00      	nop
 80043d4:	0800430d 	.word	0x0800430d

080043d8 <__sfmoreglue>:
 80043d8:	b570      	push	{r4, r5, r6, lr}
 80043da:	2568      	movs	r5, #104	; 0x68
 80043dc:	1e4a      	subs	r2, r1, #1
 80043de:	4355      	muls	r5, r2
 80043e0:	460e      	mov	r6, r1
 80043e2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80043e6:	f7ff faeb 	bl	80039c0 <_malloc_r>
 80043ea:	4604      	mov	r4, r0
 80043ec:	b140      	cbz	r0, 8004400 <__sfmoreglue+0x28>
 80043ee:	2100      	movs	r1, #0
 80043f0:	e9c0 1600 	strd	r1, r6, [r0]
 80043f4:	300c      	adds	r0, #12
 80043f6:	60a0      	str	r0, [r4, #8]
 80043f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80043fc:	f7ff f903 	bl	8003606 <memset>
 8004400:	4620      	mov	r0, r4
 8004402:	bd70      	pop	{r4, r5, r6, pc}

08004404 <__sfp_lock_acquire>:
 8004404:	4801      	ldr	r0, [pc, #4]	; (800440c <__sfp_lock_acquire+0x8>)
 8004406:	f000 b8b3 	b.w	8004570 <__retarget_lock_acquire_recursive>
 800440a:	bf00      	nop
 800440c:	20000704 	.word	0x20000704

08004410 <__sfp_lock_release>:
 8004410:	4801      	ldr	r0, [pc, #4]	; (8004418 <__sfp_lock_release+0x8>)
 8004412:	f000 b8ae 	b.w	8004572 <__retarget_lock_release_recursive>
 8004416:	bf00      	nop
 8004418:	20000704 	.word	0x20000704

0800441c <__sinit_lock_acquire>:
 800441c:	4801      	ldr	r0, [pc, #4]	; (8004424 <__sinit_lock_acquire+0x8>)
 800441e:	f000 b8a7 	b.w	8004570 <__retarget_lock_acquire_recursive>
 8004422:	bf00      	nop
 8004424:	200006ff 	.word	0x200006ff

08004428 <__sinit_lock_release>:
 8004428:	4801      	ldr	r0, [pc, #4]	; (8004430 <__sinit_lock_release+0x8>)
 800442a:	f000 b8a2 	b.w	8004572 <__retarget_lock_release_recursive>
 800442e:	bf00      	nop
 8004430:	200006ff 	.word	0x200006ff

08004434 <__sinit>:
 8004434:	b510      	push	{r4, lr}
 8004436:	4604      	mov	r4, r0
 8004438:	f7ff fff0 	bl	800441c <__sinit_lock_acquire>
 800443c:	69a3      	ldr	r3, [r4, #24]
 800443e:	b11b      	cbz	r3, 8004448 <__sinit+0x14>
 8004440:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004444:	f7ff bff0 	b.w	8004428 <__sinit_lock_release>
 8004448:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800444c:	6523      	str	r3, [r4, #80]	; 0x50
 800444e:	4b13      	ldr	r3, [pc, #76]	; (800449c <__sinit+0x68>)
 8004450:	4a13      	ldr	r2, [pc, #76]	; (80044a0 <__sinit+0x6c>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	62a2      	str	r2, [r4, #40]	; 0x28
 8004456:	42a3      	cmp	r3, r4
 8004458:	bf08      	it	eq
 800445a:	2301      	moveq	r3, #1
 800445c:	4620      	mov	r0, r4
 800445e:	bf08      	it	eq
 8004460:	61a3      	streq	r3, [r4, #24]
 8004462:	f000 f81f 	bl	80044a4 <__sfp>
 8004466:	6060      	str	r0, [r4, #4]
 8004468:	4620      	mov	r0, r4
 800446a:	f000 f81b 	bl	80044a4 <__sfp>
 800446e:	60a0      	str	r0, [r4, #8]
 8004470:	4620      	mov	r0, r4
 8004472:	f000 f817 	bl	80044a4 <__sfp>
 8004476:	2200      	movs	r2, #0
 8004478:	2104      	movs	r1, #4
 800447a:	60e0      	str	r0, [r4, #12]
 800447c:	6860      	ldr	r0, [r4, #4]
 800447e:	f7ff ff81 	bl	8004384 <std>
 8004482:	2201      	movs	r2, #1
 8004484:	2109      	movs	r1, #9
 8004486:	68a0      	ldr	r0, [r4, #8]
 8004488:	f7ff ff7c 	bl	8004384 <std>
 800448c:	2202      	movs	r2, #2
 800448e:	2112      	movs	r1, #18
 8004490:	68e0      	ldr	r0, [r4, #12]
 8004492:	f7ff ff77 	bl	8004384 <std>
 8004496:	2301      	movs	r3, #1
 8004498:	61a3      	str	r3, [r4, #24]
 800449a:	e7d1      	b.n	8004440 <__sinit+0xc>
 800449c:	08004914 	.word	0x08004914
 80044a0:	080043cd 	.word	0x080043cd

080044a4 <__sfp>:
 80044a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044a6:	4607      	mov	r7, r0
 80044a8:	f7ff ffac 	bl	8004404 <__sfp_lock_acquire>
 80044ac:	4b1e      	ldr	r3, [pc, #120]	; (8004528 <__sfp+0x84>)
 80044ae:	681e      	ldr	r6, [r3, #0]
 80044b0:	69b3      	ldr	r3, [r6, #24]
 80044b2:	b913      	cbnz	r3, 80044ba <__sfp+0x16>
 80044b4:	4630      	mov	r0, r6
 80044b6:	f7ff ffbd 	bl	8004434 <__sinit>
 80044ba:	3648      	adds	r6, #72	; 0x48
 80044bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80044c0:	3b01      	subs	r3, #1
 80044c2:	d503      	bpl.n	80044cc <__sfp+0x28>
 80044c4:	6833      	ldr	r3, [r6, #0]
 80044c6:	b30b      	cbz	r3, 800450c <__sfp+0x68>
 80044c8:	6836      	ldr	r6, [r6, #0]
 80044ca:	e7f7      	b.n	80044bc <__sfp+0x18>
 80044cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80044d0:	b9d5      	cbnz	r5, 8004508 <__sfp+0x64>
 80044d2:	4b16      	ldr	r3, [pc, #88]	; (800452c <__sfp+0x88>)
 80044d4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80044d8:	60e3      	str	r3, [r4, #12]
 80044da:	6665      	str	r5, [r4, #100]	; 0x64
 80044dc:	f000 f847 	bl	800456e <__retarget_lock_init_recursive>
 80044e0:	f7ff ff96 	bl	8004410 <__sfp_lock_release>
 80044e4:	2208      	movs	r2, #8
 80044e6:	4629      	mov	r1, r5
 80044e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80044ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80044f0:	6025      	str	r5, [r4, #0]
 80044f2:	61a5      	str	r5, [r4, #24]
 80044f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80044f8:	f7ff f885 	bl	8003606 <memset>
 80044fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004500:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004504:	4620      	mov	r0, r4
 8004506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004508:	3468      	adds	r4, #104	; 0x68
 800450a:	e7d9      	b.n	80044c0 <__sfp+0x1c>
 800450c:	2104      	movs	r1, #4
 800450e:	4638      	mov	r0, r7
 8004510:	f7ff ff62 	bl	80043d8 <__sfmoreglue>
 8004514:	4604      	mov	r4, r0
 8004516:	6030      	str	r0, [r6, #0]
 8004518:	2800      	cmp	r0, #0
 800451a:	d1d5      	bne.n	80044c8 <__sfp+0x24>
 800451c:	f7ff ff78 	bl	8004410 <__sfp_lock_release>
 8004520:	230c      	movs	r3, #12
 8004522:	603b      	str	r3, [r7, #0]
 8004524:	e7ee      	b.n	8004504 <__sfp+0x60>
 8004526:	bf00      	nop
 8004528:	08004914 	.word	0x08004914
 800452c:	ffff0001 	.word	0xffff0001

08004530 <_fwalk_reent>:
 8004530:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004534:	4606      	mov	r6, r0
 8004536:	4688      	mov	r8, r1
 8004538:	2700      	movs	r7, #0
 800453a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800453e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004542:	f1b9 0901 	subs.w	r9, r9, #1
 8004546:	d505      	bpl.n	8004554 <_fwalk_reent+0x24>
 8004548:	6824      	ldr	r4, [r4, #0]
 800454a:	2c00      	cmp	r4, #0
 800454c:	d1f7      	bne.n	800453e <_fwalk_reent+0xe>
 800454e:	4638      	mov	r0, r7
 8004550:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004554:	89ab      	ldrh	r3, [r5, #12]
 8004556:	2b01      	cmp	r3, #1
 8004558:	d907      	bls.n	800456a <_fwalk_reent+0x3a>
 800455a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800455e:	3301      	adds	r3, #1
 8004560:	d003      	beq.n	800456a <_fwalk_reent+0x3a>
 8004562:	4629      	mov	r1, r5
 8004564:	4630      	mov	r0, r6
 8004566:	47c0      	blx	r8
 8004568:	4307      	orrs	r7, r0
 800456a:	3568      	adds	r5, #104	; 0x68
 800456c:	e7e9      	b.n	8004542 <_fwalk_reent+0x12>

0800456e <__retarget_lock_init_recursive>:
 800456e:	4770      	bx	lr

08004570 <__retarget_lock_acquire_recursive>:
 8004570:	4770      	bx	lr

08004572 <__retarget_lock_release_recursive>:
 8004572:	4770      	bx	lr

08004574 <__swhatbuf_r>:
 8004574:	b570      	push	{r4, r5, r6, lr}
 8004576:	460e      	mov	r6, r1
 8004578:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800457c:	4614      	mov	r4, r2
 800457e:	2900      	cmp	r1, #0
 8004580:	461d      	mov	r5, r3
 8004582:	b096      	sub	sp, #88	; 0x58
 8004584:	da07      	bge.n	8004596 <__swhatbuf_r+0x22>
 8004586:	2300      	movs	r3, #0
 8004588:	602b      	str	r3, [r5, #0]
 800458a:	89b3      	ldrh	r3, [r6, #12]
 800458c:	061a      	lsls	r2, r3, #24
 800458e:	d410      	bmi.n	80045b2 <__swhatbuf_r+0x3e>
 8004590:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004594:	e00e      	b.n	80045b4 <__swhatbuf_r+0x40>
 8004596:	466a      	mov	r2, sp
 8004598:	f000 f914 	bl	80047c4 <_fstat_r>
 800459c:	2800      	cmp	r0, #0
 800459e:	dbf2      	blt.n	8004586 <__swhatbuf_r+0x12>
 80045a0:	9a01      	ldr	r2, [sp, #4]
 80045a2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80045a6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80045aa:	425a      	negs	r2, r3
 80045ac:	415a      	adcs	r2, r3
 80045ae:	602a      	str	r2, [r5, #0]
 80045b0:	e7ee      	b.n	8004590 <__swhatbuf_r+0x1c>
 80045b2:	2340      	movs	r3, #64	; 0x40
 80045b4:	2000      	movs	r0, #0
 80045b6:	6023      	str	r3, [r4, #0]
 80045b8:	b016      	add	sp, #88	; 0x58
 80045ba:	bd70      	pop	{r4, r5, r6, pc}

080045bc <__smakebuf_r>:
 80045bc:	898b      	ldrh	r3, [r1, #12]
 80045be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80045c0:	079d      	lsls	r5, r3, #30
 80045c2:	4606      	mov	r6, r0
 80045c4:	460c      	mov	r4, r1
 80045c6:	d507      	bpl.n	80045d8 <__smakebuf_r+0x1c>
 80045c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80045cc:	6023      	str	r3, [r4, #0]
 80045ce:	6123      	str	r3, [r4, #16]
 80045d0:	2301      	movs	r3, #1
 80045d2:	6163      	str	r3, [r4, #20]
 80045d4:	b002      	add	sp, #8
 80045d6:	bd70      	pop	{r4, r5, r6, pc}
 80045d8:	466a      	mov	r2, sp
 80045da:	ab01      	add	r3, sp, #4
 80045dc:	f7ff ffca 	bl	8004574 <__swhatbuf_r>
 80045e0:	9900      	ldr	r1, [sp, #0]
 80045e2:	4605      	mov	r5, r0
 80045e4:	4630      	mov	r0, r6
 80045e6:	f7ff f9eb 	bl	80039c0 <_malloc_r>
 80045ea:	b948      	cbnz	r0, 8004600 <__smakebuf_r+0x44>
 80045ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045f0:	059a      	lsls	r2, r3, #22
 80045f2:	d4ef      	bmi.n	80045d4 <__smakebuf_r+0x18>
 80045f4:	f023 0303 	bic.w	r3, r3, #3
 80045f8:	f043 0302 	orr.w	r3, r3, #2
 80045fc:	81a3      	strh	r3, [r4, #12]
 80045fe:	e7e3      	b.n	80045c8 <__smakebuf_r+0xc>
 8004600:	4b0d      	ldr	r3, [pc, #52]	; (8004638 <__smakebuf_r+0x7c>)
 8004602:	62b3      	str	r3, [r6, #40]	; 0x28
 8004604:	89a3      	ldrh	r3, [r4, #12]
 8004606:	6020      	str	r0, [r4, #0]
 8004608:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800460c:	81a3      	strh	r3, [r4, #12]
 800460e:	9b00      	ldr	r3, [sp, #0]
 8004610:	6120      	str	r0, [r4, #16]
 8004612:	6163      	str	r3, [r4, #20]
 8004614:	9b01      	ldr	r3, [sp, #4]
 8004616:	b15b      	cbz	r3, 8004630 <__smakebuf_r+0x74>
 8004618:	4630      	mov	r0, r6
 800461a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800461e:	f000 f8e3 	bl	80047e8 <_isatty_r>
 8004622:	b128      	cbz	r0, 8004630 <__smakebuf_r+0x74>
 8004624:	89a3      	ldrh	r3, [r4, #12]
 8004626:	f023 0303 	bic.w	r3, r3, #3
 800462a:	f043 0301 	orr.w	r3, r3, #1
 800462e:	81a3      	strh	r3, [r4, #12]
 8004630:	89a0      	ldrh	r0, [r4, #12]
 8004632:	4305      	orrs	r5, r0
 8004634:	81a5      	strh	r5, [r4, #12]
 8004636:	e7cd      	b.n	80045d4 <__smakebuf_r+0x18>
 8004638:	080043cd 	.word	0x080043cd

0800463c <memchr>:
 800463c:	4603      	mov	r3, r0
 800463e:	b510      	push	{r4, lr}
 8004640:	b2c9      	uxtb	r1, r1
 8004642:	4402      	add	r2, r0
 8004644:	4293      	cmp	r3, r2
 8004646:	4618      	mov	r0, r3
 8004648:	d101      	bne.n	800464e <memchr+0x12>
 800464a:	2000      	movs	r0, #0
 800464c:	e003      	b.n	8004656 <memchr+0x1a>
 800464e:	7804      	ldrb	r4, [r0, #0]
 8004650:	3301      	adds	r3, #1
 8004652:	428c      	cmp	r4, r1
 8004654:	d1f6      	bne.n	8004644 <memchr+0x8>
 8004656:	bd10      	pop	{r4, pc}

08004658 <__malloc_lock>:
 8004658:	4801      	ldr	r0, [pc, #4]	; (8004660 <__malloc_lock+0x8>)
 800465a:	f7ff bf89 	b.w	8004570 <__retarget_lock_acquire_recursive>
 800465e:	bf00      	nop
 8004660:	20000700 	.word	0x20000700

08004664 <__malloc_unlock>:
 8004664:	4801      	ldr	r0, [pc, #4]	; (800466c <__malloc_unlock+0x8>)
 8004666:	f7ff bf84 	b.w	8004572 <__retarget_lock_release_recursive>
 800466a:	bf00      	nop
 800466c:	20000700 	.word	0x20000700

08004670 <_raise_r>:
 8004670:	291f      	cmp	r1, #31
 8004672:	b538      	push	{r3, r4, r5, lr}
 8004674:	4604      	mov	r4, r0
 8004676:	460d      	mov	r5, r1
 8004678:	d904      	bls.n	8004684 <_raise_r+0x14>
 800467a:	2316      	movs	r3, #22
 800467c:	6003      	str	r3, [r0, #0]
 800467e:	f04f 30ff 	mov.w	r0, #4294967295
 8004682:	bd38      	pop	{r3, r4, r5, pc}
 8004684:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004686:	b112      	cbz	r2, 800468e <_raise_r+0x1e>
 8004688:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800468c:	b94b      	cbnz	r3, 80046a2 <_raise_r+0x32>
 800468e:	4620      	mov	r0, r4
 8004690:	f000 f830 	bl	80046f4 <_getpid_r>
 8004694:	462a      	mov	r2, r5
 8004696:	4601      	mov	r1, r0
 8004698:	4620      	mov	r0, r4
 800469a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800469e:	f000 b817 	b.w	80046d0 <_kill_r>
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d00a      	beq.n	80046bc <_raise_r+0x4c>
 80046a6:	1c59      	adds	r1, r3, #1
 80046a8:	d103      	bne.n	80046b2 <_raise_r+0x42>
 80046aa:	2316      	movs	r3, #22
 80046ac:	6003      	str	r3, [r0, #0]
 80046ae:	2001      	movs	r0, #1
 80046b0:	e7e7      	b.n	8004682 <_raise_r+0x12>
 80046b2:	2400      	movs	r4, #0
 80046b4:	4628      	mov	r0, r5
 80046b6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80046ba:	4798      	blx	r3
 80046bc:	2000      	movs	r0, #0
 80046be:	e7e0      	b.n	8004682 <_raise_r+0x12>

080046c0 <raise>:
 80046c0:	4b02      	ldr	r3, [pc, #8]	; (80046cc <raise+0xc>)
 80046c2:	4601      	mov	r1, r0
 80046c4:	6818      	ldr	r0, [r3, #0]
 80046c6:	f7ff bfd3 	b.w	8004670 <_raise_r>
 80046ca:	bf00      	nop
 80046cc:	20000374 	.word	0x20000374

080046d0 <_kill_r>:
 80046d0:	b538      	push	{r3, r4, r5, lr}
 80046d2:	2300      	movs	r3, #0
 80046d4:	4d06      	ldr	r5, [pc, #24]	; (80046f0 <_kill_r+0x20>)
 80046d6:	4604      	mov	r4, r0
 80046d8:	4608      	mov	r0, r1
 80046da:	4611      	mov	r1, r2
 80046dc:	602b      	str	r3, [r5, #0]
 80046de:	f7fc fd92 	bl	8001206 <_kill>
 80046e2:	1c43      	adds	r3, r0, #1
 80046e4:	d102      	bne.n	80046ec <_kill_r+0x1c>
 80046e6:	682b      	ldr	r3, [r5, #0]
 80046e8:	b103      	cbz	r3, 80046ec <_kill_r+0x1c>
 80046ea:	6023      	str	r3, [r4, #0]
 80046ec:	bd38      	pop	{r3, r4, r5, pc}
 80046ee:	bf00      	nop
 80046f0:	20000708 	.word	0x20000708

080046f4 <_getpid_r>:
 80046f4:	f7fc bd80 	b.w	80011f8 <_getpid>

080046f8 <__sread>:
 80046f8:	b510      	push	{r4, lr}
 80046fa:	460c      	mov	r4, r1
 80046fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004700:	f000 f894 	bl	800482c <_read_r>
 8004704:	2800      	cmp	r0, #0
 8004706:	bfab      	itete	ge
 8004708:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800470a:	89a3      	ldrhlt	r3, [r4, #12]
 800470c:	181b      	addge	r3, r3, r0
 800470e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004712:	bfac      	ite	ge
 8004714:	6563      	strge	r3, [r4, #84]	; 0x54
 8004716:	81a3      	strhlt	r3, [r4, #12]
 8004718:	bd10      	pop	{r4, pc}

0800471a <__swrite>:
 800471a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800471e:	461f      	mov	r7, r3
 8004720:	898b      	ldrh	r3, [r1, #12]
 8004722:	4605      	mov	r5, r0
 8004724:	05db      	lsls	r3, r3, #23
 8004726:	460c      	mov	r4, r1
 8004728:	4616      	mov	r6, r2
 800472a:	d505      	bpl.n	8004738 <__swrite+0x1e>
 800472c:	2302      	movs	r3, #2
 800472e:	2200      	movs	r2, #0
 8004730:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004734:	f000 f868 	bl	8004808 <_lseek_r>
 8004738:	89a3      	ldrh	r3, [r4, #12]
 800473a:	4632      	mov	r2, r6
 800473c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004740:	81a3      	strh	r3, [r4, #12]
 8004742:	4628      	mov	r0, r5
 8004744:	463b      	mov	r3, r7
 8004746:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800474a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800474e:	f000 b817 	b.w	8004780 <_write_r>

08004752 <__sseek>:
 8004752:	b510      	push	{r4, lr}
 8004754:	460c      	mov	r4, r1
 8004756:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800475a:	f000 f855 	bl	8004808 <_lseek_r>
 800475e:	1c43      	adds	r3, r0, #1
 8004760:	89a3      	ldrh	r3, [r4, #12]
 8004762:	bf15      	itete	ne
 8004764:	6560      	strne	r0, [r4, #84]	; 0x54
 8004766:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800476a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800476e:	81a3      	strheq	r3, [r4, #12]
 8004770:	bf18      	it	ne
 8004772:	81a3      	strhne	r3, [r4, #12]
 8004774:	bd10      	pop	{r4, pc}

08004776 <__sclose>:
 8004776:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800477a:	f000 b813 	b.w	80047a4 <_close_r>
	...

08004780 <_write_r>:
 8004780:	b538      	push	{r3, r4, r5, lr}
 8004782:	4604      	mov	r4, r0
 8004784:	4608      	mov	r0, r1
 8004786:	4611      	mov	r1, r2
 8004788:	2200      	movs	r2, #0
 800478a:	4d05      	ldr	r5, [pc, #20]	; (80047a0 <_write_r+0x20>)
 800478c:	602a      	str	r2, [r5, #0]
 800478e:	461a      	mov	r2, r3
 8004790:	f7fc fd70 	bl	8001274 <_write>
 8004794:	1c43      	adds	r3, r0, #1
 8004796:	d102      	bne.n	800479e <_write_r+0x1e>
 8004798:	682b      	ldr	r3, [r5, #0]
 800479a:	b103      	cbz	r3, 800479e <_write_r+0x1e>
 800479c:	6023      	str	r3, [r4, #0]
 800479e:	bd38      	pop	{r3, r4, r5, pc}
 80047a0:	20000708 	.word	0x20000708

080047a4 <_close_r>:
 80047a4:	b538      	push	{r3, r4, r5, lr}
 80047a6:	2300      	movs	r3, #0
 80047a8:	4d05      	ldr	r5, [pc, #20]	; (80047c0 <_close_r+0x1c>)
 80047aa:	4604      	mov	r4, r0
 80047ac:	4608      	mov	r0, r1
 80047ae:	602b      	str	r3, [r5, #0]
 80047b0:	f7fc fd7c 	bl	80012ac <_close>
 80047b4:	1c43      	adds	r3, r0, #1
 80047b6:	d102      	bne.n	80047be <_close_r+0x1a>
 80047b8:	682b      	ldr	r3, [r5, #0]
 80047ba:	b103      	cbz	r3, 80047be <_close_r+0x1a>
 80047bc:	6023      	str	r3, [r4, #0]
 80047be:	bd38      	pop	{r3, r4, r5, pc}
 80047c0:	20000708 	.word	0x20000708

080047c4 <_fstat_r>:
 80047c4:	b538      	push	{r3, r4, r5, lr}
 80047c6:	2300      	movs	r3, #0
 80047c8:	4d06      	ldr	r5, [pc, #24]	; (80047e4 <_fstat_r+0x20>)
 80047ca:	4604      	mov	r4, r0
 80047cc:	4608      	mov	r0, r1
 80047ce:	4611      	mov	r1, r2
 80047d0:	602b      	str	r3, [r5, #0]
 80047d2:	f7fc fd76 	bl	80012c2 <_fstat>
 80047d6:	1c43      	adds	r3, r0, #1
 80047d8:	d102      	bne.n	80047e0 <_fstat_r+0x1c>
 80047da:	682b      	ldr	r3, [r5, #0]
 80047dc:	b103      	cbz	r3, 80047e0 <_fstat_r+0x1c>
 80047de:	6023      	str	r3, [r4, #0]
 80047e0:	bd38      	pop	{r3, r4, r5, pc}
 80047e2:	bf00      	nop
 80047e4:	20000708 	.word	0x20000708

080047e8 <_isatty_r>:
 80047e8:	b538      	push	{r3, r4, r5, lr}
 80047ea:	2300      	movs	r3, #0
 80047ec:	4d05      	ldr	r5, [pc, #20]	; (8004804 <_isatty_r+0x1c>)
 80047ee:	4604      	mov	r4, r0
 80047f0:	4608      	mov	r0, r1
 80047f2:	602b      	str	r3, [r5, #0]
 80047f4:	f7fc fd74 	bl	80012e0 <_isatty>
 80047f8:	1c43      	adds	r3, r0, #1
 80047fa:	d102      	bne.n	8004802 <_isatty_r+0x1a>
 80047fc:	682b      	ldr	r3, [r5, #0]
 80047fe:	b103      	cbz	r3, 8004802 <_isatty_r+0x1a>
 8004800:	6023      	str	r3, [r4, #0]
 8004802:	bd38      	pop	{r3, r4, r5, pc}
 8004804:	20000708 	.word	0x20000708

08004808 <_lseek_r>:
 8004808:	b538      	push	{r3, r4, r5, lr}
 800480a:	4604      	mov	r4, r0
 800480c:	4608      	mov	r0, r1
 800480e:	4611      	mov	r1, r2
 8004810:	2200      	movs	r2, #0
 8004812:	4d05      	ldr	r5, [pc, #20]	; (8004828 <_lseek_r+0x20>)
 8004814:	602a      	str	r2, [r5, #0]
 8004816:	461a      	mov	r2, r3
 8004818:	f7fc fd6c 	bl	80012f4 <_lseek>
 800481c:	1c43      	adds	r3, r0, #1
 800481e:	d102      	bne.n	8004826 <_lseek_r+0x1e>
 8004820:	682b      	ldr	r3, [r5, #0]
 8004822:	b103      	cbz	r3, 8004826 <_lseek_r+0x1e>
 8004824:	6023      	str	r3, [r4, #0]
 8004826:	bd38      	pop	{r3, r4, r5, pc}
 8004828:	20000708 	.word	0x20000708

0800482c <_read_r>:
 800482c:	b538      	push	{r3, r4, r5, lr}
 800482e:	4604      	mov	r4, r0
 8004830:	4608      	mov	r0, r1
 8004832:	4611      	mov	r1, r2
 8004834:	2200      	movs	r2, #0
 8004836:	4d05      	ldr	r5, [pc, #20]	; (800484c <_read_r+0x20>)
 8004838:	602a      	str	r2, [r5, #0]
 800483a:	461a      	mov	r2, r3
 800483c:	f7fc fcfd 	bl	800123a <_read>
 8004840:	1c43      	adds	r3, r0, #1
 8004842:	d102      	bne.n	800484a <_read_r+0x1e>
 8004844:	682b      	ldr	r3, [r5, #0]
 8004846:	b103      	cbz	r3, 800484a <_read_r+0x1e>
 8004848:	6023      	str	r3, [r4, #0]
 800484a:	bd38      	pop	{r3, r4, r5, pc}
 800484c:	20000708 	.word	0x20000708

08004850 <_init>:
 8004850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004852:	bf00      	nop
 8004854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004856:	bc08      	pop	{r3}
 8004858:	469e      	mov	lr, r3
 800485a:	4770      	bx	lr

0800485c <_fini>:
 800485c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800485e:	bf00      	nop
 8004860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004862:	bc08      	pop	{r3}
 8004864:	469e      	mov	lr, r3
 8004866:	4770      	bx	lr
